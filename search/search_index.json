{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"tfm1/1Terragrunt/","title":"L1 \u4f7f\u7528Terragrunt\u4f18\u5316Terraform\u4ee3\u7801","text":"<p>Terragrunt\u5b83\u5982\u4f55\u5e2e\u52a9\u6211\u4eec\u51cf\u5c11Terraform \u4ee3\u7801\u4e2d\u7684\u4ee3\u7801\u5197\u4f59\u3002\u6211\u4eec\u5c06\u8ba8\u8bba\u4e86\u5b83\u7684\u57fa\u672c\u539f\u7406\u548c\u4f7f\u7528\u6848\u4f8b\u3002</p> <p></p> <p>Terragrunt\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u57fa\u4e8e\u547d\u4ee4\u884c\u7684\u6269\u5c55IaC\uff08\u57fa\u7840\u8bbe\u65bd\u5373\u4ee3\u7801\uff09\u5de5\u5177\uff0c\u5b83\u662fTerraform\u7684\u4e00\u4e2a\u5c01\u88c5\u5668\uff0c\u4f7f\u5f97Terraform\u4ee3\u7801\u66f4\u6613\u4e8e\u7ba1\u7406\uff0c\u5c24\u5176\u5728\u5904\u7406\u5927\u578b\u590d\u6742\u57fa\u7840\u8bbe\u65bd\u65f6\u66f4\u4e3a\u65b9\u4fbf\u3002\u5b83\u63d0\u4f9b\u4e86\u8bf8\u591a\u4fbf\u5229\u529f\u80fd\uff0c\u4f8b\u5982\u81ea\u52a8\u5316\u73af\u5883\u7ba1\u7406\uff0c\u7ba1\u7406\u91cd\u590d\u4ee3\u7801\uff0c\u81ea\u52a8\u9a8c\u8bc1IAM\u548cVPC\u7b49\u7b49</p> <p>\u672c\u6b21\u5b9e\u9a8c\u4e3a\u4e86\u6f14\u793a\u6548\u679c\uff0c\u6211\u4eec\u521b\u5efa\u6a21\u5757<code>module-alicloud-dns</code>\u7528\u4e8e\u540e\u9762\u5404\u4e2a\u73af\u5883\u5f15\u7528\u3002\u7136\u540e\u5148\u901a\u8fc7terraform\u539f\u59cb\u4ee3\u7801\u8fdb\u884c\u53d1\u5e03\uff0c\u6700\u540eterragrunt\u4f18\u5316\u4ee3\u7801\u5e76\u53d1\u5e03\u8d44\u6e90\u3002\u4ee3\u7801\u5e93\uff1ahttps://jihulab.com/terraform3</p> <p></p> <p>\u914d\u7f6eAK\u3001SK\u3001Region\u8ba4\u8bc1\u4fe1\u606f</p> <pre><code>export ALICLOUD_ACCESS_KEY=\"LTAI5B\"\nexport ALICLOUD_SECRET_KEY=\"soXvKoF6G\"\nexport ALICLOUD_REGION=\"cn-beijing\"\n</code></pre> <p>\u4f7f\u7528Terraform\u4ee3\u7801\u53d1\u5e03\u57fa\u7840\u8bbe\u65bd</p> <p></p>"},{"location":"tfm1/1Terragrunt/#backend","title":"\u90e8\u7f72Backend","text":"<p><code>main.tf</code> \u5b9a\u4e49\u963f\u91cc\u4e91\u7684<code>OSS bucket</code> \u548c<code>tablestore</code>. (<code>oss\\tablestore</code>\u7684\u547d\u540d\u53ef\u4ee5\u81ea\u5b9a\u4e49\uff0c\u552f\u4e00)</p> <pre><code>provider \"alicloud\" {\n  region     = \"cn-beijing\"\n}\n\n## oss\nresource \"alicloud_oss_bucket\" \"tfbucket\" {\n  bucket = \"tf-backend-datas\"\n  acl    = \"private\"\n}\n\n## tablestore\nresource \"alicloud_ots_instance\" \"tftable\" {\n  name        = \"tftablenew\"\n  description = \"terraform tablestore\"\n  accessed_by = \"Any\"\n  tags = {\n    Created = \"TF\"\n    For     = \"Building table\"\n  }\n}\n\nresource \"alicloud_ots_table\" \"basic\" {\n  instance_name = alicloud_ots_instance.tftable.name\n  table_name    = \"myterraformtable\"\n  primary_key {\n    name = \"LockID\"\n    type = \"String\"\n  }\n  time_to_live                  = -1\n  max_version                   = 1\n  deviation_cell_version_in_sec = 1\n}\n</code></pre> <p>\u4f7f\u7528\u547d\u4ee4\u90e8\u7f72\uff1a\uff08\u6ce8\u610f\u5148\u628a<code>.backend.tf</code>\u79fb\u52a8\u5230\u5176\u4ed6\u76ee\u5f55\uff09</p> <pre><code>terraform init \nterraform plan \nterraform apply --auto-approve \n</code></pre> <p>\u5c06\u72b6\u6001\u6587\u4ef6\u4ece\u672c\u5730\u8f6c\u6362\u6210OSS -- \u52a0\u5165<code>backend.tf</code>  (\u5c06backend.tf\u653e\u56de\u539f\u5904)\u540e\u8fd0\u884cterraform init</p> <pre><code>terraform {\n  backend \"oss\" {\n    bucket              = \"tf-backend-datas\"   #\u8981\u548c\u90e8\u7f72\u7684\u4e00\u81f4\n    prefix              = \"global/backend\"\n    key                 = \"terraform-global-backend.tfstate\"\n    region              = \"cn-beijing\"\n    tablestore_endpoint = \"https://tftablenew.cn-beijing.ots.aliyuncs.com\"  #\u6ce8\u610ftablestore\u7684\u547d\u540d\n    tablestore_table    = \"myterraformtable\"\n  }\n}\n</code></pre> <p></p> <p>\u5728\u963f\u91cc\u4e91\u63a7\u5236\u53f0\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u56fe\u6240\u793a\u3002</p> <p></p>"},{"location":"tfm1/1Terragrunt/#dev","title":"\u90e8\u7f72Dev\u73af\u5883","text":"<p>\u8fdb\u5165dev\u76ee\u5f55\uff0c\u53ef\u4ee5\u770b\u5230backend.tf\u3001main.tf\u3001variables.tf\u3001versions.tf\u3002</p> <p></p> <p>\u68c0\u67e5backend.tf\u4e2d\u7684oss\u548ctablestore\u7684\u547d\u540d\u662f\u5426\u548c\u90e8\u7f72\u7684backend\u662f\u5426\u4e00\u81f4\u3002</p> <p>\u9a8c\u8bc1\u4e00\u81f4\u540e\uff0c \u8fd0\u884c\u90e8\u7f72\u547d\u4ee4\uff1a</p> <pre><code>terraform init \nterraform plan \nterraform apply --auto-approve \n</code></pre> <p></p> <p>\u5728\u963f\u91cc\u4e91\u63a7\u5236\u53f0\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u6b64\u5904\u4e0d\u518d\u91cd\u590d\u6f14\u793aSTG\u548cPRD\u73af\u5883\u7684\u53d1\u5e03\uff0c\u5982\u6709\u9700\u8981\u53ef\u4ee5\u81ea\u884c\u53c2\u8003DEV\u73af\u5883\u8fdb\u884c\u53d1\u5e03STG\u548cPRD\u73af\u5883\u3002</p>"},{"location":"tfm1/1Terragrunt/#terraform","title":"Terraform\u7684\u95ee\u9898","text":"<ul> <li>versions.tf \u4ee3\u7801\u91cd\u590d</li> <li>module \u5bfc\u5165\u7684\u4ee3\u7801\u91cd\u590d</li> <li>backend.tf\u914d\u7f6e\u4ee3\u7801\u91cd\u590d</li> <li>provider\u914d\u7f6e\u91cd\u590d</li> </ul>"},{"location":"tfm1/1Terragrunt/#terragrunt","title":"Terragrunt","text":"<p>Terragrunt\u662f\u7531 Gruntwork \u7ef4\u62a4\u7684Terraform \u7684\u5305\u88c5\u5668\uff0c\u5141\u8bb8\u7ba1\u7406\u8fdc\u7a0b\u72b6\u6001\u548c Terraform \u6a21\u5757\u3002\u5b83\u65e8\u5728\u51cf\u5c11\u4ee3\u7801\u91cd\u590d\u3002\u6b64\u5916\uff0c\u5b83\u975e\u5e38\u6613\u4e8e\u4f7f\u7528\uff0c\u56e0\u4e3a\u60a8\u53ea\u9700\u5b89\u88c5\u5b83\u5e76\u5728\u6240\u6709 Terraform CLI \u547d\u4ee4\u4e2d\u66ff\u6362terraform\u4e3aterragrunt\u5373\u53ef\u3002</p> <p></p> <p>\u8ba9\u6211\u4eec\u770b\u770b\u6211\u4eec\u53ef\u4ee5\u7528 Terragrunt \u505a\u4e9b\u4ec0\u4e48\u6765\u6539\u8fdb\u6211\u4eec\u7684 Terraform \u4ee3\u7801\u5e93\uff01\u5c06 Terraform \u4ee3\u7801\u7684\u903b\u8f91\u4e0e\u5176\u5b9e\u73b0\u5206\u79bb:</p> <p>Terragrunt \u7684\u4e3b\u8981\u4f18\u70b9\u662f\u5b83\u5141\u8bb8\u5c06\u4ee3\u7801 Terraform \u7684\u903b\u8f91\uff08\u4f4d\u4e8eTerraform\u6a21\u5757\u4e2d\uff09\u4e0e\u5176\u5b9e\u73b0\uff08\u4f4d\u4e8e\u8c03\u7528 Terraform \u6a21\u5757\u7684\u4e0d\u540c\u73af\u5883\u7684\u914d\u7f6e\uff09\u5206\u79bb\u3002\u56e0\u6b64\uff0cTerragrunt \u53ef\u4ee5\u88ab\u89c6\u4e3a\u7f16\u6392 Terraform \u6a21\u5757\u7684\u5de5\u5177\u3002</p> <p></p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u5c06<code>*.tf</code>\u914d\u7f6e\u4e2d\u7684\u4f20\u7edf\u6587\u4ef6\u66ff\u6362\u4e3a Terragrunt.hcl\u914d\u7f6e\u6587\u4ef6\u3002\u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u5b9a\u4e49<code>module-alicloud-dns</code>\u5728\u6211\u4eec\u5b58\u50a8\u5e93\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u8c03\u7528\u6a21\u5757\u65f6\u4f20\u9012\u7684\u8f93\u5165\u503c\u3002\u5728\u6b64\u914d\u7f6e\u4e2d\uff0c\u503c\u5206\u89e3\u5f88\u7b80\u5355\uff01</p> <p></p> <p>\u4f7f\u7528Terragrunt\u4f18\u5316TF\u4ee3\u7801</p> <p></p> <p>\u5c06\u65e7\uff08Terraform\uff09\u4ee3\u7801\u4e2d\u7684Provider\u3001Backend\u3001Terraform\u3001Module\u914d\u7f6e\u653e\u5230\u6839\u76ee\u5f55\u4e0b\u7684<code>terragrunt.hcl</code>\u7136\u540e\u6bcf\u4e2a\u73af\u5883\u4e0b\u7684<code>terragrunt.hcl</code>\u914d\u7f6e\u96c6\u6210root\u914d\u7f6e\u3002</p>"},{"location":"tfm1/1Terragrunt/#provider","title":"\u4f18\u5316Provider\u914d\u7f6e","text":"<p>\u6587\u4ef6\uff1a<code>/terragrunt.hcl</code></p> <pre><code>// define provider\ngenerate \"provider\" {\n    path = \"provider.tf\"\n    if_exists = \"overwrite_terragrunt\"\n    contents = &lt;&lt;EOF\n    provider \"alicloud\" {\n}\nEOF\n}\n</code></pre>"},{"location":"tfm1/1Terragrunt/#terraform_1","title":"\u4f18\u5316Terraform\u914d\u7f6e","text":"<p>\u6587\u4ef6\uff1a<code>/terragrunt.hcl</code></p> <pre><code>// define terraform configuration\ngenerate \"versions\" {\n  path = \"versions.tf\"\n  if_exists = \"overwrite_terragrunt\"\n  contents = &lt;&lt;EOF\nterraform { \n  required_version = \"&gt;=1.1.8\"\n  required_providers {\n    alicloud = {\n      source  = \"hashicorp/alicloud\"\n      version = \"1.164.0\"\n    }\n  }\n}\nEOF\n}\n</code></pre>"},{"location":"tfm1/1Terragrunt/#module","title":"\u4f18\u5316Module\u914d\u7f6e","text":"<p>\u6587\u4ef6\uff1a<code>/terragrunt.hcl</code></p> <pre><code>// define terraform configuration\ngenerate \"versions\" {\n  path = \"versions.tf\"\n  if_exists = \"overwrite_terragrunt\"\n  contents = &lt;&lt;EOF\nterraform { \n  required_version = \"&gt;=1.1.8\"\n  required_providers {\n    alicloud = {\n      source  = \"hashicorp/alicloud\"\n      version = \"1.164.0\"\n    }\n  }\n}\nEOF\n}\n</code></pre>"},{"location":"tfm1/1Terragrunt/#module_1","title":"\u4f18\u5316Module\u914d\u7f6e","text":"<p>\u6587\u4ef6\uff1a<code>/terragrunt.hcl</code></p> <pre><code>// define modules\nterraform {\n  source =\"git::https://jihulab.com/terraform3/module-alicloud-dns.git?ref=v0.0.1\"\n}\n</code></pre>"},{"location":"tfm1/1Terragrunt/#backend_1","title":"\u4f18\u5316Backend\u914d\u7f6e","text":"<p>\u6587\u4ef6\uff1a<code>/terragrunt.hcl</code></p> <pre><code>// define backend \nremote_state {\n  backend = \"oss\"\n  generate = {\n    path      = \"backend.tf\"\n    if_exists = \"overwrite_terragrunt\"\n  }\n  config = {\n    bucket              = \"tf-backend-datas\"\n    prefix              = \"env/${path_relative_to_include()}\"\n    key                 = \"terraform.tfstate\"\n    region              = \"cn-beijing\"\n    tablestore_endpoint = \"https://tftablenew2023.cn-beijing.ots.aliyuncs.com\"\n    tablestore_table    = \"myterraformtable\"\n  }\n}\n</code></pre>"},{"location":"tfm1/1Terragrunt/#dev_1","title":"Dev\u73af\u5883\u7ee7\u627f\u914d\u7f6e","text":"<p>\u6587\u4ef6\uff1a<code>/dev/terragrunt.hcl</code></p> <pre><code>include \"root\" {\n  path = find_in_parent_folders()\n}\n\ninputs = {\n  dns_zone_name = \"zeyang.site\"\n  dns_record    = \"tgdev\"\n  eip           = \"123.123.123.123\"\n  record_type   = \"A\"\n}\n</code></pre> <p>\u8fd0\u884c\u547d\u4ee4\uff1a</p> <pre><code>terragrunt init\nterragrunt plan\nterragrunt apply \n</code></pre> <p></p> <p></p> <p>\u5728\u963f\u91cc\u4e91\u63a7\u5236\u53f0\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u56fe\u6240\u793a\u3002</p> <p></p>"},{"location":"tfm1/1Terragrunt/#stg","title":"Stg\u73af\u5883\u7ee7\u627f\u914d\u7f6e","text":"<p>\u6587\u4ef6\uff1a<code>/stg/terragrunt.hcl</code></p> <pre><code>\ninclude \"root\" {\n    path = find_in_parent_folders()\n}\n\ninputs = {\n    dns_zone_name = \"zeyang.site\"\n    dns_record    = \"tgstg\"\n    eip           = \"123.123.123.124\"\n    record_type   = \"A\"\n}\n</code></pre> <p>\u8fd0\u884cterragrunt init\u547d\u4ee4\u540e\u4f1a\u751f\u6210<code>.terragrunt-cache</code>\u76ee\u5f55\uff1a</p> <p></p> <p>\u4f1a\u81ea\u52a8\u751f\u6210\u8fd9\u4e9b\u6587\u4ef6\uff1a</p> <p></p> <p>\u603b\u7ed3\uff1a</p> <p>\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u4e86Terragrunt\u4ee5\u53ca\u5b83\u5982\u4f55\u5e2e\u52a9\u6211\u4eec\u51cf\u5c11Terraform \u4ee3\u7801\u4e2d\u7684\u4ee3\u7801\u5197\u4f59\u3002\u6211\u4eec\u8ba8\u8bba\u4e86\u5b83\u7684\u57fa\u672c\u539f\u7406\u548c\u4f7f\u7528\u6848\u4f8b\u3002</p>"},{"location":"tfm1/2TMF_JENKINS/","title":"L2 \u57fa\u7840\u8bbe\u65bd\u5373\u4ee3\u7801 - \u4f7f\u7528Terraform\u521b\u5efaAWS EC2\u5b9e\u4f8b\u5e76\u90e8\u7f72Jenkins\u670d\u52a1","text":"<p>Terraform \u662f\u7531 HashiCorp \u521b\u5efa\u7684\u5f00\u6e90\u57fa\u7840\u8bbe\u65bd\u5373\u4ee3\u7801\u8f6f\u4ef6\u5de5\u5177\u3002\u7528\u6237\u4f7f\u7528\u79f0\u4e3a HashiCorp \u914d\u7f6e\u8bed\u8a00\u7684\u58f0\u660e\u6027\u914d\u7f6e\u8bed\u8a00\uff08HCL\uff09\u6216\u53ef\u9009\u7684 JSON \u6765\u5b9a\u4e49\u548c\u63d0\u4f9b\u6570\u636e\u4e2d\u5fc3\u57fa\u7840\u8bbe\u65bd\u3002</p> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528 Terraform \u521b\u5efa\u8d44\u6e90\uff0c\u4f8b\u5982 AWS EC2 \u5b9e\u4f8b\u548c AWS S3 \u5b58\u50a8\u6876\u3002\u8fd9\u4e9b EC2 \u5b9e\u4f8b\u53ef\u4ee5\u88ab\u5f15\u5bfc\u4ee5\u5305\u542b Jenkins\uff0c\u8fd9\u662f\u4e91\u5de5\u7a0b\u5e08\u4f7f\u7528\u7684\u4e00\u79cd\u6d41\u884c\u7684\u6301\u7eed\u96c6\u6210/\u6301\u7eed\u4ea4\u4ed8\u5de5\u5177\u3002</p> <p>\u5728\u6b64\u9879\u76ee\u4e2d\uff0c\u60a8\u5c06\u5b66\u4e60\u5982\u4f55\u90e8\u7f72 EC2 \u5b9e\u4f8b\u3001\u5f15\u5bfc EC2 \u5b9e\u4f8b\u4ee5\u5b89\u88c5\u548c\u542f\u52a8 Jenkins\u3001\u521b\u5efa Jenkins \u5b89\u5168\u7ec4\u3001\u521b\u5efa\u79c1\u6709 Jenkins S3 \u5b58\u50a8\u6876\u4ee5\u5b58\u50a8 Jenkins \u5de5\u4ef6\u3002\u6b64\u5916\uff0c\u60a8\u8fd8\u5c06\u5b66\u4e60\u5982\u4f55\u521b\u5efa\u7b80\u5355\u7684 Jenkins \u7ba1\u9053</p>"},{"location":"tfm1/2TMF_JENKINS/#_1","title":"\u5148\u51b3\u6761\u4ef6\uff1a","text":"<p>\u60a8\u9700\u8981\u5b89\u88c5\u4ee5\u4e0b\u5de5\u5177\uff1a</p> <ul> <li>AWS CLI \u5b89\u88c5\u548c\u914d\u7f6e</li> <li>Terraform \u5b89\u88c5\u548c\u914d\u7f6e</li> <li>IDE\uff08\u6211\u4f7f\u7528 VS Code\uff09</li> </ul>"},{"location":"tfm1/2TMF_JENKINS/#_2","title":"\u5de5\u7a0b\u521d\u59cb\u5316","text":"<p>\u5728\u60a8\u9009\u62e9\u7684 IDE \u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u5939\uff0c\u7136\u540ecd\u8fdb\u5165\u8be5\u6587\u4ef6\u5939\u3002</p> <p>\u521b\u5efa main.tf\u3001variable.tf\u3001providers.tf \u548c outputs.tf \u6587\u4ef6</p> <p></p> <p>main.tf \u5c06\u5305\u542b\u4e3b\u8981\u7684\u914d\u7f6e\u3002</p> <pre><code>resource \"aws_instance\" \"instance\" {\n    ami                    = var.ami\n    instance_type          = var.instance\n    user_data              = var.ec2_user_data\n    vpc_security_group_ids = [aws_security_group.security_group.id]\n\n    tags = {\n        Name                  = \"Jenkins Instance\"\n    }\n}\n\nresource \"aws_security_group\" \"security_group\" { \n    vpc_id                 = var.vpc\n\n    ingress {\n        description            = \"Allow SSH from my Public IP\"\n        from_port              = 22\n        to_port                = 22\n        protocol               = \"tcp\"\n        cidr_blocks            = [\"-.-.-.-/32\"]  \n    }\n\n    ingress {\n      description            = \"Allows Access to the Jenkins Server\"\n      from_port              = 8080\n      to_port                = 8080\n      protocol               = \"tcp\"\n      cidr_blocks            = [\"0.0.0.0/0\"]\n  }\n\n    ingress {\n      description           = \"Allows Access to the Jenkins Server\"\n      from_port             = 443\n      to_port               = 443\n      protocol              = \"tcp\"\n      cidr_blocks           = [\"0.0.0.0/0\"]\n  }\n\n    egress {\n      from_port             = 0\n      to_port               = 0\n      protocol              = \"-1\"\n      cidr_blocks           = [\"0.0.0.0/0\"]\n  }\n    tags = {\n      Name                = \"Jenkins Security Group\"\n  }\n}\n\nresource \"aws_s3_bucket\" \"jojenkinsbucket\" {\n    bucket                = \"jojenkinsbucket\"\n}\n\nresource \"aws_s3_bucket_acl\" \"jenkinsbucketacl\" {\n    bucket                = aws_s3_bucket.jojenkinsbucket.id\n    acl                   = \"private\"\n}\n</code></pre> <p><code>variable.tf</code> \u5305\u542b\u53d8\u91cf\u5b9a\u4e49</p> <pre><code>variable \"vpc\" {\n  description         = \"The Default VPC of EC2\"\n  type                = string\n  default             = \"vpc-0be40a17d234455e3\"\n}\n\nvariable \"ami\" {\n  description         = \"The AMI ID of the Instance\"\n  type                = string\n  default             = \"ami-0dfcb1ef8550277af\"\n}\n\nvariable \"instance\" {\n  description         = \"The Instance Type of EC2\"\n  type                = string\n  default             = \"t2.micro\"\n}\n\nvariable \"ec2_user_data\" {\n  description        = \"User Data for Jenkins EC2\"\n  type               = string\n  default            = &lt;&lt;-EOF\n  #!/bin/bash\n  sudo yum update -y\n  sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\n  sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\n  sudo yum upgrade\n  sudo amazon-linux-extras install java-openjdk11 -y\n  sudo yum install -y jenkins\n  sudo systemctl enable jenkins\n  sudo systemctl start jenkins\n  EOF\n}\n</code></pre> <p><code>providers.tf</code> \u5b9a\u4e49\u4e91\u4f9b\u5e94\u5546\u914d\u7f6e</p> <pre><code>provider \"aws\" {\n    region         = \"us-east-1\"\n}\n\nterraform {\n  required_providers {\n    aws = {\n      source       = \"hashicorp/aws\"\n      version      = \"~&gt; 4.0\"\n    }\n  }\n}\n</code></pre> <p><code>outputs.tf</code>\u4ee3\u7801\u53d1\u5e03\u540e\u7684\u8f93\u51fa</p> <pre><code>output \"public_ip\" {\n    value           = aws_instance.instance.public_ip\n}\n</code></pre>"},{"location":"tfm1/2TMF_JENKINS/#_3","title":"\u57fa\u7840\u8bbe\u65bd\u53d1\u5e03","text":"<p><code>terraform init</code>\u547d\u4ee4\u5c06\u521d\u59cb\u5316\u5305\u542b <code>Terraform</code> \u914d\u7f6e\u6587\u4ef6\u7684\u5de5\u4f5c\u76ee\u5f55\u5e76\u5b89\u88c5\u4efb\u4f55\u6240\u9700\u7684\u63d2\u4ef6\u3002</p> <p></p> <p><code>terraform validate</code>\u547d\u4ee4\u9a8c\u8bc1\u76ee\u5f55\u4e2d\u7684\u914d\u7f6e\u6587\u4ef6\u3002</p> <p></p> <p><code>terraform plan</code>\u547d\u4ee4\u53ef\u8ba9\u60a8\u9884\u89c8 Terraform \u4e3a\u4fee\u6539\u60a8\u7684\u57fa\u7840\u67b6\u6784\u800c\u91c7\u53d6\u7684\u64cd\u4f5c\u3002</p> <p></p> <p><code>terraform apply</code>\u547d\u4ee4\u6267\u884c Terraform \u8ba1\u5212\u4e2d\u5efa\u8bae\u7684\u64cd\u4f5c\u4ee5\u521b\u5efa\u3001\u66f4\u65b0\u6216\u9500\u6bc1\u57fa\u7840\u8bbe\u65bd\u3002</p> <p></p> <p>\u6b64\u65f6\u60a8\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u63a7\u5236\u53f0\u6765\u786e\u8ba4 EC2 \u5b9e\u4f8b\u7684\u521b\u5efa\u3002</p> <p></p>"},{"location":"tfm1/2TMF_JENKINS/#jenkins","title":"\u6d4b\u8bd5Jenkins","text":"<p>Jenkins Pipeline \u662f\u4e00\u5957\u63d2\u4ef6\uff0c\u652f\u6301\u5728 Jenkins \u4e2d\u5b9e\u65bd\u548c\u96c6\u6210\u6301\u7eed\u4ea4\u4ed8\u7ba1\u9053\u3002</p> <p>\u8981\u521b\u5efa Jenkins \u7ba1\u9053\uff0c\u8bf7\u5728 Web \u6d4f\u89c8\u5668\u4e2d\u8f93\u5165\u201cEC2\u5b9e\u4f8b\u7684\u516c\u5171IP:8080\u201d \u3002\u914d\u7f6e\u5e76\u767b\u5f55Jenkins\u540e\uff0c\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u7c7b\u4f3c\u4e8e\u4e0b\u56fe\u7684\u622a\u56fe\u3002</p> <p></p> <p>\u5355\u51fb\u65b0\u9879\u76ee\u3002</p> <ul> <li>\u8f93\u5165\u9879\u76ee\u7684\u540d\u79f0\u3002</li> <li>\u9009\u62e9Pipeline\uff0c\u7136\u540e\u9009\u62e9Ok\u3002</li> </ul> <p></p> <p>\u5728\u7ba1\u9053\u90e8\u5206\uff0c\u8f93\u5165\u4ee5\u4e0b\u811a\u672c\uff1a</p> <pre><code>pipeline {\n    agent any\n    stages {\n        stage(\"build\") {\n\n            steps {\n                echo 'Building the application...'\n\n            }\n        }\n\n        stage(\"test\") {\n\n            steps {\n                echo 'Testing the application...'\n\n            }\n        }\n\n        stage(\"deploy\") {\n\n            steps {\n                echo 'Deploying the application...'\n\n            }\n        }\n }\n}\n</code></pre> <p>\u9009\u62e9Jenkins \u4eea\u8868\u677f\u5de6\u4fa7\u7684\u201c\u7acb\u5373\u6784\u5efa\u201d \u3002\u5982\u679c\u60a8\u770b\u5230\u7eff\u8272\u7684\u89c6\u56fe\uff0c\u5219\u8868\u793a\u6784\u5efa\u5df2\u6210\u529f\u5b8c\u6210\u3002</p> <p></p>"},{"location":"tfm1/2TMF_JENKINS/#_4","title":"\u9500\u6bc1\u8d44\u6e90","text":"<p>\u5982\u679c\u81ea\u5df1\u505a\u5b9e\u9a8c\u5207\u8bb0\u5220\u9664\u8d44\u6e90\uff0c\u5426\u5219\u4f1a\u9020\u6210\u8d26\u5355\u6d88\u8017\u3002\u4f7f\u7528terraform destroy\u9500\u6bc1\u8d44\u6e90\u3002</p>"},{"location":"vagrant/1create_vm/","title":"1 Creating VMs Effortlessly","text":""},{"location":"vagrant/1create_vm/#1-install-vagrant-on-macos-and-wintel","title":"1 Install Vagrant on macOS and Wintel","text":"<p>https://github.com/hashicorp/vagrant-installers</p> <pre><code>PS C: \\Users\\&gt; winget search vagrant\n\nName    Id      Version  Source\nVagrant Hashicorp Vagrant 2.3.0  winget\n</code></pre> <pre><code>$ choco search vagrant\nChocolatey v0.11.3\nvagrant 2.3. 1p[Approved] Downloads cached for licensed users\n...\n</code></pre>"},{"location":"vagrant/1create_vm/#what-is-a-provider","title":"What Is a Provider?","text":"<p>Install VirtualBox on macOS and Wintel</p> <pre><code>$ brew search virtualbox\n$ brew install virtualbox\n</code></pre> <p>https://www.virtualbox.org/wiki/Downloads</p>"},{"location":"vagrant/1create_vm/#vagrant-init","title":"Vagrant init","text":"<pre><code>vagrant init generic/ubuntu2204\n\nvagrant up\n</code></pre> <pre><code>$ vagrant init hashicorp/precise64\n\nA `Vagrantfile` has been placed in this directory. You are now\nready to `vagrant up` your first virtual environment! Please read\nthe comments in the Vagrantfile as well as documentation on\n`vagrantup.com` for more information on using Vagrant.\n\n$ vagrant ssh\nvagrant@precise64:~$ \n\n$ vagrant@precise64:~$ ps\n  PID TTY          TIME CMD\n 1185 pts/0    00:00:00 bash\n 1286 pts/0    00:00:00 ps\n\n$ cat /etc/lsb-release\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=12.04\nDISTRIB_CODENAME=precise\nDISTRIB_DESCRIPTION=\"Ubuntu 12.04 LTS\"\n\n$ uname -a\nLinux precise64 3.2.0-23-generic #36-Ubuntu SMP Tue Apr 10 20:39:51 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux\n\n\n$ pstree\ninit-+-VBoxService---7*[{VBoxService}]\n     |-atd\n     |-cron\n     |-dbus-daemon\n     |-dhclient\n     |-dhclient3\n     |-6*[getty]\n     |-irqbalance\n     |-ntpd\n     |-rpc.idmapd\n     |-rpc.statd\n     |-rpcbind\n     |-rsyslogd---3*[{rsyslogd}]\n     |-sshd---sshd---sshd---bash---pstree\n     |-udevd---2*[udevd]\n     |-upstart-socket-\n     `-upstart-udev-br\n</code></pre> <pre><code>$ vagrant status\nCurrent machine states:\n\ndefault                   running (virtualbox)\n\n$ vagrant halt\n\n$ vagrant status\nCurrent machine states:\n\ndefault                   poweroff (virtualbox)\n</code></pre> <p>Taking Box as granted</p> <pre><code>Org/User    Box Name\ngeneric/ubuntu2204   \n</code></pre>"},{"location":"vagrant/1create_vm/#using-the-parallels-provider-on-apple-silicon-macs","title":"Using the Parallels Provider on Apple Silicon Macs","text":"<pre><code>vagrant plugin install vagrant-parallels\n</code></pre> <p>Virtualbox Windows VM to Box with vagrant package --base</p> <pre><code>VBoxManage list vms\n\"win-11\" {321976ce-e45b-49e7-afc8-1cb54341f6f0}\n\n$ vagrant package --base win-11\n\n$ vagrant box list -i \n\n$ ls\nwin11.box\n\n$ vagrant box add win11  .\\win11.box\n\n$ vagrant init win11\n</code></pre>"},{"location":"vault/10vault_cm/","title":"10 \u4f7f\u7528 Vault + Cert Manager \u7ba1\u7406 Kubernetes \u96c6\u7fa4\u4e2d\u7684\u6570\u5b57\u8bc1\u4e66","text":""},{"location":"vault/10vault_cm/#_1","title":"\u524d\u8a00","text":"<p>\u4e4b\u524d\u7684\u6587\u7ae0\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528\u00a0OpenSSL\u00a0\u6765\u521b\u5efa\u6211\u4eec\u7684\u4e2a\u4eba\u6570\u5b57\u8bc1\u4e66\u4f53\u7cfb\uff0c\u4f46\u662f\u00a0OpenSSL \u53ea\u662f\u4e00\u4e2a\u672c\u5730\u5316\u7684\u5de5\u5177\uff0c\u5f53\u7528\u6237\u9700\u8981\u7533\u8bf7\u4e00\u4e2a\u6570\u5b57\u8bc1\u4e66\u65f6\uff0c\u5b83\u65e0\u6cd5\u4f5c\u4e3a\u670d\u52a1\u5668\u6765\u63d0\u4f9b\u81ea\u52a8\u5316\u7b7e\u53d1\u8bc1\u4e66\u7684\u529f\u80fd\u3002 </p> <p>Vault \u5c31\u5e94\u5bf9\u4e86\u8fd9\u79cd\u9700\u6c42\uff0c\u5b83\u662f\u7531\u00a0Hashicorp \u516c\u53f8\u5f00\u53d1\u7684\u4e00\u6b3e\u4e13\u95e8\u7528\u6765\u7ba1\u7406\u5404\u79cd\u6570\u5b57\u8bc1\u4e66\u3001\u5bc6\u94a5\u3001\u5bc6\u7801\u3001\u767b\u5f55\u51ed\u8bc1\u7b49\u5404\u7c7b\u673a\u5bc6\u4fe1\u606f\u7684\u670d\u52a1\u5668\u7a0b\u5e8f\u3002\u6211\u4eec\u65e2\u53ef\u4ee5\u5728 Vault \u4e2d\u76f4\u63a5\u521b\u5efa\u8bc1\u4e66\u4f53\u7cfb\uff0c\u4e5f\u53ef\u4ee5\u628a\u521b\u5efa\u597d\u7684 CA \u8bc1\u4e66\u5bfc\u5165 Vault\uff0c\u7136\u540e\u7531\u5176\u7ba1\u7406\u8bc1\u4e66\u7684\u7b7e\u53d1\u548c\u540a\u9500\u4e8b\u9879\u3002\u00a0</p> <p>\u6211\u4eec\u6709\u4e00\u4e2a Web \u5e94\u7528\uff0c\u90e8\u7f72\u5728\u96c6\u7fa4\u4e2d\uff0c\u5b83\u9700\u8981\u4e00\u4e2a\u6570\u5b57\u8bc1\u4e66\uff0c\u8fd9\u65f6\u5019\u53ea\u9700\u8981\u5b83\u53d1\u9001\u4e00\u4e2a CSR \u8bf7\u6c42\u5230 Vault \u670d\u52a1\u5668\uff0cVault \u5c31\u80fd\u81ea\u52a8\u5bf9\u8bf7\u6c42\u8005\u8fdb\u884c\u9a8c\u8bc1\u5e76\u4f7f\u7528\u4fdd\u5b58\u597d\u7684 CA \u6765\u7b7e\u53d1\u7528\u6237\u8bc1\u4e66\u3002</p> <p>Cert Manager\u00a0\u662f\u4e00\u6b3e\u4e91\u539f\u751f\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u670d\u52a1\u7c7b\u5de5\u5177\uff0c\u53ef\u4ee5\u5e2e\u52a9 Kubernetes \u96c6\u7fa4\u4e2d\u7684\u5e94\u7528\u521b\u5efa\u8bc1\u4e66\u8bf7\u6c42\u00a0(CSR)\uff0c\u8f6c\u53d1\u7ed9 Vault Server\uff0c\u7531 Vault Server \u4e2d CA \u7b7e\u540d\u8ba4\u8bc1\u540e\u9881\u53d1\u8bc1\u4e66\uff0c\u7136\u540e\u518d\u4fdd\u5b58\u5230 Secret \u8d44\u6e90\u5bf9\u8c61\u4e2d\u4f9b\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u3002</p> <p>\u6709\u4e86 Vault + Cert Manager \u8fd9\u5957\u7cfb\u7edf\uff0ck8s \u96c6\u7fa4\u4e2d\u7684\u5fae\u670d\u52a1\u6240\u9700\u8981\u7684\u8bc1\u4e66\u670d\u52a1\u5c31\u53d8\u5f97\u5b8c\u5168\u81ea\u52a8\u5316\u4e86\u3002</p> <p>\u4e00\u4e2a\u5927\u81f4\u7684\u793a\u610f\u56fe\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"vault/10vault_cm/#vault","title":"\u7b2c\u4e00\u90e8\u5206\uff1a\u5b89\u88c5\u5e76\u914d\u7f6e Vault","text":"<p>\u4e0b\u9762\u7684\u547d\u4ee4\u7528\u4e8e\u5728 Ubuntu \u4e0b\u5b89\u88c5 Vault \u7a0b\u5e8f</p> <pre><code>$ curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/local/share/keyrings/vault.gpg &gt; /dev/null\n$ echo \"deb [signed-by=/usr/local/share/keyrings/vault.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" \\\n    | sudo tee /etc/apt/sources.list.d/vault.list\nsudo apt update\nsudo apt install vault\n</code></pre> <p>\u5b89\u88c5\u6210\u529f\u540e\uff0c\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\uff08\u7528\u4e8e\u542f\u52a8 HTTPS \u670d\u52a1\uff09\u3002</p> <p>\u6839\u636e\u4e4b\u524d\u7684\u6587\u7ae0\uff0c\u6211\u4eec\u5df2\u7ecf\u642d\u5efa\u4e86\u81ea\u5df1\u7684 CA \u8bc1\u4e66\u4f53\u7cfb\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u81ea\u5df1\u7684 CA \u8bc1\u4e66\u6765\u7b7e\u540d\u5f97\u5230\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff08\u4e5f\u5c31\u662f\u8fd9\u91cc\u7684 vault)\u6240\u9700\u7684\u6570\u5b57\u8bc1\u4e66\u3002</p> <p>\u521b\u5efa vault \u81ea\u8eab\u6240\u9700\u7684\u8bc1\u4e66\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <pre><code>$ openssl req -new -sha256 -nodes \\\n    -keyout vault.key \\\n    -out vault.csr \\\n\u00a0\u00a0\u00a0\u00a0-subj=\"/O=HashiCorp/CN=vault-dev.lab\"\n\n$ openssl ca -days 364 -in vault.csr -out vault.crt \\\n    -cert FactTrust_RSA_ICA1-PKCS8.crt\n\u00a0\u00a0\u00a0\u00a0-keyfile CA/private/FactTrust_RSA_ICA1.key \\\n\u00a0\u00a0\u00a0\u00a0-extensions usr_ext \\\n    -config &lt;(cat /etc/ssl/openssl.cnf -&lt;&lt;END\n[usr_ext]\nbasicConstraints = CA:FALSE\nsubjectKeyIdentifier = hash\nkeyUsage = digitalSignature,keyEnciperment\nextendedKeyUsage = clientAuth,serverAuth,codeSigning\nsubjectAltName = @alt_names\n[alt_names]\nIP.1 = 127.0.0.1\nIP.2 = 192.168.3.3\nDNS.1 = localhost\nDNS.2 = vault-dev.lab\nEND\n)\n</code></pre> <p>\u4e0a\u9762\u7684\u547d\u4ee4\u548c\u539f\u7406\u5728\u4e4b\u524d\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\uff0c\u8fd9\u91cc\u5c31\u4e0d\u591a\u4ecb\u7ecd\u3002</p> <p>\u63a5\u4e0b\u6765\u914d\u7f6e vault \u5e76\u542f\u52a8</p> <p>\u9ed8\u8ba4\u7684\u914d\u7f6e\u6587\u4ef6\u662f <code>/etc/vault.d/vault.hcl</code></p> <p>\u6211\u4eec\u628a\u751f\u6210\u597d\u7684\u8bc1\u4e66\u548c Key \u4fe1\u606f\u586b\u5165\u5176\u4e2d\uff1a</p> <pre><code>$ listener \"tcp\" {\n    address\u00a0 \u00a0 \u00a0 \u00a0= \"0.0.0.0:8200\"\n\u00a0\u00a0\u00a0\u00a0tls_cert_file = \"/opt/vault/tls/vault.crt\"\n\u00a0\u00a0\u00a0\u00a0tls_key_file\u00a0 = \"/opt/vault/tls/vault.key\"\n}\n</code></pre> <p>\u542f\u52a8</p> <pre><code>sudo systemctl start vault\n</code></pre> <p>\u6216</p> <pre><code>$ vault server -config=/etc/vault.d/vault.hcl\n</code></pre> <p>\u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u5728\u4f7f\u7528 vault \u547d\u4ee4\u65f6\uff0c\u5176\u81ea\u52a8\u8fde\u63a5\u6b63\u786e\u7684 server \u5730\u5740</p> <pre><code>$ export VAULT_ADDR='https://127.0.0.1:8200'\n</code></pre> <p>\u63a5\u4e0b\u6765\u9700\u8981\u8981\u5bf9 vault \u8fdb\u884c\u521d\u59cb\u5316</p> <pre><code>$ vault operator init -key-shares=3 -key-threshold=2\n</code></pre> <p>vault \u670d\u52a1\u5668\u7684\u767b\u9646\u8ba4\u8bc1\u4f7f\u7528\u4e86\u591a\u91cd\u5bc6\u94a5\uff0c\u9ed8\u8ba4\u662f 5 \u4e2a\u5bc6\u94a5\uff0c\u89e3\u5bc6\u95e8\u9650\u662f 3\uff0c\u8fd9\u91cc\u8bbe\u7f6e 3 \u4e2a\u5bc6\u94a5\uff0c\u89e3\u5bc6\u95e8\u9650\u4e3a 2\u3002</p> <p>Tips\uff1a</p> <p>\u8fd9\u91cc\u7684\u591a\u91cd\u5bc6\u94a5\u662f vault \u81ea\u52a8\u751f\u6210\u7684\uff0c\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e4b\u524d\u4ecb\u7ecd\u7684 GPG Key\uff0c\u6bd4\u5982\uff1a</p> <pre><code>$ vault operator init -key-shares=3 -key-threshold=2 \\\n    -pgp-keys=\"alice.asc,bob.asc,david.asc\"\n</code></pre> <p>\u6ce8\u610f\uff1a\u5982\u679c\u4f7f\u7528 gpg key\uff0c\u90a3\u4e48 gpg \u5bfc\u51fa\u516c\u94a5\u7684\u65f6\u5019\u9700\u8981\u7528 base64\uff0c\u4e0d\u80fd\u7528 <code>--armor</code>\u3002</p> <p>init \u5b8c\u6210\u540e\u4f1a\u751f\u6210 root token\uff08\u8f93\u51fa\u5728\u5c4f\u5e55\u4e2d\uff09\uff0c\u6211\u4eec\u540e\u7eed\u9700\u8981\u7528\u8fd9\u4e2a token \u8fdb\u884c\u624d\u53ef\u4ee5\u767b\u5f55\u3002\u4e0d\u8fc7\uff0c\u767b\u9646\u4e4b\u524d\uff0c\u8fd8\u9700\u8981\u5148 unseal\uff1a</p> <pre><code>vault operator unseal\n</code></pre> <p>\u4f9d\u6b21\u6267\u884c 3 \u6b21 unseal \u547d\u4ee4\uff0c\u6bcf\u6b21\u586b\u5165\u4e00\u4e2a key \u5373\u53ef\u3002</p> <p>unseal \u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u6267\u884c <code>vault login</code> \u767b\u5f55\u4e86\uff08\u8f93\u5165 root token\uff09\u3002</p> <p>\u767b\u5f55\u6210\u529f\uff0cvault \u8fd8\u4f1a\u628a token \u4fdd\u5b58\u5728\u00a0<code>~/.vault-token</code> \u4ee5\u65b9\u4fbf\u540e\u7eed\u64cd\u4f5c\u3002</p> <p></p>"},{"location":"vault/10vault_cm/#vault-pki-ca","title":"\u7b2c\u4e8c\u90e8\u5206\uff1aVault \u542f\u52a8 PKI \u5f15\u64ce\u5e76\u521b\u5efa CA \u8bc1\u4e66","text":""},{"location":"vault/10vault_cm/#vault-secret-engine","title":"Vault \u4e2d\u7684\u673a\u5bc6\u4fe1\u606f\u5b58\u50a8\u5f15\u64ce\uff08Secret Engine\uff09","text":"<p>Vault \u63d0\u4f9b\u591a\u79cd\u5b58\u50a8\u5f15\u64ce\u6765\u4fdd\u5b58\u4e0d\u540c\u7c7b\u578b\u7684\u673a\u5bc6\u4fe1\u606f\uff08Secret)\uff0c\u5e38\u89c1\u7684\u6bd4\u5982 kv, ssh, pki, active directory \u7b49\u7b49\u3002\u6211\u4eec\u6570\u5b57\u8bc1\u4e66\u5e94\u8be5\u4f7f\u7528 pki \u5f15\u64ce\u6765\u5b58\u50a8\u548c\u7ba1\u7406\u3002</p> <p></p> <p>\u8fd9\u91cc\u7684 path \u662f\u6302\u8f7d\u70b9 (mount point)\uff0c\u4e00\u4e2a secret engine \u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\uff0c\u91cc\u9762\u53ef\u4ee5\u6709\u591a\u4e2a\u6302\u8f7d\u70b9\uff0c\u6bcf\u4e2a\u6302\u8f7d\u70b9\u5c31\u662f\u4e00\u4e2a\u8def\u5f84 path\u3002</p>"},{"location":"vault/10vault_cm/#pki","title":"PKI \u5f15\u64ce","text":"<p>\u5728\u5b9e\u9645\u64cd\u4f5c\u4e4b\u524d\uff0c\u5148\u7406\u4e00\u4e0b\u6211\u4eec\u9700\u8981\u7684\u8bc1\u4e66\u7ec4\u7ec7\u7ed3\u6784\u3002</p> <p>\u8ddf\u4e4b\u524d\u4ecb\u7ecd\u7684\u4f7f\u7528 OpenSSl \u521b\u5efa\u7684\u8bc1\u4e66\u4f53\u7cfb\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u6709 Root CA\uff0cIntermediate CAs, User Certificate\u3002Vault \u652f\u6301\u76f4\u63a5\u5728 pki \u5f15\u64ce\u4e2d\u521b\u5efa\u8fd9\u4e09\u7c7b\u8bc1\u4e66\u3002</p> <p>\u4e0d\u8fc7\uff0c\u867d\u7136 Vault \u7684\u5b89\u5168\u6027\u9ad8\uff0c\u5b83\u6bd5\u7adf\u4e5f\u662f\u4e00\u4e2a\u9700\u8981\u8054\u7f51\u7684\u8f6f\u4ef6\uff0c\u53ea\u8981\u8054\u7f51\uff0c\u5c31\u514d\u4e0d\u4e86\u6709\u98ce\u9669\u3002</p> <p>\u56e0\u6b64\uff0c\u4e1a\u754c\u7684\u6700\u4f73\u5b9e\u8df5\u662f\u628a Root CA \u653e\u5728\u4e00\u4e2a Offline \u7684\u5b58\u50a8\u5a92\u4ecb\u4e0a\uff08\u6bd4\u5982 Yubikey\uff09\uff0c\u7528\u5b83\u7b7e\u53d1\u4e00\u4e9b\u6709\u6548\u671f\u77ed\u7684 Intermediate CA \u8bc1\u4e66\uff0c\u7136\u540e\u628a\u8fd9\u4e9b Intermediate CA \u8bc1\u4e66\u5bfc\u5165\u5230 Vault \u4e2d\u8fdb\u884c\u7ba1\u7406\u3002</p> <p>Intermediate CA \u7684 Key \u548c CSR \u5728 Vault \u4e2d\u521b\u5efa\uff0c\u7136\u540e\u6211\u4eec\u7528 Offline Root CA \u5bf9 CSR \u7b7e\u540d\u5f97\u5230\u8bc1\u4e66\u540e\u518d\u5bfc\u5165 Vault \u5373\u53ef\u3002</p>"},{"location":"vault/10vault_cm/#1-offline-root-ca","title":"1. \u521b\u5efa Offline Root CA","text":"<pre><code>$ mkdir factsign\n$ cd factsign\n$ mkdir -pv {newcerts,CA/private}\n$ touch index.txt\n$ echo \"01\" &gt; serial\n$ echo \"01\" &gt; crlnumber\n$ echo 'gM6*NTNtu^&amp;YCnKB6=' &gt; rcapass\n$ openssl enc -aes256 -pbkdf2 -salt -in capass -out capass.enc\n$ openssl req -x509 -newkey rsa:4096 -sha256 -days 7300 -passout file:capass.enc \\\n\u00a0\u00a0\u00a0\u00a0-keyout FactSign_Root_CA.key -out FactSign_Root_CA.crt \\\n\u00a0\u00a0\u00a0\u00a0-subj \"/C=US/O=Security/OU=www.factsign.com/CN=FactSign Root CA\" \\\u00a0\n\u00a0\u00a0\u00a0\u00a0-addext keyUsage=critical,cRLSign,keyCertSign,digitalSignature\n$ mv {capass.enc,FactSign_Root_CA.key} CA/private/\n$ rm capass\n$ chmod 700 CA/private\n</code></pre> <p>\u81f3\u6b64\uff0c\u79bb\u7ebf\u7684 Offline Root CA \u5c31\u521b\u5efa\u597d\u4e86\uff0c \u63a5\u4e0b\u6765\u9700\u8981\u628a\u5b83\u5bfc\u5165\u5230\u64cd\u4f5c\u7cfb\u7edf\u7684 Trusted Key Store \u4e2d\u53bb\u3002</p> <p>Linux (Ubuntu)</p> <pre><code>$ sudo cp FactSign_Root_CA.crt /usr/local/share/ca-certificates/\n$ sudo update-ca-certificates\n</code></pre> <p>macOS</p> <p></p> <p>\u6ce8\uff1a\u4e3a\u4e86\u7b80\u7565\u8d77\u89c1\uff0c\u4e0a\u9762\u7701\u7565\u4e86\u628a Key \u8f6c\u6362\u6210 <code>pkcs#8</code> \u683c\u5f0f\u7684\u6b65\u9aa4\uff0c\u4e0d\u8fc7\u4e0d\u5f71\u54cd\u4f7f\u7528\u3002</p>"},{"location":"vault/10vault_cm/#2-vault-intermediate-ca-key-csr","title":"2. \u5728 Vault \u4e2d\u521b\u5efa Intermediate CA \u7684 Key \u548c CSR","text":"<pre><code>$ vault secrets enable -path=pki_rsa_ica1 pki\n\n$ vault secrets tune -max-lease-ttl=43800h pki_rsa_ica1\n\n$ vault write -format=json pki_rsa_ica1/intermediate/generate/internal \\\n\u00a0\u00a0\u00a0\u00a0common_name=\"FactSign RSA ICA1 from Offline Root CA\" \\\n\u00a0\u00a0\u00a0\u00a0format=\"pem\" \\\n\u00a0\u00a0\u00a0\u00a0private_key_format=\"pkcs8\" \\\n\u00a0\u00a0\u00a0\u00a0key_type=\"rsa\" \\\n\u00a0\u00a0\u00a0\u00a0key_bits=\"4096\" \\\n\u00a0\u00a0\u00a0\u00a0signature_bits=256 \\\n\u00a0\u00a0\u00a0\u00a0country=\"US\" \\ \n\u00a0\u00a0\u00a0\u00a0organization=\"Security\" \\\n| jq -r '.data.csr' &gt; pki_rsa_ica1.csr\n</code></pre>"},{"location":"vault/10vault_cm/#3-offline-root-ca-icas-csr","title":"3. \u4f7f\u7528 Offline Root CA \u5bf9 ICA's CSR \u7b7e\u540d","text":"<pre><code>$ openssl ca -days 1825 -passin file:capass.enc\u00a0 \\\n\u00a0\u00a0\u00a0\u00a0-in pki_rsa_ica1.csr -out pki_rsa_ica1.crt\u00a0\\\n\u00a0\u00a0\u00a0\u00a0-cert FactSign_Root_CA.crt \\\n\u00a0\u00a0\u00a0\u00a0-keyfile CA/private/FactSign_Root_CA.key \\\n\u00a0\u00a0\u00a0\u00a0-extensions ica_ext \\\n    -config &lt;(cat ca.cnf -&lt;&lt;END\n[ica_ext]\nbasicConstraints = critical,CA:TRUE,pathlen:0\nsubjectKeyIdentifier = hash\nkeyUsage = critical,digitalSignature,keyCertSign,cRLSign\nextendedKeyUsage = clientAuth,serverAuto\nauthorityInfoAccess = OCSP;URI:http://ocsp.factsign.com/,caIssuers;URI:http://factsign.com/certs/FactSignRootCA.der\ncrlDistributionPoints = URI:http://crl.factsign.com/FactSignRootCA.crl\ncertificatePolicies = @pol\n[pol]\npolicyIdentifier = 2.5.29.32\nCPS.1 = \"https://www.factsign.com/CPS\"\nuserNotice.1 = @notice\n[notice]\nexplicitText = \"UTF8:Notice An use of this Certificate constitutes acceptance of the Relying Party Agreement located at https://www.factsign.com/rpa-ua\"\nEND\n)\n</code></pre>"},{"location":"vault/10vault_cm/#4-intermediata-ca-vault","title":"4. \u628a Intermediata CA \u8bc1\u4e66\u5bfc\u5165 Vault","text":"<pre><code>$ vault write pki_rsa_ica1/intermediate/set-signed certificate=@pki_rsa_ica1.crt\n</code></pre> <p>\u5bfc\u5165\u6210\u529f\u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u67e5\u770b\u8bc1\u4e66\uff1a</p> <pre><code>$ vault read -format=json pki_rsa_ica1/cert/ca | jq -r .data.certificate | \\\n    openssl x509 -text -noout -in /dev/stdin\n</code></pre> <p>\u67e5\u770b\u8bc1\u4e66\u94fe <code>ca_chain</code></p> <pre><code>$ vault read pki_rsa_ica1/cert/ca_chain -format=json\n</code></pre> <p>CA Chain \u4e5f\u53eb CA bundle\uff0c\u7531\u7b7e\u53d1\u94fe\u4e0a\u7684\u6240\u6709 CA \u8bc1\u4e66\u6784\u6210\uff0c\u7531\u4e8e\u5f53\u524d vault \u4e2d\u4ec5\u6709\u4e00\u4e2a Intermediate CA\uff0c\u6240\u4ee5\u5176\u5185\u5bb9\u53ea\u6709\u5f53\u524d\u7684\u8bc1\u4e66\u81ea\u8eab\uff1b\u5982\u679c\u5728 vault \u4e2d\u518d\u4f7f\u7528 ica1 \u7b7e\u53d1\u4e00\u4e2a ica2 \u4e0b\u7ea7 CA \u8bc1\u4e66\uff0c\u90a3\u4e48 ca_chain \u5c31\u662f ica1 + ica2\u3002</p> <p></p> <p>\u8bf4\u660e\uff1a</p> <p>\u7531\u4e8e Root CA \u6839\u8bc1\u4e66\u662f\u5df2\u7ecf\u53d7\u7cfb\u7edf\u4fe1\u4efb\u7684\uff08\u6211\u4eec\u5df2\u628a\u5b83\u653e\u5728\u64cd\u4f5c\u7cfb\u7edf\u7684 Key store \u4e2d\uff09\uff0c\u6240\u4ee5 ca chain \u548c full chain \u4e2d\u5e76\u4e0d\u9700\u8981\u5305\u542b Root CA\u3002</p>"},{"location":"vault/10vault_cm/#5-urls","title":"5. \u8bbe\u7f6e URLs","text":"<p>CA \u8bc1\u4e66\u90fd\u662f\u9700\u8981\u63d0\u4f9b Issuer \u8bc1\u4e66\u4fe1\u606f\u548c\u64a4\u9500\u5217\u8868 CRL \u7684\uff0c\u6211\u4eec\u5728 x509 v3 extensions \u4e2d\u5df2\u7ecf\u63d0\u4f9b\u4e86\u8fd9\u4e9b\u4fe1\u606f\uff0c\u4f46\u662f vault \u4e2d\u8fd8\u591a\u4e86\u4e00\u4e2a\u6b65\u9aa4\uff0c\u9700\u8981\u5355\u72ec\u518d\u8bbe\u7f6e URLs\uff0c\u5982\u4e0b\uff1a</p> <pre><code>$ vault write pki_rsa_ica1/config/urls \\\n\u00a0\u00a0\u00a0\u00a0issuing_certificates=\"http://127.0.0.1:8200/v1/pki_rsa_ica1/ca\" \\\n\u00a0\u00a0\u00a0\u00a0crl_distribution_points=\"http://127.0.0.1:8200/v1/pki_rsa_ica1/crl\"\n</code></pre> <p>\u8fd9\u91cc\u8bf4\u660e\u4e00\u4e0b\uff0c\u8fd9\u91cc\u7684 URLs \u5e94\u8be5\u8bbe\u7f6e\u4e3a HTTP \u534f\u8bae\uff0c\u4f46\u662f\u6ce8\u610f\u5230\uff0c\u524d\u9762\u6211\u4eec\u542f\u52a8\u7684 vault \u662f HTTPS \u534f\u8bae\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u9047\u5230\u4e86\u4e00\u4e2a\u77db\u76fe\u70b9\uff0cvault \u5b98\u65b9\u5efa\u8bae\u7684\u505a\u6cd5\u662f\u5728 vault \u524d\u9762\u90e8\u7f72\u4e00\u4e2a\u53cd\u5411\u4ee3\u7406\u670d\u52a1\u5668\uff08nginx\uff09\u6765\u5904\u7406 HTTPS \u8fde\u63a5\uff0c\u7136\u540e vault \u4ec5\u5728\u5185\u7f51\u90e8\u7f72\u4e3a HTTP \u670d\u52a1\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8fc7\u591a\u4ecb\u7ecd\u66f4\u591a\u7ec6\u8282\u4e86\u3002</p> <ol> <li>\u4f7f\u7528 Intermediate CA \u7b7e\u53d1\u4e00\u4e2a\u7528\u6237\u8bc1\u4e66 Vault \u4e2d\u6709\u4e25\u683c\u7684\u6743\u9650\u7ba1\u7406\uff0c\u5bf9\u6bcf\u4e2a\u8981\u6267\u884c\u7684\u52a8\u4f5c\uff0c\u90fd\u5fc5\u987b\u5148\u5173\u8054\u4e00\u4e2a Role\uff0c\u800c\u8fd9\u4e2a Role \u5219\u7ed1\u5b9a\u4e86\u4e00\u5b9a\u7684\u64cd\u4f5c\u6743\u9650\u3002</li> </ol> <p>\u56e0\u6b64\uff0c\u8fd9\u91cc\u6211\u4eec\u8981\u7b7e\u53d1\u8bc1\u4e66\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u521b\u5efa Role</p> <pre><code>$ vault write pki_rsa_ica1/roles/mylab-com allowed_domains=mylab.com allow_subdomains=true max_ttl=720h\n$ vault write pki_rsa_ica1/issue/mylab-com common_name=blog.mylab.com\n</code></pre> <p>\u4e0a\u9762\u7684 <code>write pki_rsa_ica1/issue/...</code> \u64cd\u4f5c\u4f1a\u628a certificates \u548c key \u90fd\u6253\u5370\u5728\u5c4f\u5e55\uff0c\u6211\u4eec\u9700\u8981\u628a\u7528\u6237\u7684 Key \u548c Certificate \u4fdd\u5b58\u5230\u6587\u4ef6\uff08\u6bd4\u5982\uff0c\u4fdd\u5b58\u4e3a <code>blog.key</code> \u548c <code>blog.crt</code>\uff09\uff0c\u56e0\u4e3a\u540e\u7eed\u642d\u5efa HTTPS \u670d\u52a1\u65f6\u9700\u8981\u7528\u5230\u3002</p> <p>\u67e5\u770b\u6240\u6709\u5df2\u7b7e\u53d1\u7684\u8bc1\u4e66\u5217\u8868</p> <pre><code>$ vault list pki_rsa_ica1/certs\n</code></pre> <p>\u67e5\u770b\u6240\u7b7e\u53d1\u7684\u8bc1\u4e66\u7684\u8be6\u7ec6\u4fe1\u606f</p> <pre><code>$ vault read pki_rsa_ica1/cert/68-3c-aa-83-8c-8c-b1-7c-65-51-cd-4b-76-c1-a7-da-d4-eb-54-d0 -format=json | jq -r .data.certificate | openssl -text -noout -in /dev/stdin\n</code></pre> <p>7. \u63d0\u53d6 <code>ca_chain</code> \u5e76\u4e0e\u7528\u6237\u8bc1\u4e66\u5408\u5e76</p> <p>\u8fd9\u4e00\u6b65\u5f88\u5173\u952e\uff0c\u5982\u679c web \u5e94\u7528\u7a0b\u5e8f\u53ea\u6709\u4e0a\u9762\u7684\u7528\u6237\u8bc1\u4e66\uff0c\u90a3\u662f\u4e0d\u591f\u7684\uff0c\u56e0\u4e3a ICA \u5e76\u6ca1\u6709\u88ab\u7cfb\u7edf\u4fe1\u4efb\uff08\u64cd\u4f5c\u7cfb\u7edf\u6216\u6d4f\u89c8\u5668\u76ee\u524d\u53ea\u4fe1\u4efb\u4e86 Root CA \u6839\u8bc1\u4e66\uff09\u3002\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u628a full chain \u4f5c\u4e3a web \u5e94\u7528\u7a0b\u5e8f\u7684\u8bc1\u4e66\u624d\u80fd\u6210\u529f\u5efa\u7acb HTTPS \u8fde\u63a5\u3002</p> <p>\u7b2c\u4e00\u6b65\uff1a\u63d0\u53d6 ca_chain</p> <pre><code>$ vault read -format=json pki_rsa_ica1/cert/ca_chain | \\\n    jq -r .data.certificate &gt; ca_chain.pem\n</code></pre> <p>\u7b2c\u4e8c\u6b65\uff1a\u4e0e\u7528\u6237\u8bc1\u4e66\u5408\u5e76</p> <pre><code>$ cat blog.pem ca_chain.pem &gt; fullchain.pem\n</code></pre> <p><code>fullchain.pem</code> \u7684\u7ed3\u6784\u662f\uff0c\u7528\u6237\u8bc1\u4e66\u5728\u6700\u4e0a\u9762\uff0c\u5b83\u7684\u76f4\u63a5 Issuer \u5728\u5176\u4e0b\u9762\uff0c\u7136\u540e\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5982\u4e0b\uff1a</p> <p>\u6ce8\uff1aroot ca \u5df2\u7ecf\u5bfc\u5165\u64cd\u4f5c\u7cfb\u7edf\u53d7\u4fe1\u4efb\uff0c\u6240\u4ee5 fullchain.pem \u4e2d\u65e0\u9700\u5305\u542b\u5b83\uff08\u5f53\u7136\uff0c\u5305\u542b\u4e86\u4e5f\u6ca1\u5173\u7cfb\uff09\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u8bc1\u4e66\u94fe\uff0c\u6211\u4eec\u7528 nginx \u642d\u5efa\u4e00\u4e2a\u7b80\u5355 HTTPS \u670d\u52a1\u6765\u6d4b\u8bd5\u4e00\u4e0b\u3002</p> <p><code>/etc/nginx/conf.d/blog.conf</code></p> <pre><code>server {\n\u00a0\u00a0\u00a0\u00a0listen 443 ssl;\n\u00a0\u00a0\u00a0\u00a0server_name blog.mylab.com;\n\u00a0\u00a0\u00a0\u00a0ssl_certificate\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0/etc/nginx/ssl/fullchain.pem;\n\u00a0\u00a0\u00a0\u00a0ssl_certificate_key\u00a0 \u00a0 \u00a0 \u00a0/etc/nginx/ssl/blog.key\n\u00a0\u00a0\u00a0\u00a0ssl_protocols TLSv1.2 TLSv1.3;\n\u00a0\u00a0\u00a0\u00a0ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY\n\u00a0\u00a0\u00a0\u00a0ssl_prefer_server_ciphers on;\n\u00a0\u00a0\u00a0\u00a0location / {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0proxy_pass http://127.0.0.1:8085;\n\u00a0\u00a0\u00a0\u00a0}\n}\n</code></pre> <p>\u6ce8\uff1ahttp://127.0.0.1:8085/ \u662f\u672c\u5730\u4e00\u4e2a\u7b80\u5355\u7684 web \u9875\u9762\uff0cnginx \u505a\u53cd\u5411\u4ee3\u7406\u63d0\u4f9b HTTPS \u94fe\u63a5\u3002\u90e8\u7f72\u6210\u529f\u4e4b\u540e\uff08\u522b\u5fd8\u4e86\u914d\u7f6e DNS\uff09\uff0c\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 <code>https://blog.mylab.com/</code> \u5373\u53ef\u6253\u5f00\u9875\u9762\u3002</p> <p></p> <p>\u70b9\u51fb\ud83d\udd12\uff0c\u53ef\u4ee5\u770b\u5230\u8bc1\u4e66\u4fe1\u606f\u5982\u4e0b\uff1a</p> <p></p> <p>\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u8bc1\u4e66\u4f53\u7cfb\uff0c\u5e76\u901a\u8fc7 vault \u5b9e\u73b0\u4e86\u4e3a\u5e94\u7528\u7a0b\u5e8f\u81ea\u52a8\u7b7e\u53d1\u6570\u5b57\u8bc1\u4e66\u7684\u529f\u80fd\u3002</p>"},{"location":"vault/10vault_cm/#external-ca-pool","title":"External CA Pool","text":"<p>\u624b\u52a8\u4f7f\u7528 Root CA \u6765\u7b7e\u53d1 Intermediate CA \u7684\u8fd9\u4e2a\u6b65\u9aa4\u5e76\u4e0d\u591f\u667a\u80fd\uff0c\u6709\u6ca1\u6709\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff1f</p> <p>\u7b54\u6848\u662f\u6709\uff0cVault \u63d0\u4f9b\u4e86 Plugin \u529f\u80fd\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e09\u65b9\u63d2\u4ef6\u6765\u7ba1\u7406 Intermediate CA \u7684\u7533\u8bf7\u548c\u64a4\u9500\uff0c\u8fd9\u4f7f\u5f97 Vault \u53ef\u4ee5\u652f\u6301\u591a\u79cd\u5916\u90e8\u7684 CA Pool\u3002</p> <p>gcppca\u00a0\u662f Google Cloud Platform \u5e73\u53f0\u4e0a\u7684\u8fd9\u6837\u4e00\u4e2a Vault \u63d2\u4ef6\uff0c\u5b83\u53ef\u4ee5\u4e3a Vault \u6ce8\u518c\u5916\u90e8 CA Pool\uff0c\u8fd9\u6837\uff0c\u5728 Vault \u4e2d\u5c31\u53ef\u4ee5\u5229\u7528\u5916\u90e8 CA \u6765\u7533\u8bf7\u5230\u6570\u5b57\u8bc1\u4e66\u4e86\uff0c\u4e0d\u7ba1\u662f\u7533\u8bf7\u7528\u6237\u8bc1\u4e66\u8fd8\u662f Intermediate CA \u8bc1\u4e66\uff0c\u90fd\u5f88\u65b9\u4fbf\uff0c\u66f4\u597d\u5730\u6269\u5c55\u4e86 Vault \u7684\u529f\u80fd\u3002</p> <p></p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7ee7\u7eed\u6df1\u5165\u4e00\u6b65\uff0c\u4f7f\u7528 cert-manager \u4e3a Kubernetes \u96c6\u7fa4\u4e2d\u7684\u5e94\u7528\u6765\u7ba1\u7406\u8bc1\u4e66\u3002</p>"},{"location":"vault/10vault_cm/#cert-manager-kubernetes","title":"\u7b2c\u4e09\u90e8\u5206\uff1a\u4f7f\u7528 cert-manager \u4e3a kubernetes \u96c6\u7fa4\u4e2d\u7684\u5e94\u7528\u7a0b\u5e8f\u81ea\u52a8\u9881\u53d1\u8bc1\u4e66","text":""},{"location":"vault/10vault_cm/#_2","title":"\u524d\u8a00","text":"<p>\u5b9e\u9645\u4e0a vault \u53ef\u76f4\u63a5\u5bf9\u63a5 kubernetes\uff0c\u5b83\u63d0\u4f9b\u4e86 kubernetes authenticate \u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0ckubernetes \u4e2d\u7684\u5e94\u7528\u53ef\u4ee5\u4f7f\u7528\u7ecf\u6388\u6743\u7684 token \u767b\u5f55 vault\uff0c\u4ece\u4e2d\u83b7\u53d6\u7684 secret \u4fe1\u606f\uff0c\u6bd4\u5982 password \u7b49\u3002</p> <p>cert-manager \u5219\u4e13\u95e8\u4e3a\u8bc1\u4e66\u7ba1\u7406\u800c\u751f\uff0c\u6781\u5927\u5730\u65b9\u4fbf\u4e86\u4ece kubernetes \u5916\u90e8\u8bc1\u4e66\u6e90\u83b7\u53d6\u8bc1\u4e66\u7684\u64cd\u4f5c\u3002</p> <p>\u5728\u67b6\u6784\u4e0a cert-manager \u4f5c\u4e3a Certificate Requester\uff0c\u5b83\u652f\u6301\u4ece\u591a\u79cd\u4e0d\u540c\u7684 Issuer \u6765\u7533\u8bf7\u8bc1\u4e66\uff0c\u5305\u62ec Vault, Acme (Let's Encrypt), Venafi \u7b49\uff0c\u5b83\u751a\u81f3\u8fd8\u652f\u6301\u81ea\u5df1\u521b\u5efa\u548c\u7ba1\u7406\u81ea\u7b7e\u540d CA \u8bc1\u4e66\u3002</p>"},{"location":"vault/10vault_cm/#1-cert-manager","title":"1. \u5b89\u88c5 cert-manager","text":"<pre><code>$ kubectl apply -f https://github.com/jetstack/cert-manager/releases/latest/download/cert-manager.yaml\n</code></pre> <p>\u5b89\u88c5\u6210\u529f\u540e\uff0ck8s \u4e2d\u4f1a\u589e\u52a0\u5982\u4e0b\u51e0\u4e2a\u8d44\u6e90\uff1a</p> <ul> <li>Challenge</li> <li>Order</li> <li>CertificateRequest</li> <li>Certificate</li> <li>ClusterIssuer</li> <li>Issuer</li> </ul>"},{"location":"vault/10vault_cm/#2-vault","title":"2. Vault \u8ba4\u8bc1","text":"<p><code>cert-manager</code> \u9700\u8981\u8bbf\u95ee <code>vault server</code> \u7684 <code>pki engine</code>\uff0c\u5e76\u6267\u884c Sign \u7684\u64cd\u4f5c\uff08\u5373 <code>pki_rsa_ica1/issue/mylab-com common_name=blog.mylab.com</code>) \u4ee5\u4fbf\u83b7\u5f97\u5ba2\u6237\u8bc1\u4e66\uff0c\u56e0\u6b64\u9700\u8981\u6709 vault \u7684\u767b\u5f55\u6743\u9650\u548c pki engine \u8bbf\u95ee\u6743\u9650\u3002Vault \u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u8ba4\u8bc1\u65b9\u5f0f\uff1a</p> <ul> <li>Token Authentication</li> <li>AppRole Authentication</li> <li>Kubernetes Authentication</li> </ul> <p>\u8fd9\u91cc\u4e0d\u4e00\u4e00\u4ecb\u7ecd\uff0c\u53ea\u4ecb\u7ecd Kubernetes Authentication \u8fd9\u79cd\u65b9\u5f0f\u3002</p> <p>1) \u5728 kubernetes \u4e2d\u521b\u5efa service account \u53ca clusterrolebinding</p> <p>\u8fd9\u79cd\u8ba4\u8bc1\u65b9\u5f0f\u7684\u539f\u7406\u662f\u00a0Vault \u652f\u6301\u4f7f\u7528 kubernetes \u4e2d\u7684\u00a0service account token \u6765\uff0c\u672c\u8d28\u4e0a\u662f\u5b83\u628a\u8ba4\u8bc1\u8fc7\u7a0b\u4ee3\u7406\u4e86\u7ed9\u4e86 kubernetes\uff0c\u53ea\u6709\u4e00\u4e2a\u6709\u6548\u7684 service account token \u624d\u80fd\u767b\u5f55 vault\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5148\u5728 kubernetes \u4e2d\u521b\u5efa service account\uff0c\u5e76\u521b\u5efa\u5173\u8054\u8fd9\u4e2a service account \u7684\u76f8\u5173\u6743\u9650 (clusterrolebinding )\u3002</p> <pre><code>$ kubectl -n default create serviceaccount vault-auth-certmanager\n\n$ cat &lt;&lt; EOF | kubectl apply -f -  \napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: role-tokenreview-binding\n  namespace: default\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\n  name: vault-auth-certmanager\n  namespace: default\nEOF\n</code></pre> <p>\u6211\u4eec\u628a <code>jwt_token</code>\uff0c<code>k8s_host</code>,<code>ca_crt</code> \u7b49\u4fe1\u606f\u5e94\u8be5\u5bfc\u51fa\u81f3\u73af\u5883\u53d8\u91cf\uff0c\u65b9\u4fbf\u540e\u7eed\u64cd\u4f5c\u5f15\u7528\uff08\u5047\u8bbe Vault \u548c k8s master \u5728\u540c\u4e00\u53f0\u673a\u5668\uff09\uff1a</p> <pre><code>$ export VAULT_SA_NAME=$(kubectl -n default get sa vault-auth-certmanager -o jsonpath=\"{.secrets[*]['name']}\")\n\n$ export SA_JWT_TOKEN=$(kubectl -n default get secret $VAULT_SA_NAME -o jsonpath=\"{.data.token}\" | base64 --decode; echo)  \n\n$ export SA_CA_CRT=$(kubectl -n default get secret $VAULT_SA_NAME -o jsonpath=\"{.data['ca.crt']}\" | base64 --decode; echo)\n\n$ export K8S_HOST=$(kubectl config view --raw --minify --flatten \\\n\u00a0\u00a0\u00a0\u00a0--output 'jsonpath={.clusters[].cluster.server}')\n</code></pre> <p>2)\u00a0\u5728 Vault \u4e2d\u914d\u7f6e\u00a0kubernetes \u7684\u767b\u5f55\u51ed\u8bc1 \u8fd9\u4e00\u6b65 Vault \u9700\u8981\u8bbf\u95ee kubernetes\uff0c\u4ee5\u4fbf\u5176\u80fd\u786e\u8ba4 jwt-token \u662f\u5426\u6709\u6548\uff0c\u5982\u679c\u6709\u6548\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8ba4\u8bc1\u901a\u8fc7\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u628a\u4e0a\u4e00\u4e2a\u6b65\u9aa4\u4e2d\u4fdd\u5b58\u597d\u7684\u4fe1\u606f\u586b\u5165 auth/kubernetes \u6302\u8f7d\u70b9\u3002</p> <pre><code>$ vault auth enable kubernetes\n\n$ vault write auth/kubernetes/config \\\n\u00a0\u00a0\u00a0\u00a0token_reviewer_jwt=\"$SA_JWT_TOKEN\" \\\n\u00a0\u00a0\u00a0\u00a0kubernetes_host=\"$K8S_HOST\" \\\n\u00a0\u00a0\u00a0\u00a0kubernetes_ca_cert=\"$SA_CA_CRT\" \\\n\u00a0\u00a0issuer=\"https://kubernetes.default.svc.cluster.local\"\n</code></pre> <p>\u5199\u5165\u597d\u914d\u7f6e\u4e4b\u540e\uff0c\u67e5\u770b\u4e00\u4e0b</p> <pre><code>$ vault read auth/kubernetes/config\n</code></pre> <p>vault \u4e2d\u6240\u6709\u7684\u8def\u5f84\u8bbf\u95ee\u90fd\u6709 ACL \u63a7\u5236\uff0c\u6240\u4ee5\u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a role\uff0c\u5e76\u5173\u8054\u8bbf\u95ee <code>pki_rsa_ica/</code>  \u8fd9\u4e2a PKI path \u7684 policy\u3002</p> <p>(1) \u521b\u5efa policy</p> <pre><code>$ cat pki-policy.hcl\npath \"pki_rsa_ica1\" {\u00a0 capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]} \n\n$ vault policy write pki_policy pki_policy.hcl\n\n$ vault read sys/policy/pki_policy\n</code></pre> <p>(2) \u521b\u5efa role \u5e76\u5173\u8054 policy</p> <pre><code>$ vault write auth/kubernetes/role/cert-manager-role \\\n\u00a0\u00a0\u00a0\u00a0bound_service_account_names=vault-auth-certmanager \\\n\u00a0\u00a0\u00a0\u00a0bound_service_account_namespaces='default' \\\n\u00a0\u00a0\u00a0\u00a0policies=pki_policy \\\n\u00a0\u00a0\u00a0\u00a0ttl=720h\n\n$ vault read auth/kubernetes/role/cert-manager-role\n$ vault list auth/kubernetes/role/cert-manager-role\n</code></pre> <p>\u6ce8\uff1aTTL \u914d\u7f6e\uff0cVault \u4e2d\u9ed8\u8ba4\u7684 max_ttl \u662f 768h\uff0c\u5982\u679c\u6211\u4eec\u628a ttl \u8bbe\u7f6e\u5f97\u6bd4 768h \u5927\uff0c\u90a3\u4e48\u4f1a\u88ab cap\u3002\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u8bbe\u7f6e <code>max_ttl</code> \u5927\u4e8e 768h\u3002</p> <p>Short-lived Token</p> <p>\u7531\u4e8e Vault \u5e76\u4e0d\u4f1a\u81ea\u52a8 refresh token\uff0c\u6240\u4ee5\u4e0d\u4f7f\u7528 short-lived token\u3002\u4f46\u662f\u4ece kubernetes 1.21 \u5f00\u59cb\uff0c\u6709\u4e86\u4e24\u70b9\u6539\u52a8\uff1a</p> <ul> <li>JWT token \u6709\u8fc7\u671f\u65f6\u95f4\uff0c\u800c\u4e14\u751f\u547d\u5468\u671f\u4e0e pod \u76f8\u540c</li> <li>JWT \u7684 iss \u5b57\u6bb5\u8ddf\u96c6\u7fa4\u7684\u914d\u7f6e\u6709\u5173</li> </ul> <p>\u8fd9\u5c31\u7ed9\u4f7f\u7528 vault \u5e26\u6765\u4e86\u4e00\u4e9b\u6311\u6218\uff0c\u4ece 1.9.0 \u7248\u672c\u5f00\u59cb\uff0cvault \u9ed8\u8ba4\u4e0d\u518d\u9a8c\u8bc1 issuser \u5b57\u6bb5\uff0c\u56e0\u4e3a kubernetes \u81ea\u5df1\u4f1a\u9a8c\u8bc1\uff0cvault \u6ca1\u5fc5\u8981\u91cd\u590d\u52b3\u52a8\u3002</p> <pre><code>disable_iss_validation=true\n</code></pre> <p>(3) \u521b\u5efa pki engine \u4e0b\u7684 role</p> <p>\u524d\u9762\u7684 role \u662f <code>auth/kubernetes</code> \u6302\u8f7d\u70b9\u4e0b\u7684\uff0c\u7528\u4e8e\u83b7\u5f97\u8bbf\u95ee pki \u8def\u5f84\u7684\u6743\u9650\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5728 pki \u8def\u5f84\u4e0b\u521b\u5efa\u4e00\u4e2a\u4e13\u95e8\u7528\u4e8e\u63a7\u5236\u7b7e\u53d1\u8bc1\u4e66\u7684 role\uff0c\u6ca1\u6709\u8fd9\u4e2a role\uff0c\u6211\u4eec\u5c31\u65e0\u6cd5 <code>Issue Certificate</code>\u3002</p> <pre><code>$ vault write pki_rsa_ica1/roles/any_name allow_any_name=true max_ttl=720h ttl=720h not_before_duration=10s\n\n$ vault read pki_rsa_ica1/roles/any_name\n</code></pre> <p>\u6ce8\uff1a\u8fd9\u4e2a role \u53ea\u5728\u9700\u8981\u7b7e\u53d1\u7528\u6237\u8bc1\u4e66\u7684\u65f6\u5019\u6709\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5b83\u7684 ttl \u8bbe\u7f6e\u7684\u6bd4\u8f83\u77ed\u5373\u53ef\uff0c\u5c5e\u4e8e\u4e00\u4e2a\u5373\u7528\u5373\u5f03\u7684\u4e34\u65f6\u6027\u89d2\u8272\u3002\u4e3a\u4e86\u56fe\u65b9\u4fbf\uff0c\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528 <code>allow_any_name</code> \u6765\u5141\u8bb8\u5176\u7b7e\u53d1\u4efb\u4f55\u57df\u540d\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u6765\u6dfb\u52a0\u53ef\u7b7e\u53d1\u7684\u57df\u540d\u9650\u5236\u3002</p>"},{"location":"vault/10vault_cm/#3-cert-manager-issuerclusterissuer","title":"3. cert-manager Issuer/ClusterIssuer","text":"<p>\u73b0\u5728\u6211\u4eec\u9700\u8981\u56de\u5230 Kubernetes \u4e2d\uff0c\u521b\u5efa Issuer \u5bf9\u8c61\uff0c\u5b83\u4f1a\u4f7f\u7528\u6211\u4eec\u4e0a\u9762\u914d\u7f6e\u597d\u7684 kubernetes auth \u4fe1\u606f\u6765\u6620\u5c04\u4e00\u4e2a CA \u5230 kubernetes \u4e2d\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa Certificate \u5bf9\u8c61\u6765\u83b7\u5f97\u4e00\u4e2a\u7528\u6237\u8bc1\u4e66\u4e86\uff0c<code>cert-manager</code> \u4f1a\u5c06\u8be5\u8bc1\u4e66\u4fdd\u5b58\u5728\u6211\u4eec\u6307\u5b9a\u7684 Secret \u5bf9\u8c61\u4e2d\u3002</p> <p><code>vault-issuer-by-sa.yaml</code></p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: vault-issuer-by-sa\n  namespace: default\nspec:\n  vault:\n\u00a0\u00a0\u00a0\u00a0path: pki_rsa_ica1/sign/any_name\n    server: https://vault-dev.lab:8200\n\u00a0\u00a0\u00a0\u00a0caBundle: LS0tLS1CRUdJTiBDRURS0tLS0tCk1JSUVCekNDQXUrZ0F3...S0tLS0tCg==\n    auth:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kubernetes:\n        role: cert-manager-role\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mountPath: /v1/auth/kubernetes\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secretRef:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  name: vault-auth-certmanager-token-j5vgx\n          key: token\n</code></pre> <p>\u6ce8\uff1a</p> <p>\u7531\u4e8e <code>Vault Server</code> \u4f7f\u7528\u4e86 HTTPS \u534f\u8bae\uff0c\u56e0\u6b64\u4e0a\u6b21\u6587\u4ef6\u4e2d\u5fc5\u987b\u6dfb\u52a0 caBundle \u5b57\u6bb5\uff0c\u5176\u503c\u662f\u7b7e\u53d1 <code>vault.crt</code> \u7684 CA \u8bc1\u4e66\u7684 base64 \u503c\uff08<code>cat FactSign_Root_CA.crt | base64 -w 0</code>\uff09\uff0c\u5fc5\u987b\u662f\u5355\u884c\u683c\u5f0f\uff08\u4e0d\u5305\u542b <code>\\n</code>\uff09\u3002</p> <p><code>caBundle</code> \u662f\u7528\u6765\u8ba4\u8bc1 <code>vault.crt</code> \u7684\uff0c\u6ca1\u6709\u5b83\u5c31\u65e0\u6cd5\u4e0e <code>Vault Server</code> \u5efa\u7acb HTTPS \u8fde\u63a5\u3002</p> <p>\u6267\u884c\u4e0b\u5217\u547d\u4ee4\uff1a</p> <p></p> <p>Issuer \u548c ClusterIssuer \u533a\u522b</p> <p>\u5982\u679c\u4f7f\u7528\u7684\u662f Issuer\uff0c\u90a3\u4e48\u53ea\u80fd\u7b7e\u53d1\u4e0e\u00a0Issuer \u5728\u76f8\u540c namespace \u7684\u00a0Certificate\u3002 \u5982\u679c\u4f7f\u7528\u7684\u662f\u00a0ClusterIssuer\uff0c\u5b83\u53ef\u4ee5\u7b7e\u53d1\u4efb\u4f55 namespace \u7684\u00a0Certificate\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a \u5982\u679c\u4f7f\u7528 ClusterIssuer\uff0c\u90a3\u4e48\u524d\u9762\u7684 Service Account \u5fc5\u987b\u521b\u5efa\u5728\u00a0cert-manager\u00a0\u00a0\u8fd9\u4e2a namespace \u4e2d\uff0c\u5426\u5219 cert-manager \u4f1a\u63d0\u793a\u627e\u4e0d\u5230\u8be5 service account token\u3002</p>"},{"location":"vault/10vault_cm/#4-cert-manager-certificate","title":"4. cert-manager Certificate","text":"<p>Issuer \u6216 ClusterIssuer \u6240\u7b7e\u53d1\u7684 Certificate \u6700\u7ec8\u662f\u9700\u8981\u4fdd\u5b58\u5728 Secret \u5bf9\u8c61\u4e2d\u5e76\u88ab Web \u7a0b\u5e8f\u6240\u5f15\u7528\uff0c\u6240\u4ee5\u8bf7\u786e\u4fdd\u5176 namespace \u4e0e\u60f3\u8981\u8bbf\u95ee\u8be5 Certificate \u7684 Web \u7a0b\u5e8f\u6240\u5728\u7684 namespace \u76f8\u540c\u3002</p> <p>\u73b0\u5728\u5047\u8bbe\u628a Web \u5e94\u7528\u90e8\u7f72\u5728 default namespace \u4e2d\uff0c\u56e0\u6b64\uff0cCertificate, \u53ca Secret \u90fd\u9700\u8981\u5728\u8fd9\u4e2a namespace \u4e2d\u3002</p> <p><code>vault_certificate_by_sa.yaml</code></p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: vault-cert-by-issuer\nnamespace: default\nspec:\nsecretName: tls-vault-cert-issuer\nduration: 720h # 90d\nrenewBefore: 36h\nsubject:\n  organizations:\n  - homelab\ncommonName: \"*.myblog.com\"\ndnsNames: \n- echo.myblog.com\n- hello.myblog.com\nisCA: false\nprivateKey:\n  algorithm: RSA\n  encoding: PKCS8\n  size: 2048\nusages:\n  - server auth\n  - client auth\n</code></pre> <p><code>secretName: tls-vault-cert-issuer</code>\u00a0\u662f\u6211\u4eec\u6307\u5b9a\u7684\u60f3\u8981\u7528\u4e8e\u4fdd\u5b58 Certificate \u5185\u5bb9\u7684 Secret\uff0ccert-manager \u5728\u6210\u529f\u7b7e\u53d1\u8bc1\u4e66\u4e4b\u540e\u4f1a\u81ea\u52a8\u521b\u5efa\u8be5 Sercret \u4e3a\u6211\u4eec\u4fdd\u5b58\u5185\u5bb9\u3002</p> <p>\u67e5\u770b Secret \u5bf9\u8c61\uff1a</p> <p>\u89e3\u7801 tls.crt</p> <pre><code>$ k get secret tls-vault-cert-clusterissuer -o jsonpath=\"{.data['tls.crt']}\" | base64 --decode1\n</code></pre> <p></p> <p>\u53ef\u4ee5\u770b\u5230\uff0ctls.crt \u662f\u4e00\u4e2a full chain\uff0c\u5b83\u5305\u542b\u4e86\u4e24\u4e2a\u8bc1\u4e66\uff0c\u4e00\u4e2a\u662f Issuer \uff08\u5373 CA\uff09\u7684\u8bc1\u4e66\uff0c\u4e00\u4e2a\u662f Web \u7a0b\u5e8f\u7684\u8bc1\u4e66\u3002</p>"},{"location":"vault/10vault_cm/#5-kubernetes-web","title":"5. Kubernetes \u4e2d\u90e8\u7f72 Web \u5e94\u7528","text":"<p>\u4e0b\u9762\u6211\u4eec\u5c06\u5728 k8s \u96c6\u7fa4\u4e2d\u90e8\u7f72\u4e00\u4e2a\u7b80\u5355\u7684 web \u5e94\u7528\uff0c\u5e76\u4f7f\u7528\u4e0a\u9762\u6240\u7b7e\u53d1\u7684\u8bc1\u4e66\u6765\u542f\u52a8 HTTPS \u670d\u52a1\u3002</p> <p>(1) Deployment</p> <p><code>echo-myblog-com.yaml</code></p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n\u00a0\u00a0name: echo-myblog-com\n\u00a0\u00a0namespace: default\nspec:\n  selector:\n\u00a0\u00a0\u00a0\u00a0matchLabels:\n\u00a0\u00a0\u00a0\u00a0  app: echo-myblog-com\n\u00a0\u00a0\u00a0\u00a0replicas: 1\n\u00a0\u00a0\u00a0\u00a0template:\n\u00a0\u00a0\u00a0\u00a0  metadata:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  app: echo-myblog-com\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0spec:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  - name: echo-myblog-com\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: hashicorp/http-echo\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args:\n            - \"-text=hello, this is echo.myblog.com \n            ports:\n            - containerPort: 5678\n</code></pre> <p>(2) Service</p> <p><code>echo-service.yaml</code></p> <pre><code>apiVersion: apps/v1\nkind: Service\nmetadata:\n\u00a0\u00a0name: echo-myblog-com\n\u00a0\u00a0namespace: default\nspec:\n  ports:\n\u00a0\u00a0- port: 80\n\u00a0\u00a0\u00a0\u00a0targetPort: 5678\n\u00a0\u00a0selector:\n\u00a0\u00a0\u00a0\u00a0app: echo-myblog-com\n</code></pre> <p>(3) Ingress</p> <p><code>echo-ingress.yaml</code></p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: echo-myblog-com-ingress\n  namespace: default\n  annotations:\n\u00a0\u00a0\u00a0\u00a0nginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n  ingressClassName: nginx\n  tls:\n    - hosts:\n      - echo.myblog.com\n      secretName: tls-vault-cert-clusterissuer \nrules: \n- host: echo.myblog.com\n  http:\n    paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: echo-myblog-com\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  number: 80\n</code></pre> <p>\u6267\u884c\uff1a</p> <pre><code>kubectl apply -f echo-deploy.yaml -f echo-service.yaml -f echo-ingress.yam\n</code></pre> <p>\u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539\u4e00\u4e0b\u672c\u5730\u7684 DNS \u914d\u7f6e\uff0c\u4f7f\u5f97 echo.myblog.com \u57df\u540d\u6307\u5411\u6b63\u786e\u7684 LoadBalancer IP \u5730\u5740\uff08\u7531 MetalLB \u63d0\u4f9b\uff09\u3002</p> <p>\u7136\u540e\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8f93\u5165 https://echo.myblo.com/ \u5373\u53ef\u770b\u5230\u7f51\u9875\u5185\u5bb9\uff1a</p> <p>\u67e5\u770b\u8bc1\u4e66</p> <p></p> <p>\u67e5\u770b\u8bc1\u4e66</p> <p></p>"},{"location":"vault/13vault_ack_cloud/","title":"11 \u4e91\u539f\u751f\u66f4\u5b89\u5168\u7684\u5bc6\u6587\u7ba1\u7406 Vault on ACK","text":""},{"location":"vault/13vault_ack_cloud/#vault","title":"Vault\u662f\u4ec0\u4e48\uff1f","text":"<p>\u5982\u4f55\u5728\u4e91\u4e0a\u5e94\u7528\u4e2d\u7ba1\u7406\u548c\u4fdd\u62a4\u7528\u6237\u7684\u654f\u611f\u4fe1\u606f\u662f\u4e00\u4e2a\u7ecf\u5e38\u4ee4\u5f00\u53d1\u8005\u5934\u75bc\u7684\u95ee\u9898\uff0c\u7528\u6237\u7684\u5bc6\u7801\u53e3\u4ee4\uff0c\u8bc1\u4e66\u79d8\u94a5\u7b49\u79c1\u5bc6\u4fe1\u606f\u65f6\u5e38\u672a\u7ecf\u52a0\u5bc6\u88ab\u968f\u610f\u7684\u653e\u7f6e\u5728\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee3\u7801\u4ed3\u5e93\u6216\u662f\u5171\u4eab\u5b58\u50a8\u91cc\uff0c\u800c\u5bf9\u4e8e\u666e\u901a\u7684\u5f00\u53d1\u8005\u6765\u8bf4\uff0c\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e00\u5957\u5b8c\u6574\u7684\u79d8\u94a5\u7ba1\u7406\u7cfb\u7edf\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u6311\u6218\u3002</p> <p>\u4e14\u4e0d\u8bba\u4ee4\u4eba\u751f\u754f\u7684\u52a0\u89e3\u5bc6\u7b97\u6cd5\uff0c\u5f88\u591a\u7684\u4e91\u5e94\u7528\u4ecd\u7136\u5c06\u4e00\u4e9b\u654f\u611f\u914d\u7f6e\u4fe1\u606f\u4ec5\u4ec5\u7ecf\u8fc7base64\u7b49\u4e00\u4e9b\u7b80\u5355\u7684hash\u8fd0\u7b97\u5c31\u653e\u7f6e\u5728\u67d0\u4e2a\u516c\u5171\u7684\u914d\u7f6e\u4e2d\u5fc3\u4e0a\uff0c\u800c\u5f88\u591a\u65f6\u5019\u8fd9\u4e9b\u654f\u611f\u4fe1\u606f\u4f1a\u4ece\u5e94\u7528\u7684\u67d0\u884c\u5f02\u5e38\u65e5\u5fd7\u6216\u662f\u67d0\u6bb5\u76d1\u63a7\u544a\u8b66\u4e2d\u6cc4\u9732\u51fa\u53bb\uff1b</p> <p>\u4e0d\u4ec5\u5982\u6b64\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u96c6\u4e2d\u5f0f\u7684\u79d8\u94a5\u7ba1\u7406\u7cfb\u7edf\uff0c\u5982\u4f55\u9762\u5411\u7528\u6237\u8fdb\u884c\u66f4\u7ec6\u7c92\u5ea6\u7684\u8bbf\u95ee\u9274\u6743\u4e5f\u662f\u4e00\u4e2a\u96be\u9898\u3002</p> <p>Vault\u7684\u51fa\u73b0\u7ed9\u4e86\u4e0a\u8ff0\u95ee\u9898\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u662fHashiCorp\u516c\u53f8\uff08\u65d7\u4e0b\u8fd8\u6709Vagrant\uff0cTerraform\uff0cConsul\u7b49\u77e5\u540d\u4ea7\u54c1\uff09\u7ef4\u62a4\u7684\u5f00\u6e90\u8f6f\u4ef6\uff0c\u5b83\u7684\u8bbe\u8ba1\u601d\u60f3\u57fa\u4e8e\u4e91\u539f\u751f\u80cc\u666f\u4e0b\u52a8\u6001\u57fa\u7840\u8bbe\u65bd\u7684\u7279\u70b9\uff0c\u5728\u4e91\u4e0a\u7684\u4e0d\u540c\u7f51\u7edc\u5c42\u4ee5\u53ca\u4e0d\u540c\u7684\u670d\u52a1\u4e4b\u95f4\u5df2\u7ecf\u5f88\u96be\u627e\u5230\u4f20\u7edf\u7684\u4fe1\u4efb\u8fb9\u754c\uff0c\u670d\u52a1\u4e4b\u95f4\u66f4\u52a0\u5f3a\u8c03\u4ee5\u8eab\u4efd\uff08identity\uff09\u4e3a\u6838\u5fc3\u7684\u8ba4\u8bc1\u548c\u8bbf\u95ee\u63a7\u5236\uff0c\u800c\u4e0d\u662f\u50cf\u4f20\u7edf\u9759\u6001\u57fa\u7840\u8bbe\u65bd\u4e2d\u4ee5IP\u3001\u4e3b\u673a\u5730\u5740\u4f5c\u4e3a\u4fe1\u4efb\u51ed\u8bc1\u3002\u4e3a\u6b64Vault\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u51e0\u4e2a\u529f\u80fd\u70b9\uff1a</p> <ul> <li>Secret\u5b58\u50a8\u5f62\u5f0f\u7684\u591a\u6837\u6027\uff0c\u4efb\u610f\u7684kv\u5f62\u5f0f\u654f\u611f\u4fe1\u606f\uff08\u5982\u6570\u636e\u5e93\u5bc6\u7801\uff0c\u8bc1\u4e66\uff0cssh\u767b\u5f55\u79d8\u94a5\uff0copenapi\u8eab\u4efd\u51ed\u8bc1\u7b49\uff09\uff1b</li> <li>\u5b58\u50a8\u683c\u5f0f\u7684\u591a\u6837\u6027\uff0c\u652f\u6301\u63d2\u4ef6\u5f0f\u7684\u5b58\u50a8\u5f15\u64ce\u6269\u5c55\uff0c\u53ef\u5bf9\u63a5\u5982AWS\uff0cConsul\uff0cNoSQL\uff0cKV\uff0cPKI\uff0cSSH\u7b49\u591a\u79cd\u63d2\u4ef6\u5f15\u64ce\uff1b</li> <li>\u652f\u6301\u4e0e\u5404\u7c7b\u5e73\u53f0\u7684\u8ba4\u8bc1\u5bf9\u63a5\uff0c\u53ef\u52a8\u6001\u751f\u6210\u8ba4\u8bc1\u51ed\u636e\u6216\u914d\u7f6e\u4fe1\u606f\uff1b</li> <li>\u652f\u6301\u57fa\u4e8eShamir\u7b97\u6cd5\u7684\u79c1\u94a5\u5206\u5272\u5b8c\u6210Vault\u540e\u7aef\u7684\u52a0\u5c01\u548c\u89e3\u5c01\u64cd\u4f5c\uff0c\u540c\u65f6\u652f\u6301\u9ad8\u53ef\u7528\u7684\u90e8\u7f72\u5f62\u6001\uff1b</li> <li>\u652f\u6301\u5404\u7c7bsecret\u7684\u52a8\u6001\u751f\u6210\uff0c\u7eed\u79df\uff0c\u64a4\u9500\u548c\u6eda\u52a8\u66f4\u65b0\uff1b</li> <li>\u5b8c\u5907\u7684\u5ba1\u8ba1\u65e5\u5fd7\uff1b</li> <li>\u5b8c\u5907\u7684CLI\u548cRESTful API</li> </ul>"},{"location":"vault/13vault_ack_cloud/#vaultk8s","title":"Vault\u4e0ek8s\u7684\u96c6\u6210","text":"<p>Vault\u677e\u8026\u5408\u7684\u67b6\u6784\u4f7f\u5176\u652f\u6301\u4e0e\u591a\u79cdsecret\u5f15\u64ce\u548c\u76f8\u5e94\u7684\u5b58\u50a8\u540e\u7aef\u5bf9\u63a5\uff0c\u540c\u65f6\u652f\u6301\u4e0e\u591a\u79cd\u8ba4\u8bc1\u670d\u52a1\u5668\u7684\u4ea4\u4e92\u3002</p>"},{"location":"vault/13vault_ack_cloud/#vaultkubernetes","title":"Vault\u5728Kubernetes\u4e2d\u7684\u5e94\u7528\u573a\u666f","text":"<p>Vault\u4f5c\u4e3a\u4f01\u4e1a\u7ea7\u7684secret\u7ba1\u7406\u5de5\u5177\uff0c\u662f\u4e00\u4e9b\u5927\u5ba2\u6237\u5728\u4e1a\u52a1\u4e0a\u4e91\u8fc7\u7a0b\u4e2d\u7684\u5b89\u5168\u5f3a\u9700\u6c42\uff0c\u5c24\u5176\u662f\u56fd\u5916\u5e02\u573a\u3002\u5728Kubernetes\u96c6\u7fa4\u4e2d\u4e3b\u8981\u6709\u4ee5\u4e0b\u5e94\u7528\u573a\u666f\uff1a</p> <ul> <li>\u4f5c\u4e3a\u90e8\u7f72\u5728Kubernetes\u96c6\u7fa4\u4e2d\u7684\u5e94\u7528\u5bf9\u5916\u63d0\u4f9b\u79d8\u94a5\u7ba1\u7406\u670d\u52a1\uff0c\u652f\u6301\u4e0e\u591a\u5bb6\u4e3b\u6d41\u4e91\u5382\u5546\u79d8\u94a5\u670d\u52a1\u4ee5\u53ca\u591a\u79cdsecrets\u5f62\u5f0f\u7684\u5bf9\u63a5\uff0c\u652f\u6301\u591a\u79cd\u6570\u636e\u5e93\u670d\u52a1\u7684\u5b58\u50a8\u5bf9\u63a5\uff0c\u540c\u65f6\u652f\u6301\u591a\u79cd\u8ba4\u8bc1\u5f62\u5f0f\u7684\u5bf9\u63a5\u3002</li> <li>\u4f5c\u4e3a\u4e00\u4e2a\u516c\u5171\u7684\u52a0\u5bc6\u670d\u52a1\uff08Encryption as a Service\uff09\u800c\u4e0d\u505a\u540e\u7aef\u5b58\u50a8\u7684\u5bf9\u63a5\uff0c\u5e2e\u52a9\u7528\u6237\u5e94\u7528\u5265\u79bb\u7e41\u7410\u7684\u52a0\u5bc6\u52a0\u89e3\u5bc6\u903b\u8f91\u3002\u9762\u5411\u653f\u5e9c\u3001\u91d1\u878d\u7b49\u5bf9\u6570\u636e\u5b89\u5168\u89c4\u683c\u6709\u5f88\u9ad8\u8981\u6c42\u7684\u5ba2\u6237\uff0cVault\u652f\u6301\u57fa\u4e8eTwo-man\u539f\u5219\u5229\u7528\u79c1\u94a5\u5206\u5272\u7b97\u6cd5\u5bf9\u540e\u7aef\u670d\u52a1\u8fdb\u884c\u52a0\u89e3\u5c01\uff0c\u5e76\u7ed3\u5408k8s\u7684\u9ad8\u53ef\u7528\u90e8\u7f72\u5f62\u6001\u4e3a\u4f01\u4e1a\u63d0\u4f9b\u66f4\u52a0\u5b89\u5168\u53ef\u9760\u7684secret\u7ba1\u7406\u80fd\u529b\u3002</li> <li>\u5f53\u7136\u8fd9\u91cc\u53ea\u662f\u5217\u4e3e\u4e86\u4e00\u4e9bVault\u539f\u751f\u63d0\u4f9b\u7684\u80fd\u529b\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5728Kubernetes\u96c6\u7fa4\u4e0a\u76f4\u63a5\u8fd0\u884c\u7684\u5b89\u5168\u5e94\u7528\uff0c\u4efb\u4f55\u4e00\u4e2a\u9762\u5411k8s\u7684\u5e94\u7528\u5de5\u5177\u90fd\u53ef\u4ee5\u5229\u7528\u5176\u5b89\u5168\u80fd\u529b\u3002</li> </ul>"},{"location":"vault/13vault_ack_cloud/#vault_1","title":"\u5b89\u88c5Vault","text":"<p>Vault\u652f\u6301helm\u5316\u5b89\u88c5\uff0c\u5728\u5176\u5b98\u65b9\u6587\u6863\u4e2d\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5173\u4e8e\u542f\u52a8\u53c2\u6570\u7684\u8be6\u7ec6\u914d\u7f6e\u8bf4\u660e\uff0c\u540c\u65f6\u5728\u963f\u91cc\u4e91\u5bb9\u5668\u670d\u52a1\u7684\u5e94\u7528\u76ee\u5f55apphub\u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u53f0\u5728ACK\u96c6\u7fa4\u4e2d\u65b9\u4fbf\u7684\u5b89\u88c5Vault</p> <p></p> <p>\u53e6\u5916Vault\u7684\u9ed8\u8ba4\u5b89\u88c5\u4e5f\u96c6\u6210\u4e86\u5176\u63a7\u5236\u53f0\u7684\u5b89\u88c5\uff0c\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u670d\u52a1\u6216ingress\u8def\u7531\u7684\u65b9\u5f0f\u6211\u4eec\u53ef\u4ee5\u5728\u516c\u7f51\u8bbf\u95ee\u5176UI\uff0c\u5728vault pod\u7684\u65e5\u5fd7\u4e2d\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u767b\u5f55\u4f7f\u7528\u7684root token\uff0c\u5728\u63a7\u5236\u53f0\u4e2d\u53ef\u4ee5\u65b9\u4fbf\u7684\u8bbe\u5b9a\u4e0e\u5b58\u50a8\u5f15\u64ce\u548c\u8ba4\u8bc1\u65b9\u5f0f\u7684\u5bf9\u63a5\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u8fdb\u884c\u57fa\u4e8e\u7b56\u7565\u7684\u8bbf\u95ee\u63a7\u5236\u914d\u7f6e\u3002</p> <p></p>"},{"location":"vault/13vault_ack_cloud/#_1","title":"\u8ba4\u8bc1\u65b9\u5f0f\u7684\u96c6\u6210","text":"<p>\u5f53\u7528\u6237\u5e0c\u671b\u5728k8s pod\u7684\u4e1a\u52a1\u903b\u8f91\u4e2d\u4e0eVault\u670d\u52a1\u7aef\u901a\u8baf\uff0c\u83b7\u53d6\u9700\u8981\u7684secrets\u65f6\uff0c\u9996\u5148Vault\u4f1a\u5bf9\u8fd9\u4e2apod\u4e2d\u7684\u8bf7\u6c42\u8fdb\u884c\u8ba4\u8bc1\uff0c\u90a3\u4e48\u8fd9\u4e2apod\u4e2d\u7684Vault\u8bf7\u6c42\u8ba4\u8bc1\u51ed\u636e\u5e94\u8be5\u5982\u4f55\u83b7\u53d6\u5462\uff1f</p> <p>\u5982\u4e0a\u6240\u8ff0\uff0cVault\u540e\u7aef\u652f\u6301\u591a\u79cd\u8ba4\u8bc1\u65b9\u5f0f\u7684\u5bf9\u63a5\uff0c\u5bf9\u4e8eKubernetes\uff0cVault\u652f\u6301\u57fa\u4e8eK8s Service Account Token\u7684\u8ba4\u8bc1\u3002</p> <p>\u4f7f\u7528\u4e0a\uff0cVault\u7ba1\u7406\u5458\u9996\u5148\u9700\u8981\u5728\u540e\u7aefenable kubernetes\u7684\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u751f\u6210\u4e00\u4e2a\u4e0eVault\u4ea4\u4e92\u7684\u6307\u5b9asa\uff0c\u7136\u540e\u901a\u8fc7CLI\u6216API\u5c06sa token\u548c\u96c6\u7fa4ca\uff0c\u516c\u7f51\u5730\u5740\u7b49\u4fe1\u606f\u5199\u5165\u5230Vault\u540e\u7aef\u4e2d\uff0c\u5e76\u914d\u7f6e\u4e0evault\u540e\u7aef\u7684ACL\u7b56\u7565\u7ed1\u5b9a\u3002</p> <p>\u5f53\u7136\u5728pod\u5e94\u7528\u4e2d\u53ef\u4ee5\u5e76\u4e0d\u5c40\u9650\u4e8e\u4e00\u5b9a\u4f7f\u7528\u57fa\u4e8esa\u7684kubernetes\u8ba4\u8bc1\u65b9\u5f0f\u3002\u6bd4\u5982kubernetes-vault\u3002</p> <p>\u8be5\u9879\u76ee\u4f7f\u7528Vault\u4e2d\u7684AppRole \u8ba4\u8bc1\u65b9\u5f0f\uff0c\u5728\u8be5\u8ba4\u8bc1\u6a21\u5f0f\u4e2d\uff0c\u7ba1\u7406\u5458\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7684pod\u521b\u5efa\u4e0d\u540c\u7684Vault\u539f\u751frole\u6a21\u578b\u5e76\u7ed1\u5b9a\u5230\u5bf9\u5e94\u7684policy\u4e0a\uff0c\u540c\u65f6\u53ef\u4ee5\u57fa\u4e8erole\u521b\u5efa<code>secret_id</code>\uff0c<code>secret_id</code>\u5bf9\u5e94\u7684token\u53ef\u4f5c\u4e3a\u4e0eVault\u8fdb\u884c\u8ba4\u8bc1\u7684\u4e34\u65f6\u51ed\u8bc1\u3002</p> <p><code>kubernetes-vault</code>\u5229\u7528\u4e86<code>AppRole</code>\u7684\u8ba4\u8bc1\u4ea4\u4e92\u6a21\u5f0f\uff0c</p> <ul> <li>\u9996\u5148\u5df2\u7ecf\u5b8c\u6210\u5b89\u88c5\u7684<code>kubernetes-vault controller</code>\u4f1a\u53bbWatch\u96c6\u7fa4\u4e2d\u6240\u6709pod\u7684\u521b\u5efa\uff0c\u5f53\u53d1\u73b0\u65b0\u5efapod\u7684\u90e8\u7f72\u6a21\u677f\u4e2d\u6709\u6307\u5b9a<code>annotation</code>\u7684<code>init-container</code>\u5b58\u5728\u65f6</li> <li>controller\u4f1a\u6839\u636e\u6a21\u677f\u4e2d\u6307\u5b9a\u7684<code>vault role id</code>\u53bb<code>Vault</code>\u8bf7\u6c42\u83b7\u53d6\u5176\u5bf9\u5e94\u7684<code>secret_id</code>\u5e76\u53d1\u9001\u7ed9<code>init-container</code>\u4e2d<code>kubernetes-vault</code>\u7684\u5ba2\u6237\u7aef\uff0c\u5728\u5e94\u7528\u5bb9\u5668\u542f\u52a8\u524d<code>kubernetes-vault</code>\u5ba2\u6237\u7aef\u7528controller\u8fd4\u56de\u7684<code>secret_id</code>\u548c<code>role_id</code>\u53bbVault\u8bf7\u6c42\u771f\u6b63\u7684<code>login token</code>\u5e76\u6700\u7ec8\u5199\u5165\u5230\u4e0e\u5e94\u7528pod\u5171\u4eab\u7684\u6302\u8f7d\u76ee\u5f55\u4e2d\uff1b</li> <li>\u540c\u65f6\u5ba2\u6237\u7aef\u4f1a\u6839\u636etoken\u8fc7\u671f\u65f6\u95f4\u8fdb\u884c\u5b9a\u65f6\u7684\u8f6e\u8f6c\uff0c\u4fdd\u8bc1\u5176\u53ef\u7528\u6027\u3002\u4e0b\u56fe\u4e3a<code>kubernetes-vault</code>\u5de5\u4f5c\u6d41\u7a0b\u56fe\uff1a</li> </ul> <p></p> <p>\u5728\u793e\u533a\u4e5f\u5b58\u5728\u4e0d\u5c11\u57fa\u4e8ek8s\u4e0eVault\u8fdb\u884c\u8ba4\u8bc1\u5bf9\u63a5\u7684\u5176\u4ed6\u65b9\u6848\uff0c\u5176\u8bbe\u8ba1\u601d\u8def\u5927\u540c\u5c0f\u5f02\uff0c\u57fa\u672c\u90fd\u91c7\u7528\u4e86\u901a\u8fc7<code>init-container</code>\u6216<code>sidecar</code>\u65b9\u5f0f\u5f15\u5165\u4e00\u4e2a\u989d\u5916\u7684\u5ba2\u6237\u7aef\u53bbVault\u8bf7\u6c42\u6307\u5b9a\u8ba4\u8bc1\u6a21\u5f0f\u4e0b\u7684\u77ed\u65f6\u51ed\u8bc1\u5e76\u5171\u4eab\u7ed9\u4e1a\u52a1\u5bb9\u5668\u4f7f\u7528\u3002</p> <p>\u5728\u5bb9\u5668\u670d\u52a1\u63a7\u5236\u53f0\u7684\u5e94\u7528\u76ee\u5f55apphub\u4e2d\uff0c\u6211\u4eec\u540c\u6837\u53ef\u4ee5\u627e\u5230kubernetes-vault\uff0c\u65b9\u4fbf\u5f00\u53d1\u8005\u4f7f\u7528helm\u76f4\u63a5\u5728\u96c6\u7fa4\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\u4e00\u952e\u90e8\u7f72\u3002Vault\u4e5f\u8ba1\u5212\u5728\u540e\u7eed\u81ea\u5df1\u7684\u5b98\u65b9\u7248\u672chelm chart\u4e2d\u589e\u52a0\u914d\u7f6e\u9879\u4ee5\u652f\u6301\u4e0a\u8ff0\u767b\u5f55\u8ba4\u8bc1secret\u7684\u52a8\u6001\u6ce8\u5165\u3002</p>"},{"location":"vault/13vault_ack_cloud/#vaultram","title":"Vault\u4e0e\u963f\u91cc\u4e91RAM\u7684\u96c6\u6210","text":"<p>\u5f53\u6211\u4eec\u5728\u5e94\u7528\u4e2d\u9700\u8981\u8bbf\u95ee\u963f\u91cc\u4e91\u8d44\u6e90\u65f6\uff0c\u9700\u8981\u4f7f\u7528RAM\u8d26\u53f7\u5bf9\u5e94\u7684AK\u6216\u662fSTS\u4e34\u65f6credentials\u4f5c\u4e3a\u8bbf\u95ee\u76f8\u5e94\u8d44\u6e90\u63a5\u53e3\u7684\u51ed\u8bc1\u3002</p> <p>\u5982\u679c\u4f7f\u7528\u8d26\u53f7AK\uff0c\u5982\u4f55\u4f7f\u5176\u80fd\u591f\u88ab\u5e94\u7528\u903b\u8f91\u83b7\u53d6\u7684\u540c\u65f6\u4fdd\u8bc1AK\u7684\u5b89\u5168\u6027\u4e00\u76f4\u662f\u4e00\u4e2a\u5934\u75bc\u7684\u95ee\u9898\uff1b</p> <p>\u5982\u679c\u4f7f\u7528\u4e34\u65f6sts token\uff0c\u7531\u4e8e\u5176\u65f6\u6548\u6027\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u5728\u8003\u8651\u5b89\u5168\u6027\u7684\u540c\u65f6\u601d\u8003\u5982\u4f55\u8fdb\u884c\u4e34\u65f6\u8bbf\u95ee\u51ed\u8bc1\u7684\u8f6e\u8f6c\u3002</p> <p>\u76f8\u6bd4\u8f83\u4e24\u79cd\u65b9\u5f0f\uff0c\u4f7f\u7528sts\u4e34\u65f6\u51ed\u8bc1\u7684\u65b9\u5f0f\u80af\u5b9a\u5728\u5b89\u5168\u4e0a\u662f\u66f4\u4e3a\u63a8\u8350\u7684\u65b9\u5f0f\uff0c\u540c\u65f6\u5bf9\u8fd9\u79cd\u52a8\u6001secret\u7684\u5b89\u5168\u7ba1\u7406\u4e5f\u6b63\u662fVault\u7684\u4f18\u52bf\u6240\u5728\u3002</p> <p>\u672c\u8282\u6211\u4eec\u6765\u4ecb\u7ecd\u4e0bVault\u4e0e\u963f\u91cc\u4e91RAM\u5728\u8ba4\u8bc1\u65b9\u5f0f\u548csecret\u7ba1\u7406\u5f15\u64ce\u4e0a\u7684\u96c6\u6210\u3002</p>"},{"location":"vault/13vault_ack_cloud/#_2","title":"\u8ba4\u8bc1\u65b9\u5f0f\u7684\u96c6\u6210","text":"<p>\u9996\u5148\u5728\u8ba4\u8bc1\u65b9\u5f0f\u4e0a\uff0cVault\u670d\u52a1\u7aef\u7684role\u6a21\u578b\u53ef\u4ee5\u4e0e<code>RAM role</code>\u8fdb\u884c\u4e00\u5bf9\u4e00\u7684\u6620\u5c04\u5339\u914d\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528Vault\u63d0\u4f9b\u7684OpenAPI\u6216\u662fCLI\uff0c\u901a\u8fc7\u4f20\u5165\u626e\u6f14<code>RAM role</code>\u8fd4\u56de\u7684\u4e34\u65f6\u51ed\u8bc1\u8c03\u7528<code>GetCallerIdentity</code>\u63a5\u53e3\uff0c\u7136\u540eVault\u670d\u52a1\u7aef\u4f1a\u6839\u636e\u8bf7\u6c42\u8fd4\u56de\u7684\u89d2\u8272<code>arn id</code>\u5728\u5176\u540e\u7aef\u5b58\u50a8\u4e2d\u67e5\u627e\u662f\u5426\u6709\u5bf9\u5e94\u7684\u6743\u9650\u7b56\u7565\u914d\u7f6e\uff0c\u5982\u679c\u5b58\u5728\u5219\u8ba4\u8bc1\u6210\u529f\u5e76\u8fd4\u56de\u4e00\u4e2a\u53ef\u7528\u4e8e\u8c03\u7528Vault\u5176\u4ed6\u540e\u7aef\u63a5\u53e3\u7684\u8bbf\u95eetoken\u3002</p>"},{"location":"vault/13vault_ack_cloud/#vault-secretram","title":"Vault Secret\u5f15\u64ce\u4e0eRAM\u7684\u96c6\u6210","text":"<p>\u5f53\u6211\u4eec\u9700\u8981\u5728\u4e1a\u52a1\u5e94\u7528\u903b\u8f91\u4e2d\u4f7f\u7528\u963f\u91cc\u4e91\u8d44\u6e90\u65f6\uff0c\u901a\u5e38\u9700\u8981\u901a\u8fc7\u89d2\u8272\u626e\u6f14\u7684\u65b9\u5f0f\u83b7\u53d6\u4e00\u4e2aRAM\u8fd4\u56de\u7684\u4e34\u65f6\u51ed\u8bc1\uff0c\u7136\u540e\u901a\u8fc7\u8fd9\u4e2a\u4e34\u65f6\u51ed\u8bc1\u5b8c\u6210\u4e0eRAM\u7684\u9274\u6743\u8fc7\u7a0b\u3002\u7531\u4e8e\u51ed\u8bc1\u7684\u65f6\u6548\u6027\uff0c\u6211\u4eec\u5728\u4fdd\u8bc1\u5176\u5b89\u5168\u6027\u7684\u540c\u65f6\u8fd8\u8981\u7ef4\u62a4\u4e00\u4e2a\u5bf9\u5e94\u7684\u79d8\u94a5\u8f6e\u8f6c\u673a\u5236\u3002Vault\u7684secret\u5f15\u64ce\u5b9e\u73b0\u4e86\u4e0e\u963f\u91cc\u4e91RAM\u7684\u5bf9\u63a5\u63d2\u4ef6\uff0c\u5e2e\u52a9\u6211\u4eec\u5b89\u5168\u3001\u52a8\u6001\u7684\u7ba1\u7406RAM\u51ed\u8bc1\uff0c\u5176\u4e3b\u8981\u6b65\u9aa4 \u5982\u4e0b:</p> <ol> <li>\u5f00\u542f\u540e\u7aef\u5f15\u64ce</li> <li>\u5728RAM\u63a7\u5236\u53f0\u4e3aVault\u670d\u52a1\u5668\u521b\u5efa\u4e13\u5c5e\u5b50\u8d26\u53f7\u5e76\u7ed1\u5b9a\u5b9a\u5236\u5316\u6743\u9650\u7b56\u7565</li> <li>\u83b7\u53d6Vault\u5b50\u8d26\u53f7\u5bf9\u5e94\u7684AK\u5e76\u901a\u8fc7Vault CLI/API\u5199\u5165\u5230\u540e\u7aef\u6307\u5b9a\u8def\u5f84\u4e0b</li> <li>\u5728Vault\u540e\u7aef\u5199\u5165\u4e1a\u52a1\u4e2d\u5e0c\u671b\u83b7\u53d6\u7684RAM\u51ed\u8bc1\u6240\u5bf9\u5e94\u7684\u7b56\u7565\u5b9a\u4e49\u6216\u89d2\u8272\uff0c\u5176\u4e2d\u7b56\u7565\u5b9a\u4e49\u652f\u6301inline\u548cremote\u7b56\u7565\u4e24\u79cd\u5f62\u5f0f\uff0c\u6240\u8c13inline\u6a21\u5f0f\u662f\u6307\u76f4\u63a5\u5728api\u8bf7\u6c42\u4e2d\u5199\u5165\u7b56\u7565\u6a21\u677f\uff0cremote\u6a21\u5f0f\u6307\u5199\u5165RAM\u4e2d\u5b58\u5728\u7684\u7b56\u7565\u7c7b\u578b\u548c\u540d\u79f0\uff0c\u6bd4\u5982\uff1a</li> </ol> <pre><code>$ vault write alicloud/role/policy-based \\\n    remote_policies='name:AliyunOSSReadOnlyAccess,type:System' \\\n    remote_policies='name:AliyunRDSReadOnlyAccess,type:System'\n</code></pre> <p>\u89d2\u8272\u6a21\u5f0f\u9700\u8981\u7528\u6237\u6307\u5b9a\u5e0c\u671b\u88ab\u626e\u6f14\u7684\u89d2\u8272arn\uff0c\u53e6\u5916\u9700\u8981Vault\u5b50\u8d26\u53f7\u5728\u8be5\u89d2\u8272\u7684\u53d7\u4fe1\u5b9e\u4f53\u91cc\uff0c\u4e00\u4e2a\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>$ vault write alibaba/role/role-based \\\nrole_arn='acs:ram::5138828231865461:role/hastrustedactors'\n</code></pre> <p>5.\u5728\u5177\u4f53\u7684\u4e1a\u52a1\u5e94\u7528\u4e2d\uff0c\u53ea\u9700\u8981\u901a\u8fc7\u8c03\u7528Vault\u7684creds/policy-based\u6216role-based\u63a5\u53e3\u5373\u53ef\u52a8\u6001\u83b7\u53d6\u76f8\u5e94\u7684RAM\u8bbf\u95ee\u51ed\u8bc1\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u89d2\u8272\u626e\u6f14\u8fd4\u56de\u4e34\u65f6token\u7684CLI\u8c03\u7528\u793a\u4f8b\uff1a</p> <pre><code>$ vault read alicloud/creds/role-based\nKey                Value\n---                -----\nlease_id           alicloud/creds/role-based/f3e92392-7d9c-09c8-c921-575d62fe80d9\nlease_duration     59m59s\nlease_renewable    false\naccess_key         STS.L4aBSCSJVMuKg5U1vFDw\nsecret_key         wyLTSmsyPGP1ohvvw8xYgB29dlGI8KMiH2pKCNZ9\nsecurity_token     CAESrAIIARKAAShQquMnLIlbvEcIxO6wCoqJufs8sWwieUxu45hS9AvKNEte8KRUWiJWJ6Y+YHAPgNwi7yfRecMFydL2uPOgBI7LDio0RkbYLmJfIxHM2nGBPdml7kYEOXmJp2aDhbvvwVYIyt/8iES/R6N208wQh0Pk2bu+/9dvalp6wOHF4gkFGhhTVFMuTDRhQlNDU0pWTXVLZzVVMXZGRHciBTQzMjc0KgVhbGljZTCpnJjwySk6BlJzYU1ENUJuCgExGmkKBUFsbG93Eh8KDEFjdGlvbkVxdWFscxIGQWN0aW9uGgcKBW9zczoqEj8KDlJlc291cmNlRXF1YWxzEghSZXNvdXJjZRojCiFhY3M6b3NzOio6NDMyNzQ6c2FtcGxlYm94L2FsaWNlLyo=\nexpiration         2018-08-15T21:58:00Z\n</code></pre>"},{"location":"vault/13vault_ack_cloud/#k8svault-secret","title":"\u5982\u4f55\u5728k8s\u5e94\u7528\u4e2d\u4f7f\u7528Vault Secret","text":"<p>\u5728\u4e86\u89e3\u4e86Vault\u7684\u57fa\u672c\u6982\u5ff5\u4ee5\u53ca\u4e0eKubernetes\u7684\u8ba4\u8bc1\u4ea4\u4e92\u6d41\u7a0b</p> <p>\u5982\u4f55\u5728k8s pod\u5e94\u7528\u4e2d\u65b9\u4fbf\u5730\u83b7\u53d6Vault\u670d\u52a1\u7aef\u7ba1\u7406\u7684secret\u3002\u793e\u533a\u9488\u5bf9\u6b64\u95ee\u9898\u4e5f\u6709\u6fc0\u70c8\u7684\u8ba8\u8bba\u548c\u4e0d\u5c11\u76f8\u5173\u89e3\u51b3\u65b9\u6848\uff0c</p> <p>\u65b9\u6848\u4e3b\u8981\u96c6\u4e2d\u5728\u4e24\u4e2a\u65b9\u5411\uff1a\u5b9a\u65f6\u540c\u6b65\u8fdb\u7a0b\uff1a\u4f7f\u7528\u4e00\u4e2a\u540c\u6b65\u8fdb\u7a0b\u5b9a\u65f6\u5730\u4eceVault\u670d\u52a1\u7aef\u83b7\u53d6\u6307\u5b9a\u8303\u56f4\u7684\u79d8\u94a5\u66f4\u65b0\u5e76\u540c\u6b65\u5230k8s\u96c6\u7fa4\u4e2d\u7684secret\u6a21\u578b\uff0c\u4ee3\u8868\u7684\u9879\u76ee\u6709vaultingkube \u548csecrets-manager \u3002</p> <p>\u5176\u4e3b\u8981\u8bbe\u8ba1\u601d\u60f3\u4e5f\u4e0d\u5c3d\u76f8\u540c\uff0c\u4ee5<code>secrets-manager</code>\u4e3a\u4f8b\uff0c\u9996\u5148\u7528\u6237\u53ef\u4ee5\u901a\u8fc7CRD\u5b9a\u4e49\u5728<code>Vault</code>\u4e2d\u5173\u6ce8\u7684secret\u6570\u636e\u6e90\uff0c\u7136\u540e<code>secrets-manager</code>\u5bf9\u5e94\u7684<code>controller</code>\u4f1a\u5728<code>Reconcile</code>\u51fd\u6570\u4e2d\u5b9a\u65f6\u5bf9\u6bd4\u6307\u5b9a\u7ba1\u7406\u8303\u56f4\u5185\u7684<code>k8s secret</code>\u548c<code>vault secret</code>\u7684\u72b6\u6001\uff0c\u5982\u679c\u4e0d\u4e00\u81f4\u5219\u8fdb\u884c\u4e00\u6b21\u8c03\u534f\u3002\u800c\u7528\u6237\u5728pod\u5e94\u7528\u4e2d\u53ef\u4ee5\u76f4\u63a5\u5f15\u7528\u539f\u751fsecret\u6a21\u578b\u4e2d\u7684\u5185\u5bb9\u83b7\u53d6\u8fdc\u7aefVault\u670d\u52a1\u5668\u4e2d\u7684\u79d8\u94a5\u3002</p> <p>\u5f53\u7136\u793e\u533a\u4e2d\u4e5f\u5b58\u5728\u4e00\u4e9b\u5bf9\u8fd9\u79cd\u79d8\u94a5\u540c\u6b65\u65b9\u6848\u7684\u8d28\u7591\uff0c\u6bd4\u5982\u8ba4\u4e3a\u8be5\u65b9\u6848\u5728\u79d8\u94a5\u540c\u6b65\u7684\u4f20\u8f93\u8fc7\u7a0b\u548c\u7528\u6237pod\u4f7f\u7528\u539f\u751fsecret\u7684rest\u4ea4\u4e92\u4e2d\u4f1a\u589e\u52a0\u653b\u51fb\u9762\uff0c\u4f46\u662f\u8be5\u65b9\u6848\u5728\u90e8\u7f72\u5b9e\u65bd\u4e0a\u6bd4\u8f83\u53cb\u597d\uff0c\u4e5f\u5f97\u5230\u4e86\u5f88\u591a\u7528\u6237\u7684\u652f\u6301\u3002</p> <p>CSI\u63d2\u4ef6\u5f62\u5f0f\u96c6\u6210\uff1a\u8be5\u65b9\u6848\u57fa\u4e8e<code>CSI plugin</code>\u5c06<code>Vault</code>\u4e2d\u7684\u79d8\u94a5\u901a\u8fc7volume\u7684\u5f62\u5f0f\u6302\u8f7d\u5230pod\u5e94\u7528\u4e2d\u3002<code>secrets-store-csi-driver</code> \u901a\u8fc7\u5b9e\u73b0\u4e00\u5957\u57fa\u4e8eCSI\u89c4\u8303\u7684driver\u673a\u5236\u53ef\u4ee5\u5bf9\u63a5\u4e0d\u540c\u5382\u5546\u7684\u540e\u7aef\u5b58\u50a8\uff0c\u800c<code>Vault secret</code>\u7684<code>driver(secrets-store.csi.k8s.com)</code>\u5141\u8bb8kubelet\u5c06\u5404\u7c7b\u4f01\u4e1a\u7ea7\u79d8\u94a5\u5b58\u50a8\u4e2d\u7684secret\u901a\u8fc7volume\u6302\u8f7d\uff0c\u4e00\u65e6<code>attach</code>\u52a8\u4f5c\u5b8c\u6210\uff0c\u79d8\u94a5\u6570\u636e\u5373\u6302\u8f7d\u5230\u4e86\u5bb9\u5668\u5bf9\u5e94\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u3002</p> <p>\u5728<code>CSI driver</code>\u7684\u57fa\u7840\u4e0a\uff0c\u4e0d\u540c\u7684\u79d8\u94a5\u7ba1\u7406\u540e\u7aef\u53ef\u4ee5\u5b9e\u73b0\u5b9a\u5236\u5316\u7684provider\u53bb\u5bf9\u63a5<code>CSI driver</code>\u6846\u67b6\u4e2d\u7684\u89c4\u5b9a\u63a5\u53e3\u3002</p> <p>provider\u7684\u529f\u80fd\u6982\u62ec\u5982\u4e0b\uff1a</p> <ol> <li>\u5bf9\u63a5\u540e\u7aef\u79d8\u94a5\u7ba1\u7406\u7cfb\u7edf\uff0c\u63d0\u4f9b\u79d8\u94a5\u83b7\u53d6\u7b49\u5fc5\u987b\u7684\u63a5\u53e3\u5b9e\u73b0</li> <li>\u9002\u914d\u5f53\u524d<code>CSI driver</code>\u7684\u63a5\u53e3\u5b9a\u4e49</li> <li>\u901a\u8fc7\u6846\u67b6\u4e2d\u7684\u56de\u8c03\u51fd\u6570\u65e0\u9700\u8c03\u7528Kubernetes API\u5373\u53ef\u5c06\u4ece\u540e\u7aef\u83b7\u53d6\u7684\u79d8\u94a5\u6570\u636e\u6302\u8f7d\u5230\u6307\u5b9a\u8def\u5f84\u4e0b</li> </ol> <p>HashiCorp\u5b98\u65b9\u4e5f\u57fa\u4e8e\u6b64\u6846\u67b6\u5b9e\u73b0\u4e86\u4e00\u5957\u5bf9\u63a5Vault\u7684Provider\u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5\u6b64\u4e3a\u4f8b\u5177\u4f53\u6765\u770b\u4e0b\u5728\u4e00\u4e2ak8s pod\u5e94\u7528\u4e2d\u5982\u4f55\u901a\u8fc7CSI plugin\u7684\u65b9\u5f0f\u4f7f\u7528Vault\u4e2d\u7ba1\u7406\u7684secret\u79d8\u94a5\u3002</p> <p>1 \u9996\u5148\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5f00\u542f\u4e86CSI\u5b58\u50a8\u63d2\u4ef6\u7684ACK\u96c6\u7fa4\uff0c\u7136\u540e\u53c2\u8003\u6587\u6863\u5728\u96c6\u7fa4\u4e2d\u90e8\u7f72Vault\u670d\u52a1\u7aef\uff0c\u4e3a\u4e86\u4fbf\u4e8e\u9a8c\u8bc1\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528dev\u6a21\u5f0f\u7701\u53bbunseal\u89e3\u5c01\u7b49\u6d41\u7a0b\uff0c\u540c\u65f6\u914d\u7f6eprovider\u4e0eVault\u4ea4\u4e92\u7684\u8ba4\u8bc1\u6a21\u5f0f\u548c\u76f8\u5e94\u7684\u8bbf\u95ee\u63a7\u5236\u7b56\u7565</p> <p></p> <p>\u7136\u540e\u901a\u8fc7cli\u5411Vault\u540e\u7aef\u5199\u5165\u6d4b\u8bd5\u6570\u636e</p> <p></p> <p>2 \u901a\u8fc7\u5b98\u65b9\u63d0\u4f9b\u7684helm\u65b9\u5f0f\u5b89\u88c5Secret Store CSI Driver\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a</p> <pre><code>helm install . -n csi-secrets-store --namespace dev --set providers.vault.enabled=true\n</code></pre> <p>\u5b89\u88c5\u6210\u529f\u540e\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>3 \u5728\u96c6\u7fa4\u4e2d\u521b\u5efa<code>secretproviderclasses</code>\u5b9e\u4f8b\u7528\u4e8e<code>Secret Store CSI Driver</code>\u4e0eVault\u7684\u53c2\u6570\u5bf9\u63a5\uff0c\u4e00\u4e2a\u793a\u4f8b\u5982\u4e0b\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684vault\u670d\u52a1\u7aef\u5730\u5740\u53ef\u901a\u8fc7<code>kubectl get service vault</code>\u83b7\u53d6\u3002</p> <p></p> <p>4 \u6700\u540e\u6211\u4eec\u6765\u770b\u4e0b\u5982\u4f55\u5728\u5e94\u7528pod\u4e2d\u5bf9\u63a5\u4e0a\u8ff0provider\u5b9e\u4f8b\u83b7\u53d6\u5bf9\u5e94\u7684Vault\u79d8\u94a5\u3002\u8fd9\u91ccpod\u5bf9\u4e8e\u4e0a\u8ff0vault provider\u7684\u4f7f\u7528\u5206\u4e3a\u4e24\u79cd\u65b9\u5f0f\uff1a</p> <p>1) \u5982\u679cpod\u8fd0\u884c\u7684\u76ee\u6807\u96c6\u7fa4\u7248\u672c\u5728v1.15.0\u4ee5\u4e0a\uff0c\u4e14\u96c6\u7fa4<code>apiserver</code>\u548c\u8282\u70b9<code>kubelet manifest</code>\u914d\u7f6e\u5747\u5f00\u542f\u4e86 <code>CSIInlineVolume=true</code>\u7684<code>feature-gates</code>\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5728pod\u4e2d\u7684volume\u5b57\u6bb5\u5185\u7f6e\u58f0\u660e\u9700\u8981\u4f7f\u7528\u7684<code>csi provider</code>\u5b9e\u4f8b\u3002</p> <pre><code>kind: Pod\napiVersion: v1\nmetadata:\n  name: nginx-secrets-store-inline\nspec:\n  containers:\n  - image: nginx\n    name: nginx\n    volumeMounts:\n    - name: secrets-store-inline\n      mountPath: \"/mnt/secrets-store\"\n      readOnly: true\n  volumes:\n    - name: secrets-store-inline\n      csi:\n        driver: secrets-store.csi.k8s.com\n        readOnly: true\n        volumeAttributes:\n          secretProviderClass: \"vault-foo\"\n</code></pre> <p>2\uff09\u5982\u679c\u76ee\u6807\u96c6\u7fa4\u4e0d\u652f\u6301CSI\u7684Inline Volume\u7279\u6027\uff0c\u6211\u4eec\u9700\u8981\u9996\u5148\u521b\u5efa\u4f7f\u7528csi\u7684pv\u548c\u5bf9\u5e94\u7684pvc\u5b9e\u4f8b\uff0c\u4e00\u4e2apv\u6a21\u677f\u793a\u4f8b\u5982\u4e0b:</p> <pre><code>apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: pv-vault\nspec:\n  capacity:\n    storage: 1Gi\n  accessModes:\n    - ReadOnlyMany\n  persistentVolumeReclaimPolicy: Retain\n  csi:\n    driver: secrets-store.csi.k8s.com\n    readOnly: true\n    volumeHandle: kv\n    volumeAttributes:\n      providerName: \"vault\"\n      roleName: \"example-role\"\n      vaultAddress: http://172.21.12.21:8200\n      vaultSkipTLSVerify: \"true\"\n      objects:  |\n        array:\n          - |\n            objectPath: \"/foo\"\n            objectName: \"bar\"\n            objectVersion: \"\"\n</code></pre> <p>\u5728pod\u5b9e\u4f8b\u6a21\u677f\u4e2d\u5f15\u7528\u6307\u5b9apvc\u5373\u53ef\u5728pod\u4e2d\u83b7\u53d6\u5230vault\uff0c\u8fd9\u91cc\u6211\u4eec\u5728ACK\u96c6\u7fa4\u4ee5pv/pvc\u6a21\u5f0f\u4e3a\u4f8b\u521b\u5efa\u4e00\u4e2anginx\u5e94\u7528\u5bb9\u5668\u5b9e\u4f8b\u5e76\u5728\u5176\u4e2d\u6302\u8f7d\u4e0a\u6587\u4e2d\u6211\u4eec\u521b\u5efa\u7684<code>secretproviderclasses</code>\u5b9e\u4f8b\uff1a</p> <p></p> <p>\u76f8\u6bd4\u4e8esecrets-manager\u7b49\u91c7\u7528secret\u5b9a\u65f6\u540c\u6b65\u7684\u65b9\u5f0f\uff0c\u4f7f\u7528CSI\u5bf9\u63a5\u6307\u5b9a<code>Vault secret provider</code>\u5b9e\u4f8b\u7684\u65b9\u5f0f\u867d\u7136\u5728\u5b9e\u65bd\u6b65\u9aa4\u4e0a\u6bd4\u8f83\u590d\u6742\uff0c\u540c\u65f6\u5728\u5e94\u7528\u4e2d\u4e5f\u65e0\u6cd5\u52a8\u6001\u83b7\u53d6Vault\u540e\u7aefsecret\u7684\u53d8\u66f4\uff0c\u4f46\u662f\u8be5\u65b9\u6848\u907f\u514d\u4e86secret\u5728\u540c\u6b65\u94fe\u8def\u4e0a\u9891\u7e41\u4f20\u8f93\u7684\u5b89\u5168\u98ce\u9669\uff0c\u540c\u65f6\u4e5f\u5ba2\u670d\u4e86\u4e4b\u524d<code>describe po</code>\u53ef\u80fd\u9020\u6210\u7684\u79d8\u94a5\u6cc4\u9732\uff0c\u5728\u6574\u4f53\u5b89\u5168\u6027\u4e0a\u8981\u9ad8\u51fa\u4e0d\u5c11\u3002\u5927\u5bb6\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u5e94\u7528\u573a\u666f\u9009\u62e9\u9002\u5408\u81ea\u5df1\u7684\u65b9\u5f0f\u3002</p>"},{"location":"vault/14K8s_secret/","title":"12 Kubernetes \u7684 secret \u5e76\u4e0d\u662f\u771f\u6b63\u7684 secret","text":"<p>https://auth0.com/blog/kubernetes-secrets-management/#Sealed-Secrets</p> <p>\u5982\u4f55\u4f7f\u7528\u6700\u4f73\u5b9e\u8df5\u4fdd\u62a4\u60a8\u7684 Kubernetes \u96c6\u7fa4</p>"},{"location":"vault/14K8s_secret/#_1","title":"\u5f15\u8a00","text":"<p>Kubernetes \u5df2\u7ecf\u6210\u4e3a\u73b0\u4ee3\u8f6f\u4ef6\u57fa\u7840\u8bbe\u65bd\u4e2d\u4e0d\u53ef\u6216\u7f3a\u7684\u4e00\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u7ba1\u7406 Kubernetes \u4e0a\u7684\u654f\u611f\u6570\u636e\u4e5f\u662f\u73b0\u4ee3\u8f6f\u4ef6\u5de5\u7a0b\u7684\u4e00\u4e2a\u91cd\u8981\u65b9\u9762\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u5c06\u5b89\u5168\u6027\u91cd\u65b0\u7f6e\u4e8e DevSecOps \u4e2d\u3002Kubernetes \u63d0\u4f9b\u4e86\u4e00\u79cd\u4f7f\u7528 Secret \u5bf9\u8c61\u5b58\u50a8\u654f\u611f\u6570\u636e\u7684\u65b9\u6cd5\u3002\u867d\u7136\u603b\u6bd4\u6ca1\u6709\u597d\uff0c\u4f46\u5b83\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u52a0\u5bc6\uff0c\u56e0\u4e3a\u5b83\u53ea\u662f base64 \u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u4efb\u4f55\u6709\u6743\u8bbf\u95ee\u96c6\u7fa4\u6216\u4ee3\u7801\u7684\u4eba\u90fd\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u89e3\u7801\u3002</p> <p>\u6ce8\u610f\uff1a \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cKubernetes Secrets \u672a\u52a0\u5bc6\u5b58\u50a8\u5728 API \u670d\u52a1\u5668\u7684\u5e95\u5c42\u6570\u636e\u5b58\u50a8 (etcd) \u4e2d\u3002\u5177\u6709 API \u8bbf\u95ee\u6743\u9650\u7684\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u68c0\u7d22\u6216\u4fee\u6539 Secret\uff0c\u4efb\u4f55\u5177\u6709 etcd \u8bbf\u95ee\u6743\u9650\u7684\u4eba\u4e5f\u53ef\u4ee5\u3002\u6b64\u5916\uff0c\u4efb\u4f55\u6709\u6743\u5728\u547d\u540d\u7a7a\u95f4\u4e2d\u521b\u5efa Pod \u7684\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528\u8be5\u8bbf\u95ee\u6743\u9650\u6765\u8bfb\u53d6\u8be5\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u4efb\u4f55 Secret\uff1b\u8fd9\u5305\u62ec\u95f4\u63a5\u8bbf\u95ee\uff0c\u4f8b\u5982\u521b\u5efa Deployment \u7684\u80fd\u529b\u3002\u2014 Kubernetes \u6587\u6863</p> <p>\u4f7f\u7528\u6b63\u786e\u7684 RBAC \u914d\u7f6e\u548c\u4fdd\u62a4 API \u670d\u52a1\u5668\u53ef\u4ee5\u89e3\u51b3\u4ece\u96c6\u7fa4\u8bfb\u53d6 secret \u7684\u95ee\u9898\uff0c\u4e86\u89e3\u6709\u5173 RBAC \u548c\u96c6\u7fa4 API \u5b89\u5168\u6027\u7684\u66f4\u591a\u4fe1\u606f\u8bf7\u67e5\u770b\u5982\u4f55\u4f7f\u7528\u6700\u4f73\u5b9e\u8df5\u4fdd\u62a4\u60a8\u7684 Kubernetes \u96c6\u7fa4\u3002</p> <p>\u4fdd\u62a4\u6e90\u4ee3\u7801\u4e2d\u7684\u7684 secret \u662f\u66f4\u5927\u7684\u95ee\u9898\u3002\u6bcf\u4e2a\u6709\u6743\u8bbf\u95ee\u5305\u542b\u8fd9\u4e9b secret \u7684\u5b58\u50a8\u5e93\u7684\u4eba\u4e5f\u53ef\u4ee5\u89e3\u7801\u5b83\u4eec\u3002\u8fd9\u4f7f\u5f97\u5728 Git \u4e2d\u7ba1\u7406 Kubernetes secret \u53d8\u5f97\u975e\u5e38\u68d8\u624b\u3002</p> <p>\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u66f4\u5b89\u5168\u7684\u65b9\u5f0f\u8bbe\u7f6e secret :</p> <ul> <li>Sealed Secrets</li> <li>External Secrets Operator</li> <li>Secrets Store CSI driver</li> </ul>"},{"location":"vault/14K8s_secret/#sealed-secrets","title":"Sealed Secrets","text":"<p><code>Sealed Secrets</code> \u662f\u4e00\u4e2a\u5f00\u6e90\u7684 Kubernetes \u63a7\u5236\u5668\u548c\u6765\u81ea Bitnami \u7684\u5ba2\u6237\u7aef CLI \u5de5\u5177\uff0c\u65e8\u5728\u4f7f\u7528\u975e\u5bf9\u79f0\u5bc6\u7801\u52a0\u5bc6\u89e3\u51b3\u201c\u5728 Git \u4e2d\u5b58\u50a8 secret \u201d\u95ee\u9898\u7684\u4e00\u90e8\u5206\u3002\u5177\u6709 RBAC \u914d\u7f6e\u7684 Sealed Secrets \u9632\u6b62\u975e\u7ba1\u7406\u5458\u8bfb\u53d6 secret \u662f\u89e3\u51b3\u6574\u4e2a\u95ee\u9898\u7684\u7edd\u4f73\u89e3\u51b3\u65b9\u6848\u3002</p> <p></p> <p>\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u5982\u4e0b\uff1a</p> <ol> <li>\u4f7f\u7528\u516c\u94a5\u548c kubeseal CLI \u5728\u5f00\u53d1\u4eba\u5458\u673a\u5668\u4e0a\u52a0\u5bc6 secret \u3002\u8fd9\u4f1a\u5c06\u52a0\u5bc6\u7684 secret \u7f16\u7801\u4e3a Kubernetes \u81ea\u5b9a\u4e49\u8d44\u6e90\u5b9a\u4e49 (CRD)\u3002</li> <li>\u5c06 CRD \u90e8\u7f72\u5230\u76ee\u6807\u96c6\u7fa4\u3002</li> <li><code>Sealed Secret</code> \u63a7\u5236\u5668\u4f7f\u7528\u76ee\u6807\u96c6\u7fa4\u4e0a\u7684\u79c1\u94a5\u5bf9\u673a\u5bc6\u8fdb\u884c\u89e3\u5bc6\uff0c\u4ee5\u751f\u6210\u6807\u51c6\u7684 Kubernetes secret\u3002</li> </ol> <p>\u79c1\u94a5\u4ec5\u4f9b\u96c6\u7fa4\u4e0a\u7684 Sealed Secrets \u63a7\u5236\u5668\u4f7f\u7528\uff0c\u516c\u94a5\u53ef\u4f9b\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u3002\u8fd9\u6837\uff0c\u53ea\u6709\u96c6\u7fa4\u624d\u80fd\u89e3\u5bc6\u673a\u5bc6\uff0c\u800c\u5f00\u53d1\u4eba\u5458\u53ea\u80fd\u5bf9\u5176\u8fdb\u884c\u52a0\u5bc6</p>"},{"location":"vault/14K8s_secret/#_2","title":"\u4f18\u70b9","text":"<ul> <li>\u652f\u6301\u6a21\u677f\u5b9a\u4e49\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u5c06\u5143\u6570\u636e\u6dfb\u52a0\u5230\u672a\u52a0\u5bc6\u7684 secret \u4e2d\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6a21\u677f\u5b9a\u4e49\u4e3a\u672a\u52a0\u5bc6\u7684 secret \u6dfb\u52a0\u6807\u7b7e\u548c\u6ce8\u91ca\u3002</li> <li>\u672a\u52a0\u5bc6\u7684 secret \u5c06\u7531\u52a0\u5bc6\u7684 secret CRD \u62e5\u6709\uff0c\u5e76\u5728\u52a0\u5bc6\u7684 secret \u66f4\u65b0\u65f6\u66f4\u65b0\u3002</li> <li>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8bc1\u4e66\u6bcf 30 \u5929\u8f6e\u6362\u4e00\u6b21\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u5b9a\u4e49\u3002</li> <li>secret \u4f7f\u7528\u6bcf\u4e2a\u96c6\u7fa4\u3001\u547d\u540d\u7a7a\u95f4\u548c secret \u7ec4\u5408\uff08\u79c1\u94a5+\u547d\u540d\u7a7a\u95f4\u540d\u79f0+ secret \u540d\u79f0\uff09\u7684\u552f\u4e00\u5bc6\u94a5\u8fdb\u884c\u52a0\u5bc6\uff0c\u9632\u6b62\u89e3\u5bc6\u4e2d\u51fa\u73b0\u4efb\u4f55\u6f0f\u6d1e\u3002\u5728\u52a0\u5bc6\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>strict</code>, <code>namespace-wide</code>, <code>cluster-wide</code> \u6765\u914d\u7f6e\u8303\u56f4\u3002</li> <li>\u53ef\u7528\u4e8e\u7ba1\u7406\u96c6\u7fa4\u4e2d\u7684\u73b0\u6709 secret\u3002</li> <li>\u5177\u6709 VSCode \u6269\u5c55\uff0c\u4f7f\u5176\u66f4\u6613\u4e8e\u4f7f\u7528\u3002</li> </ul>"},{"location":"vault/14K8s_secret/#_3","title":"\u7f3a\u70b9","text":"<ul> <li>\u7531\u4e8e\u5b83\u5c06\u52a0\u5bc6\u7684 secret \u89e3\u5bc6\u4e3a\u5e38\u89c4 secret \uff0c\u5982\u679c\u60a8\u6709\u6743\u8bbf\u95ee\u96c6\u7fa4\u548c\u547d\u540d\u7a7a\u95f4\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u89e3\u7801\u5b83\u4eec\u3002</li> <li>\u9700\u8981\u4e3a\u6bcf\u4e2a\u96c6\u7fa4\u73af\u5883\u91cd\u65b0\u52a0\u5bc6\uff0c\u56e0\u4e3a\u5bc6\u94a5\u5bf9\u5bf9\u4e8e\u6bcf\u4e2a\u96c6\u7fa4\u90fd\u662f\u552f\u4e00\u7684\u3002</li> </ul>"},{"location":"vault/14K8s_secret/#_4","title":"\u5b89\u88c5","text":"<p>\u5728\u96c6\u7fa4\u4e0a\u5b89\u88c5 controller\uff0c\u5728\u672c\u5730\u673a\u5668\u4e0a\u5b89\u88c5 CLI\u3002</p> <ul> <li>\u4ece release \u9875\u9762\u4e0b\u8f7d controller.yaml\u3002</li> <li>\u6267\u884c <code>kubectl apply -f controller.yaml</code> \u5c06 controller \u90e8\u7f72\u5230\u96c6\u7fa4\u4e2d\u3002\u63a7\u5236\u5668\u5c06\u5b89\u88c5\u5230 <code>kube-system</code> \u547d\u540d\u7a7a\u95f4\u4e0b\u3002</li> <li>\u5b89\u88c5 CLI\uff0c\u901a\u8fc7 <code>brew install kubeseal</code> \u5b89\u88c5\uff0c\u6216\u8005\u4ece release \u9875\u9762\u4e0b\u8f7d\u3002</li> </ul>"},{"location":"vault/14K8s_secret/#_5","title":"\u4f7f\u7528","text":"<p>\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a sealed secret \u3002</p> <p>\u521b\u5efa\u4e00\u4e2a secret\uff0c\u901a\u8fc7\u547d\u4ee4 kubectl create secret \u6216\u8005\u7f16\u5199 yaml \u6587\u4ef6\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>echo\u00a0-n\u00a0secretvalue\u00a0|\u00a0kubectl\u00a0create\u00a0secret\u00a0generic\u00a0mysecret\u00a0\\\n\u00a0\u00a0--dry-run=client\u00a0\\\n\u00a0\u00a0--from-file=foo=/dev/stdin\u00a0-o\u00a0yaml\u00a0&gt;\u00a0my-secret.yaml\n</code></pre> <p>\u8fd9\u5c06\u4ea7\u751f\u4e00\u4e2a\u5982\u4e0b\u6240\u793a\u7684 secret \u5b9a\u4e49\uff1b</p> <pre><code>#\u00a0my-secret.yaml\n\napiVersion:\u00a0v1\ndata:\n\u00a0\u00a0foo:\u00a0c2VjcmV0dmFsdWU=\nkind:\u00a0Secret\nmetadata:\n\u00a0\u00a0creationTimestamp:\u00a0null\n\u00a0\u00a0name:\u00a0mysecret\n</code></pre> <ol> <li>\u4f7f\u7528 kubeseal CLI \u52a0\u5bc6 secret\u3002\u8fd9\u5c06\u4f7f\u7528\u4ece\u670d\u52a1\u5668\u83b7\u53d6\u7684\u516c\u94a5\u52a0\u5bc6 secret \u5e76\u751f\u6210\u52a0\u5bc6\u7684 secret \u5b9a\u4e49\u3002\u73b0\u5728\u53ef\u4ee5\u4e22\u5f03 <code>my-secret.yaml</code> \u6587\u4ef6\u3002\u60a8\u4e5f\u53ef\u4ee5\u4e0b\u8f7d\u516c\u94a5\u5e76\u5728\u672c\u5730\u79bb\u7ebf\u4f7f\u7528\u3002</li> </ol> <pre><code>kubeseal --format yaml &lt; my-secret.yaml &gt; my-sealed-secret.yaml\n</code></pre> <p>\u8fd9\u5c06\u4ea7\u751f\u4e00\u4e2a\u52a0\u5bc6\u7684 secret \u5b9a\u4e49\uff0cmy-sealed-secret.yaml\uff0c\u5982\u4e0b\u6240\u793a\uff1b</p> <pre><code>#\u00a0my-sealed-secret.yaml\n\napiVersion:\u00a0bitnami.com/v1alpha1\nkind:\u00a0SealedSecret\nmetadata:\n\u00a0\u00a0creationTimestamp:\u00a0null\n\u00a0\u00a0name:\u00a0mysecret\n\u00a0\u00a0namespace:\u00a0default\nspec:\n\u00a0\u00a0encryptedData:\n\u00a0\u00a0\u00a0\u00a0foo:\u00a0AgA6a4AGzd7qzR8mTPqTPFNor8tTtT5...==\n\u00a0\u00a0template:\n\u00a0\u00a0\u00a0\u00a0metadata:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0creationTimestamp:\u00a0null\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name:\u00a0mysecret\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0namespace:\u00a0default\n</code></pre> <p>\u6b64\u6587\u4ef6\u53ef\u4ee5\u5b89\u5168\u5730\u63d0\u4ea4\u5230 Git \u6216\u4e0e\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u5171\u4eab\u3002</p> <ol> <li>\u6700\u540e\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u90e8\u7f72\u5230\u8981\u89e3\u5c01\u7684\u96c6\u7fa4\u4e2d\u3002</li> </ol> <pre><code>kubectl apply -f my-sealed-secret.yaml\n</code></pre> <ol> <li>\u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u5728\u96c6\u7fa4\u4e2d\u770b\u5230\u672a\u52a0\u5bc6\u7684 secret \u3002</li> </ol> <pre><code>kubectl describe secret mysecret\n</code></pre> <p>\u60a8\u53ef\u4ee5\u50cf\u4f7f\u7528\u4efb\u4f55\u5176\u4ed6 Kubernetes \u5bc6\u94a5\u4e00\u6837\u5728\u90e8\u7f72\u4e2d\u4f7f\u7528\u6b64\u5bc6\u94a5\u3002</p>"},{"location":"vault/14K8s_secret/#external-secrets-operator","title":"External Secrets Operator","text":"<p>Sealed Secrets \u662f\u4fdd\u62a4 secret \u7684\u65b9\u5f0f\u4e4b\u4e00\uff0c\u4f46\u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u3002</p> <p>\u4f7f\u7528 External Secrets Operator (ESO) \u548c\u5916\u90e8 secret \u7ba1\u7406\u7cfb\u7edf\uff0c\u5982 HashiCorp Vault\u3001AWS Secrets Manager\u3001Google Secrets Manager \u6216 Azure Key Vault\u3002\u867d\u7136\u8bbe\u7f6e\u8d77\u6765\u6709\u70b9\u590d\u6742\uff0c\u4f46\u5982\u679c\u60a8\u4f7f\u7528\u4e91\u63d0\u4f9b\u5546\u6765\u6258\u7ba1\u60a8\u7684 Kubernetes \u96c6\u7fa4\uff0c\u8fd9\u662f\u4e00\u79cd\u66f4\u597d\u7684\u65b9\u6cd5\u3002ESO \u652f\u6301\u8bb8\u591a\u8fd9\u6837\u7684 secret \u7ba1\u7406\u5668\u5e76\u76d1\u89c6\u5916\u90e8 secret \u5b58\u50a8\u7684\u53d8\u5316\uff0c\u5e76\u4f7f Kubernetes secret \u4fdd\u6301\u540c\u6b65\u3002</p> <p></p> <p>ESO \u63d0\u4f9b\u4e86\u56db\u4e2a CRD \u6765\u7ba1\u7406 secret\u3002</p> <p><code>ExternalSecret</code> \u548c <code>ClusterExternalSecret CRD</code> \u5b9a\u4e49\u9700\u8981\u83b7\u53d6\u54ea\u4e9b\u6570\u636e\u4ee5\u53ca\u5982\u4f55\u8f6c\u6362\u8fd9\u4e9b\u6570\u636e\u3002<code>SecretStore</code> \u548c <code>ClusterSecretStore CRD</code> \u5b9a\u4e49\u4e86\u4e0e\u5916\u90e8 secret \u5b58\u50a8\u7684\u8fde\u63a5\u7ec6\u8282\u3002<code>Cluster</code> \u524d\u7f00\u7684 CRD \u8868\u793a\u4f5c\u7528\u8303\u56f4\u662f\u96c6\u7fa4\u3002</p> <p>\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u5982\u4e0b\uff1b</p> <ol> <li>\u521b\u5efa SecretStoreCRD \u4ee5\u5b9a\u4e49\u4e0e\u5916\u90e8\u673a\u5bc6\u5b58\u50a8\u7684\u8fde\u63a5\u8be6\u7ec6\u4fe1\u606f\u3002</li> <li>\u5728\u5916\u90e8 secret \u5b58\u50a8\u4e2d\u521b\u5efa secret \u3002</li> <li>\u521b\u5efa\u4e00\u4e2a ExternalSecretCRD \u6765\u5b9a\u4e49\u9700\u8981\u4ece\u5916\u90e8 secret \u5b58\u50a8\u4e2d\u83b7\u53d6\u7684\u6570\u636e\u3002</li> <li>\u5c06 CRD \u90e8\u7f72\u5230\u76ee\u6807\u96c6\u7fa4\u3002</li> <li>ESO \u63a7\u5236\u5668\u5c06\u4ece\u5916\u90e8 secret \u5b58\u50a8\u4e2d\u83b7\u53d6\u6570\u636e\u5e76\u521b\u5efa Kubernetes secret \u3002</li> </ol> <p>\u4f18\u70b9</p> <ul> <li>secret \u5b58\u50a8\u5728\u5b89\u5168\u7684\u5916\u90e8 secret \u7ba1\u7406\u5668\u4e2d\uff0c\u800c\u4e0d\u662f\u4ee3\u7801\u5b58\u50a8\u5e93\u4e2d\u3002</li> <li>\u4f7f secret \u4e0e\u5916\u90e8 secret \u7ba1\u7406\u5668\u4fdd\u6301\u540c\u6b65\u3002</li> <li>\u4e0e\u8bb8\u591a\u5916\u90e8 secret \u7ba1\u7406\u8005\u5408\u4f5c\u3002</li> <li>\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u96c6\u7fa4\u4e2d\u4f7f\u7528\u591a\u4e2a secret \u5b58\u50a8\u3002</li> <li>\u63d0\u4f9b\u7528\u4e8e\u76d1\u63a7\u7684 Prometheus \u6307\u6807\u3002</li> </ul> <p>\u7f3a\u70b9</p> <p>\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u901a\u8fc7 Helm \u5b89\u88c5 ESO \uff1a</p> <pre><code>helm\u00a0repo\u00a0add\u00a0external-secrets\u00a0https://charts.external-secrets.io\n\nhelm\u00a0install\u00a0external-secrets\u00a0\\\n\u00a0\u00a0external-secrets/external-secrets\u00a0\\\n\u00a0\u00a0--namespace\u00a0external-secrets\u00a0\\\n\u00a0\u00a0--create-namespace\n</code></pre> <p>\u5982\u679c\u60a8\u60f3\u5728 Helm release \u4e2d\u5305\u542b ESO\uff0c\u8bf7\u5c06 <code>-</code>-set installCRDs=true` \u6807\u5fd7\u6dfb\u52a0\u5230\u4e0a\u8ff0\u547d\u4ee4\u4e2d\u3002</p> <p>\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u5c06 ESO \u4e0e\u4e0d\u540c\u7684 secret \u7ba1\u7406\u5668\u4e00\u8d77\u4f7f\u7528\u3002</p> <ul> <li>External Secrets Operator (ESO)</li> </ul> <p></p> <ul> <li>AWS Secrets Manager</li> </ul> <p></p> <ul> <li>Azure Key Vault</li> </ul>"},{"location":"vault/14K8s_secret/#hashicorp-vault","title":"\u4f7f\u7528 HashiCorp Vault","text":"<p>HashiCorp Vault \u662f\u4e00\u4e2a\u6d41\u884c\u7684 secret \u7ba1\u7406\u5668\uff0c\u63d0\u4f9b\u4e0d\u540c\u7684 secret \u5f15\u64ce\u3002ESO \u53ea\u80fd\u4e0e Vault \u63d0\u4f9b\u7684 KV Secrets Engine \u4e00\u8d77\u4f7f\u7528\u3002Vault \u5728 HashiCorp \u4e91\u5e73\u53f0 (HCP) \u4e0a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u60a8\u53ef\u4ee5\u81ea\u884c\u7ba1\u7406\u7684\u514d\u8d39\u5f00\u6e90\u7248\u672c\u548c\u4e00\u4e2a\u5e26\u6709\u514d\u8d39\u7b49\u7ea7\u7684\u6258\u7ba1\u7248\u672c\u3002</p> <p>\u786e\u4fdd\u60a8\u5728\u672c\u5730 Vault \u5b9e\u4f8b\u6216 HCP cloud \u4e2d\u8bbe\u7f6e\u4e86\u952e\u503c secret \u5b58\u50a8\u3002\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 Vault Helm chart \u5c06 Vault \u90e8\u7f72\u5230 Kubernetes \u96c6\u7fa4\u3002</p> <ol> <li>\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 SecretStore CRD\uff0cvault-backend.yaml\uff0c\u4ee5\u5b9a\u4e49\u4e0e Vault \u7684\u8fde\u63a5\u8be6\u7ec6\u4fe1\u606f\u3002</li> </ol> <pre><code>#\u00a0vault-backend.yaml\n\napiVersion:\u00a0external-secrets.io/v1beta1\nkind:\u00a0SecretStore\nmetadata:\n\u00a0\u00a0name:\u00a0vault-backend\nspec:\n\u00a0\u00a0provider:\n\u00a0\u00a0\u00a0\u00a0vault:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0server:\u00a0'YOUR_VAULT_ADDRESS'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path:\u00a0'secret'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0version:\u00a0'v2'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0namespace:\u00a0'admin'\u00a0#\u00a0required\u00a0for\u00a0HCP\u00a0Vault\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auth:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#\u00a0points\u00a0to\u00a0a\u00a0secret\u00a0that\u00a0contains\u00a0a\u00a0vault\u00a0token\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#\u00a0https://www.vaultproject.io/docs/auth/token\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tokenSecretRef:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name:\u00a0'vault-token'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key:\u00a0'token'\n</code></pre> <ol> <li>\u521b\u5efa\u4e00\u4e2a secret \u8d44\u6e90\u6765\u4fdd\u5b58 Vault token\u3002\u4f7f\u7528\u5177\u6709\u5bf9 Vault KV \u5b58\u50a8\u4e2d\u7684 secret/ \u8def\u5f84\u5177\u6709\u8bfb\u53d6\u6743\u9650\u7684\u7b56\u7565\u7684\u4ee4\u724c\u3002</li> </ol> <pre><code>kubectl create secret generic vault-token \\\n  --dry-run=client \\\n  --from-literal=token=YOUR_VAULT_TOKEN\n</code></pre> <ol> <li>\u5728 Vault \u4e2d\u521b\u5efa\u4e00\u4e2a secret \u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f Vault CLI\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a secret \u3002\u786e\u4fdd\u60a8\u4f7f\u7528\u9002\u5f53\u7684\u7b56\u7565\u4ece CLI \u767b\u5f55\u5230 vault \u5b9e\u4f8b\u3002</li> </ol> <pre><code>vault kv put secret/mysecret my-value=supersecret\n</code></pre> <ol> <li>\u521b\u5efa\u4e00\u4e2a ExternalSecret CRD \u6765\u5b9a\u4e49\u9700\u8981\u4ece Vault \u4e2d\u83b7\u53d6\u7684\u6570\u636e\u3002</li> </ol> <pre><code>#\u00a0vault-secret.yaml\n\napiVersion:\u00a0external-secrets.io/v1beta1\nkind:\u00a0ExternalSecret\nmetadata:\n\u00a0\u00a0name:\u00a0vault-example\nspec:\n\u00a0\u00a0refreshInterval:\u00a0'15s'\n\u00a0\u00a0secretStoreRef:\n\u00a0\u00a0\u00a0\u00a0name:\u00a0vault-backend\n\u00a0\u00a0\u00a0\u00a0kind:\u00a0SecretStore\n\u00a0\u00a0target:\n\u00a0\u00a0\u00a0\u00a0name:\u00a0vault-example-sync\n\u00a0\u00a0data:\n\u00a0\u00a0\u00a0\u00a0-\u00a0secretKey:\u00a0secret-from-vault\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remoteRef:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key:\u00a0secret/mysecret\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0property:\u00a0my-value\n</code></pre> <ol> <li>\u5c06\u4e0a\u8ff0 CRD \u5e94\u7528\u5230\u96c6\u7fa4\uff0c\u5b83\u5e94\u8be5\u4f7f\u7528\u4ece Vault \u83b7\u53d6\u7684\u6570\u636e\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a vault-example-sync \u7684 Kubernetes secret\u3002</li> </ol> <pre><code>kubectl apply -f vault-backend.yaml\nkubectl apply -f vault-secret.yaml\n</code></pre> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>kubectl describe</code> \u547d\u4ee4\u67e5\u770b\u96c6\u7fa4\u4e2d\u7684 secret\u3002</p> <pre><code>kubectl\u00a0describe\u00a0secret\u00a0vault-example-sync\n\n#\u00a0output\u00a0should\u00a0have\u00a0the\u00a0below\u00a0data\nName:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vault-example-sync\nNamespace:\u00a0\u00a0\u00a0\u00a0default\nLabels:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;none&gt;\nAnnotations:\u00a0\u00a0reconcile.external-secrets.io/data-hash:\u00a0...\n\nType:\u00a0\u00a0Opaque\n\nData\n====\nsecret-from-vault:\u00a0\u00a016\u00a0bytes\n</code></pre> <p>\u5982\u679c\u60a8\u5728\u521b\u5efa secret \u65f6\u9047\u5230\u95ee\u9898\uff0c\u8bf7\u68c0\u67e5 ExternalSecret \u8d44\u6e90\u63cf\u8ff0\u8f93\u51fa\u7684 events \u90e8\u5206\u3002</p> <pre><code>kubectl describe externalsecret vault-example\n</code></pre> <p>\u5982\u679c\u60a8\u770b\u5230\u6743\u9650\u9519\u8bef\uff0c\u8bf7\u786e\u4fdd\u4f7f\u7528\u5177\u6709\u6b63\u786e\u7b56\u7565\u7684\u4ee4\u724c\u3002</p> <p>\u5176\u4ed6 secret managers</p> <p>\u8bbe\u7f6e\u5176\u4ed6 secret \u7ba1\u7406\u5668\u4e0e\u4e0a\u8ff0\u6b65\u9aa4\u7c7b\u4f3c\u3002\u552f\u4e00\u7684\u533a\u522b\u662f SecretStore CRD \u548c ExternalSecret CRD \u4e2d\u7684 remoteRef \u90e8\u5206\u3002\u60a8\u53ef\u4ee5\u5728 ESO \u6587\u6863\u4e2d\u627e\u5230\u9488\u5bf9\u4e0d\u540c\u63d0\u4f9b\u5546\u7684\u5b98\u65b9\u6307\u5357\u3002</p>"},{"location":"vault/14K8s_secret/#secrets-store-csi-driver","title":"Secrets Store CSI Driver","text":"<p>Secrets Store CSI Driver \u662f\u4e00\u4e2a\u539f\u751f\u7684\u4e0a\u6e38 Kubernetes \u9a71\u52a8\u7a0b\u5e8f\uff0c\u53ef\u7528\u4e8e\u4ece\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u62bd\u8c61\u51fa secret \u7684\u5b58\u50a8\u4f4d\u7f6e\u3002</p> <p>\u5982\u679c\u60a8\u60f3\u4f7f\u7528\u4e91\u63d0\u4f9b\u5546\u7684 secret \u7ba1\u7406\u5668\u800c\u4e0d\u5c06 secret \u516c\u5f00\u4e3a Kubernetes secret \u5bf9\u8c61\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 CSI \u9a71\u52a8\u7a0b\u5e8f\u5c06 secret \u4f5c\u4e3a\u5377\u5b89\u88c5\u5728\u60a8\u7684 pod \u4e2d\u3002\u5982\u679c\u60a8\u4f7f\u7528\u4e91\u63d0\u4f9b\u5546\u6765\u6258\u7ba1\u60a8\u7684 Kubernetes \u96c6\u7fa4\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002\u8be5\u9a71\u52a8\u7a0b\u5e8f\u652f\u6301\u8bb8\u591a\u4e91\u63d0\u4f9b\u5546\uff0c\u5e76\u4e14\u53ef\u4ee5\u4e0e\u4e0d\u540c\u7684 secret \u7ba1\u7406\u5668\u4e00\u8d77\u4f7f\u7528\u3002</p> <p></p> <p>Secrets Store CSI Driver \u662f\u4e00\u4e2a daemonset \u5b88\u62a4\u8fdb\u7a0b\uff0c\u5b83\u4e0e secret \u63d0\u4f9b\u8005\u901a\u4fe1\u4ee5\u68c0\u7d22 <code>SecretProviderClass</code> \u81ea\u5b9a\u4e49\u8d44\u6e90\u4e2d\u6307\u5b9a\u7684 secret \u3002</p> <p>\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u5982\u4e0b\uff1b</p> <ol> <li>\u521b\u5efa\u4e00\u4e2a <code>SecretProviderClassCRD</code> \u6765\u5b9a\u4e49\u4ece <code>secret</code> \u63d0\u4f9b\u8005\u83b7\u53d6\u7684 secret \u7684\u8be6\u7ec6\u4fe1\u606f\u3002</li> <li>\u5728 pod \u7684 <code>volume spec</code> \u4e2d\u5f15\u7528 <code>SecretProviderClass</code></li> <li>\u9a71\u52a8\u7a0b\u5e8f\u5c06\u4ece secret \u63d0\u4f9b\u8005\u90a3\u91cc\u83b7\u53d6 <code>secret</code> \uff0c\u5e76\u5728 pod \u542f\u52a8\u671f\u95f4\u5c06\u5176\u4f5c\u4e3a <code>tmpfs</code> \u5377\u6302\u8f7d\u5230 <code>pod</code> \u4e2d\u3002\u8be5\u5377\u4e5f\u5c06\u5728 <code>pod</code> \u5220\u9664\u540e\u88ab\u5220\u9664\u3002</li> </ol> <p>\u9a71\u52a8\u7a0b\u5e8f\u8fd8\u53ef\u4ee5\u540c\u6b65\u5bf9 secret \u7684\u66f4\u6539\u3002\u8be5\u9a71\u52a8\u7a0b\u5e8f\u76ee\u524d\u652f\u6301 Vault\u3001AWS\u3001Azure \u548c GCP \u63d0\u4f9b\u5546\u3002Secrets Store CSI Driver \u4e5f\u53ef\u4ee5\u5c06\u52a0\u5bc6\u6570\u636e\u540c\u6b65\u4e3a Kubernetes secret\uff0c\u53ea\u9700\u8981\u5728\u5b89\u88c5\u671f\u95f4\u660e\u786e\u542f\u7528\u6b64\u884c\u4e3a\u3002</p>"},{"location":"vault/14K8s_secret/#_6","title":"\u4f18\u70b9","text":"<ol> <li>secret \u5b58\u50a8\u5728\u5b89\u5168\u7684\u5916\u90e8 secret \u7ba1\u7406\u5668\u4e2d\uff0c\u800c\u4e0d\u662f\u4ee3\u7801\u5b58\u50a8\u5e93\u4e2d\u3002</li> <li>\u4f7f\u673a\u5bc6\u4e0e\u5916\u90e8\u673a\u5bc6\u7ba1\u7406\u5668\u4fdd\u6301\u540c\u6b65\u3002\u5b83\u8fd8\u652f\u6301 secret \u7684\u8f6e\u6362\u3002 \u4e0e\u6240\u6709\u4e3b\u8981\u7684\u5916\u90e8 secret \u7ba1\u7406\u8005\u5408\u4f5c\u3002</li> <li>\u5c06\u5bc6\u94a5\u4f5c\u4e3a\u5377\u5b89\u88c5\u5728 pod \u4e2d\uff0c\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u4f5c\u4e3a Kubernetes secret \u516c\u5f00\u3002\u5b83\u4e5f\u53ef\u4ee5\u914d\u7f6e\u4e3a\u521b\u5efa Kubernetes secret\u3002</li> </ol>"},{"location":"vault/14K8s_secret/#_7","title":"\u7f3a\u70b9","text":"<ul> <li>\u9700\u8981\u7cbe\u5fc3\u8bbe\u7f6e\u624d\u80fd\u4f7f\u7528\uff0c\u5e76\u4e14\u6bd4 ESO \u66f4\u590d\u6742\u3002</li> <li>\u4f7f\u7528\u6bd4 ESO \u66f4\u591a\u7684\u8d44\u6e90\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u8fd0\u884c\u3002</li> <li>\u4f9d\u8d56\u4e8e\u5916\u90e8 secret \u5b58\u50a8\u53ca\u5176\u8bbf\u95ee\u7b56\u7565\u6765\u786e\u4fdd\u5b89\u5168\u3002</li> </ul>"},{"location":"vault/14K8s_secret/#google-secret-manager-provider","title":"\u4f7f\u7528 Google Secret Manager provider","text":"<p>\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u914d\u7f6e driver \u4ee5\u4f7f\u7528 Google Secret Manager (GSM) \u4f5c\u4e3a secret provider\u3002</p> <p>\u786e\u4fdd\u60a8\u4f7f\u7528\u7684\u662f\u542f\u7528\u4e86 Workload Identity \u529f\u80fd\u7684 Google Kubernetes Engine (GKE) \u96c6\u7fa4\u3002Workload Identity \u5141\u8bb8 GKE \u96c6\u7fa4\u4e2d\u7684\u5de5\u4f5c\u8d1f\u8f7d\u6a21\u62df\u8eab\u4efd\u548c\u8bbf\u95ee\u7ba1\u7406 (IAM) \u670d\u52a1\u5e10\u6237\u6765\u8bbf\u95ee Google Cloud \u670d\u52a1\u3002\u60a8\u8fd8\u9700\u8981\u4e3a\u9879\u76ee\u542f\u7528 Kubernetes Engine API\u3001Secret Manager API \u548c Billing\u3002\u5982\u679c\u672a\u542f\u7528\uff0c gcloud CLI \u4f1a\u63d0\u793a\u60a8\u542f\u7528\u8fd9\u4e9b API\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b gcloud CLI \u547d\u4ee4\u521b\u5efa\u542f\u7528\u4e86 Workload Identity \u7684\u65b0\u96c6\u7fa4\u3002</p> <pre><code>export PROJECT_ID=&lt;your gcp project&gt;\ngcloud config set project $PROJECT_ID\n\ngcloud container clusters create hello-hipster \\\n  --workload-pool=$PROJECT_ID.svc.id.goog\n</code></pre>"},{"location":"vault/14K8s_secret/#secrets-store-csi-driver_1","title":"\u5b89\u88c5 Secrets Store CSI Driver","text":"<p>\u53ef\u4ee5\u4f7f\u7528 Helm \u547d\u4ee4\u5728\u96c6\u7fa4\u4e0a\u5b89\u88c5 Secrets Store CSI \u9a71\u52a8\u7a0b\u5e8f\uff1a</p> <pre><code>helm\u00a0repo\u00a0add\u00a0secrets-store-csi-driver\u00a0https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts\n\nhelm\u00a0install\u00a0csi-secrets-store\u00a0\\\n\u00a0\u00a0\u00a0\u00a0secrets-store-csi-driver/secrets-store-csi-driver\u00a0\\\n\u00a0\u00a0\u00a0\u00a0--namespace\u00a0kube-system\n</code></pre> <p>\u8fd9\u5c06\u5728 kube-system \u547d\u540d\u7a7a\u95f4\u4e0b\u5b89\u88c5\u9a71\u52a8\u7a0b\u5e8f\u548c CRD \u3002\u60a8\u8fd8\u9700\u8981\u5c06\u6240\u9700\u7684 provider \u5b89\u88c5\u5230\u96c6\u7fa4\u4e2d\u3002</p>"},{"location":"vault/14K8s_secret/#gsm-provider","title":"\u5b89\u88c5 GSM provider","text":"<p>\u8ba9\u6211\u4eec\u5c06 GSM provider \u5b89\u88c5\u5230\u96c6\u7fa4\u4e2d\uff1a</p> <pre><code>kubectl apply -f https://raw.githubusercontent.com/GoogleCloudPlatform/secrets-store-csi-driver-provider-gcp/main/deploy/provider-gcp-plugin.yaml\n</code></pre>"},{"location":"vault/14K8s_secret/#secret","title":"\u521b\u5efa secret","text":"<p>\u9996\u5148\uff0c\u60a8\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2a\u5de5\u4f5c\u8d1f\u8f7d\u8eab\u4efd\u670d\u52a1\u5e10\u6237\u3002</p> <pre><code>#\u00a0Create\u00a0a\u00a0service\u00a0account\u00a0for\u00a0workload\u00a0identity\ngcloud\u00a0iam\u00a0service-accounts\u00a0create\u00a0gke-workload\n\n#\u00a0Allow\u00a0\"default/mypod\"\u00a0to\u00a0act\u00a0as\u00a0the\u00a0new\u00a0service\u00a0account\ngcloud\u00a0iam\u00a0service-accounts\u00a0add-iam-policy-binding\u00a0\\\n\u00a0\u00a0\u00a0\u00a0--role\u00a0roles/iam.workloadIdentityUser\u00a0\\\n\u00a0\u00a0\u00a0\u00a0--member\u00a0\"serviceAccount:$PROJECT_ID.svc.id.goog[default/mypodserviceaccount]\"\u00a0\\\n\u00a0\u00a0\u00a0\u00a0gke-workload@$PROJECT_ID.iam.gserviceaccount.com\n</code></pre> <p>\u73b0\u5728\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u8be5\u670d\u52a1\u5e10\u6237\u53ef\u4ee5\u8bbf\u95ee\u7684\u5bc6\u94a5\u3002</p> <pre><code># Create a secret with 1 active version\necho \"mysupersecret\" &gt; secret.data\ngcloud secrets create testsecret --replication-policy=automatic --data-file=secret.data\nrm secret.data\n\n# grant the new service account permission to access the secret\ngcloud secrets add-iam-policy-binding testsecret \\\n    --member=serviceAccount:gke-workload@$PROJECT_ID.iam.gserviceaccount.com \\\n    --role=roles/secretmanager.secretAccessor\n</code></pre> <p>\u73b0\u5728\u60a8\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a SecretProviderClass \u8d44\u6e90\uff0c\u7528\u4e8e\u4ece GSM \u83b7\u53d6\u5bc6\u94a5\u3002\u8bf7\u8bb0\u4f4f\u5c06 <code>$PROJECT_ID</code> \u66ff\u6362\u4e3a\u60a8\u7684 GCP \u9879\u76ee ID\u3002</p> <pre><code>#\u00a0secret-provider-class.yaml\n\napiVersion:\u00a0secrets-store.csi.x-k8s.io/v1\nkind:\u00a0SecretProviderClass\nmetadata:\n\u00a0\u00a0name:\u00a0app-secrets\nspec:\n\u00a0\u00a0provider:\u00a0gcp\n\u00a0\u00a0parameters:\n\u00a0\u00a0\u00a0\u00a0secrets:\u00a0|\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-\u00a0resourceName:\u00a0\"projects/$PROJECT_ID/secrets/testsecret/versions/latest\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path:\u00a0\"good1.txt\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-\u00a0resourceName:\u00a0\"projects/$PROJECT_ID/secrets/testsecret/versions/latest\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path:\u00a0\"good2.txt\"\n</code></pre>"},{"location":"vault/14K8s_secret/#pod","title":"\u521b\u5efa\u4e00\u4e2a Pod","text":"<p>\u73b0\u5728\u60a8\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a pod \u53bb\u4f7f\u7528\u8be5 <code>SecretProviderClass</code> \u8d44\u6e90\u4ece GSM \u83b7\u53d6\u5bc6\u94a5\u3002\u8bf7\u8bb0\u4f4f\u5c06 <code>$PROJECT_I</code>D \u66ff\u6362\u4e3a\u60a8\u7684 GCP \u9879\u76ee ID\u3002</p> <pre><code>#\u00a0my-pod.yaml\n\napiVersion:\u00a0v1\nkind:\u00a0ServiceAccount\nmetadata:\n\u00a0\u00a0name:\u00a0mypodserviceaccount\n\u00a0\u00a0namespace:\u00a0default\n\u00a0\u00a0annotations:\n\u00a0\u00a0\u00a0\u00a0iam.gke.io/gcp-service-account:\u00a0gke-workload@$PROJECT_ID.iam.gserviceaccount.com\n---\napiVersion:\u00a0v1\nkind:\u00a0Pod\nmetadata:\n\u00a0\u00a0name:\u00a0mypod\n\u00a0\u00a0namespace:\u00a0default\nspec:\n\u00a0\u00a0serviceAccountName:\u00a0mypodserviceaccount\n\u00a0\u00a0containers:\n\u00a0\u00a0\u00a0\u00a0-\u00a0image:\u00a0gcr.io/google.com/cloudsdktool/cloud-sdk:slim\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0imagePullPolicy:\u00a0IfNotPresent\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name:\u00a0mypod\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resources:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0requests:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cpu:\u00a0100m\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stdin:\u00a0true\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stdinOnce:\u00a0true\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0terminationMessagePath:\u00a0/dev/termination-log\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0terminationMessagePolicy:\u00a0File\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tty:\u00a0true\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0volumeMounts:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-\u00a0mountPath:\u00a0'/var/secrets'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name:\u00a0mysecret\n\u00a0\u00a0volumes:\n\u00a0\u00a0\u00a0\u00a0-\u00a0name:\u00a0mysecret\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0csi:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0driver:\u00a0secrets-store.csi.k8s.io\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnly:\u00a0true\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0volumeAttributes:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secretProviderClass:\u00a0'app-secrets'\n</code></pre> <p>\u5c06\u4e0a\u8ff0\u8d44\u6e90\u5e94\u7528\u5230\u96c6\u7fa4\u4e2d\u3002</p> <pre><code>kubectl apply -f secret-provider-class.yaml\nkubectl apply -f my-pod.yaml\n</code></pre> <p>\u7b49\u5f85 pod \u542f\u52a8\uff0c\u7136\u540e exec \u8fdb\u5165 pod \u67e5\u770b\u6302\u8f7d\u6587\u4ef6\u7684\u5185\u5bb9\u3002</p> <pre><code>kubectl\u00a0exec\u00a0-it\u00a0mypod\u00a0/bin/bash\n#\u00a0execute\u00a0the\u00a0below\u00a0command\u00a0in\u00a0the\u00a0pod\u00a0to\u00a0see\u00a0the\u00a0contents\u00a0of\u00a0the\u00a0mounted\u00a0secret\u00a0file\nroot@mypod:/#\u00a0cat\u00a0/var/secrets/good1.txt\n</code></pre>"},{"location":"vault/14K8s_secret/#secret_1","title":"\u5176\u4ed6 secret \u7ba1\u7406\u5668","text":"<ul> <li>AWS CSI provider</li> <li>Azure CSI provider</li> <li>Vault CSI provider</li> </ul>"},{"location":"vault/14K8s_secret/#_8","title":"\u7ed3\u8bba","text":"<p>Sealed Secrets \u662f\u5c0f\u578b\u56e2\u961f\u548c\u9879\u76ee\u5728 Git \u4e2d\u4fdd\u62a4 secret \u7684\u7edd\u4f73\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u5bf9\u4e8e\u8f83\u5927\u7684\u56e2\u961f\u548c\u9879\u76ee\uff0c<code>External Secrets Operator</code> \u6216 <code>Secrets Store CSI Driver</code> \u662f\u5b89\u5168\u7ba1\u7406\u5bc6\u94a5\u7684\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002</p> <p>External Secrets Operator \u53ef\u4ee5\u4e0e\u8bb8\u591a secret \u7ba1\u7406\u7cfb\u7edf\u4e00\u8d77\u4f7f\u7528\uff0c\u5e76\u4e0d\u9650\u4e8e\u4e0a\u8ff0\u7cfb\u7edf\u3002</p> <p>\u5f53\u7136\uff0c\u8fd9\u5e94\u8be5\u4e0e RBAC \u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u9632\u6b62\u975e\u7ba1\u7406\u5458\u8bfb\u53d6\u96c6\u7fa4\u4e2d\u7684 secret \u3002Secrets Store CSI Driver \u53ef\u80fd\u6bd4 ESO \u6d89\u53ca\u66f4\u591a\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u66f4\u539f\u751f\u7684\u89e3\u51b3\u65b9\u6848\u3002</p>"},{"location":"vault/1vault_intro/","title":"1 \u79c1\u5bc6\u4fe1\u606f\u7ba1\u7406\u5229\u5668 HashiCorp Vault\u2014\u2014\u7b80\u4ecb","text":"<p>\u6700\u8fd1\uff0c\u7531\u4e8e\u9879\u76ee\u4e2d\u9700\u8981\u4f7f\u7528\u4fdd\u5b58\u548c\u7ba1\u7406\u7684\u52a0\u5bc6\u914d\u7f6e\uff0c\u5e76\u4e14\u6211\u76f8\u4fe1\u81ea\u5df1\u53d1\u660e\u52a0\u5bc6\u65b9\u6cd5\u5e76\u4e0d\u662f\u4e00\u4e2a\u5408\u7406\u7684\u9009\u62e9\uff0c\u6240\u4ee5\u5f00\u59cb\u5bfb\u627e\u76f8\u5173\u7684\u65b9\u6848\u3002\u7ecf\u8fc7\u9009\u578b\uff0c\u786e\u5b9a\u4e86 HashCorp Valut\u3002</p> <p>\u76ee\u524d\uff0c\u5728\u7f51\u7edc\u4e0a\u9664\u4e86\u5b98\u65b9\u6587\u6863\u4e4b\u5916\uff0c\u80fd\u627e\u5230\u7684\u76f8\u5173\u8d44\u6599\u975e\u5e38\u81f3\u5c11\u3002\u8fd9\u6216\u8bb8\u662f\u56e0\u4e3a Vault \u5c1a\u672a\u5f97\u5230\u5927\u89c4\u6a21\u4f7f\u7528\uff0c\u4e0d\u8fc7\u4e5f\u6709\u53ef\u80fd\u662f\u56e0\u4e3a\u6d89\u53ca\u5230\u79c1\u5bc6\u6027\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u4e0d\u65b9\u4fbf\u516c\u5f00\u8bb2\u3002\u4e0d\u8bba\u539f\u56e0\u4e3a\u4f55\uff0c\u672c\u6587\u548c\u540e\u7eed\u7684\u6587\u7ae0\u5e0c\u671b\u628a\u4f7f\u7528 HashiCorp Vault \u7684\u7ecf\u9a8c\u548c\u5fc3\u5f97\u8bb0\u5f55\u4e0b\u6765\uff0c\u4e3a\u540e\u6765\u4eba\u63d0\u4f9b\u4e00\u70b9\u65b9\u4fbf\u3002</p>"},{"location":"vault/1vault_intro/#hashicorp","title":"\u5173\u4e8e HashiCorp","text":"<p>HashiCorp \u662f\u4e00\u5bb6\u4e13\u6ce8\u4e8e\u57fa\u7840\u8bbe\u65bd\u89e3\u51b3\u65b9\u6848\u7684\u516c\u53f8\uff0c\u4e1a\u52a1\u8303\u56f4\u6db5\u76d6\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u90e8\u7f72\u3001\u8fd0\u7ef4\u3001\u5b89\u5168\u7b49\u65b9\u9762\u3002\u4e0b\u56fe\u662f\u8be5\u516c\u53f8\u7684\u4e3b\u8981\u4ea7\u54c1\u7ebf\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u77e5\u540d\u5ea6\u4e0d\u7b97\u9ad8\uff0c\u4f46\u5927\u540d\u9f0e\u9f0e\u7684 Vagrant \u76f8\u4fe1\u5f88\u591a\u4eba\u90fd\u542c\u8bf4\u8fc7\u3002</p> <p></p>"},{"location":"vault/1vault_intro/#hashicorp-vault","title":"\u4ec0\u4e48\u662f HashiCorp Vault","text":"<p>HashiCorp Vault \u7684 Slogan \u662f A Tool for Managing Secrets\uff0c\u8fd9\u4e2a\u53e3\u53f7\u5f88\u597d\u7684\u63cf\u8ff0\u4e86\u8be5\u4ea7\u54c1\u7684\u5b9a\u4f4d\u3002</p> <p>\u5927\u591a\u6570\u8f6f\u4ef6\u9879\u76ee\u90fd\u4f1a\u4e0d\u540c\u7a0b\u5ea6\u7684\u7528\u5230\u8bf8\u5982 \u767b\u5f55\u5bc6\u7801/Token/\u8bc1\u4e66/API Key \u7b49\u79c1\u5bc6\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u7528\u660e\u7801\u4fdd\u5b58\u663e\u7136\u662f\u5f88\u4e0d\u5b89\u5168\u7684\uff0c\u5982\u679c\u4e0d\u5c0f\u5fc3\u7b7e\u5165\u5230\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff0c\u8fd8\u4f1a\u9020\u6210\u91cd\u5927\u7684\u5b89\u5168\u95ee\u9898\uff08\u8fd9\u65b9\u9762\u7684\u4e8b\u6545\u6211\u4eec\u5df2\u7ecf\u542c\u5230\u8fc7\u5f88\u591a\u6b21\u4e86\uff09\u3002</p> <p>Vault \u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u800c\u521b\u7acb\u7684\u3002\u5b83\u63d0\u4f9b\u4e86\u8fd9\u4e9b\u529f\u80fd\uff1a</p> <ul> <li>\u96c6\u4e2d\u7ba1\u7406\u5404\u79cd\u79c1\u5bc6\u4fe1\u606f\uff1b</li> <li>\u4e3a\u79c1\u5bc6\u4fe1\u606f\u8bbe\u7f6e\u79df\u671f\uff08Lease\uff09\uff0c\u5230\u671f\u540e\u81ea\u52a8\u5931\u6548\uff1b</li> <li>\u5bc6\u94a5\u7684\u52a8\u6001\u751f\u6210\u3001\u6ce8\u9500\u548c\u6eda\u52a8\u66f4\u65b0\uff1b</li> <li>\u52a8\u6001\u521b\u5efa\u65e0\u9700\u4fdd\u5b58\u7684\u4e00\u6b21\u6027\u767b\u5f55\u5bc6\u94a5\uff1b</li> <li>\u4f5c\u4e3a\u6570\u636e\u52a0\u5bc6/\u89e3\u5bc6\u63a5\u53e3\uff1b</li> <li>\u5b8c\u6574\u7684\u5ba1\u8ba1\u8bb0\u5f55\uff1b</li> <li>\u547d\u4ee4\u884c \u4ee5\u53ca RESTful API \u8bbf\u95ee\u63a5\u53e3\uff1b</li> </ul> <p>\u6b64\u5916\uff0cVault \u8bbe\u8ba1\u4e3a\u7075\u6d3b\u7684\u53ef\u63d2\u62d4\u67b6\u6784\uff0c\u5141\u8bb8\u7075\u6d3b\u7684\u8bbe\u7f6e\u5404\u79cd\u540e\u7aef\u5f15\u64ce\u548c\u5b89\u5168\u7b56\u7565\u3002\u4f8b\u5982\uff1a</p> <ul> <li>\u53ef\u4ee5\u7528\u5185\u7f6e Token\u3001\u7528\u6237/\u5bc6\u7801\u3001LDAP\u3001Amazon IAM\u3001Github \u7b49\u4f5c\u4e3a\u8ba4\u8bc1\u6388\u6743\u673a\u5236\uff1b</li> <li>\u53ef\u4ee5\u4f7f\u7528\u5185\u5b58/\u672c\u5730\u6587\u4ef6/Etcd/Consul/ZooKeeper/RDBMS/NoSQL/\u4e91\u5e73\u53f0\u7b49\u4f5c\u4e3a\u6570\u636e\u5b58\u50a8\uff1b</li> <li>\u53ef\u4ee5\u4e3a\u6570\u636e\u5e93/SSH/Consul/AWS/Nomad/PKI/RabbitMQ \u7b49\u591a\u79cd\u5e73\u53f0\u751f\u6210\u548c\u7ba1\u7406\u8bbf\u95ee\u5bc6\u94a5\uff1b</li> <li>\u53ef\u4ee5\u4e0e Cousul\u3001Chef\u3001Ansible \u7b49\u8fd0\u7ef4\u5de5\u5177\u96c6\u6210\u8d77\u6765\u5171\u540c\u4f7f\u7528</li> </ul>"},{"location":"vault/1vault_intro/#_1","title":"\u4f7f\u7528\u573a\u666f\u548c\u6bd4\u8f83","text":"<p>\u7531\u4e8e\u79c1\u5bc6\u4fe1\u606f\u7684\u7ba1\u7406\u662f\u4e00\u4e2a\u5e26\u6709\u666e\u904d\u6027\u7684\u9700\u6c42\uff0c\u6240\u4ee5\u4e1a\u754c\u5bf9\u8be5\u95ee\u9898\u4e5f\u5df2\u7ecf\u6709\u591a\u79cd\u5904\u7406\u529e\u6cd5\u3002\u8fd9\u91cc\u7b80\u5355\u63cf\u8ff0 Vault \u548c\u5176\u4ed6\u79c1\u5bc6\u7ba1\u7406\u65b9\u6848\u7684\u5bf9\u6bd4\uff0c\u4ee5\u4fbf\u4f60\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u7406\u89e3\u3002</p> <ul> <li>\u8fd0\u7ef4\u5de5\u5177(Chef,Puppet\uff0cConsul\u7b49) \u7531\u4e8e\u7ecf\u5e38\u9700\u8981\u8bb0\u5f55\u5404\u79cd\u8fde\u63a5\u4fe1\u606f\uff0c\u8fd9\u4e9b\u8fd0\u7ef4\u5de5\u5177\u4e5f\u6709\u81ea\u5df1\u7684\u52a0\u5bc6\u673a\u5236\uff0c\u4f8b\u5982 Chef data bag/Puppet Hiera\u3002\u5982\u679c\u91cd\u70b9\u5728\u4e8e\u8fd0\u7ef4\uff0c\u5bf9\u5b89\u5168\u6027\u8981\u6c42\u4e0d\u662f\u5f88\u9ad8\uff0c\u90a3\u4e48\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u6765\u5904\u7406\u79c1\u5bc6\u4fe1\u606f\u4e5f\u662f\u5b8c\u5168\u53ef\u884c\u7684\u3002\u5b83\u4eec\u7684\u95ee\u9898\u5728\u4e8e\u5b89\u5168\u6027\u4e0d\u591f\u9ad8\uff0c\u5bb9\u6613\u53d1\u751f\u6cc4\u9732\u95ee\u9898\uff0c\u6b64\u5916\u4e5f\u7f3a\u4e4f\u50cf Vault \u90a3\u6837\u5b8c\u6574\u7684\u5ba1\u6838\u8bb0\u5f55\u3002\u53e6\u5916\uff0cVault \u4e5f\u80fd\u591f\u548c\u8fd9\u4e9b\u8fd0\u7ef4\u5de5\u5177\u7ed3\u5408\u8d77\u6765\u4f7f\u7528\u3002</li> <li>\u786c\u4ef6\u5b89\u5168\u6a21\u5757\uff08Hardware Security Model, HSM\uff09 \u6309\u7167\u5b9a\u4e49\u6765\u8bf4\u662f\u57fa\u4e8e\u786c\u4ef6\u7684\uff0c\u4e0d\u8fc7\u4e5f\u6709 Amazon CloudHSM \u8fd9\u6837\u7684\u670d\u52a1\u5f62\u5f0f\u3002HSM \u7684\u5b89\u5168\u7b49\u7ea7\u662f\u8db3\u591f\u9ad8\u7684\uff0c\u4e0d\u8fc7\u5b83\u4eec\u901a\u5e38\u4ef7\u683c\u6602\u8d35\u3001\u7ba1\u7406\u9ebb\u70e6\uff0c\u57fa\u4e8e\u786c\u4ef6\u7684\u5f62\u5f0f\u5bf9\u4e91\u5e73\u53f0\u901a\u5e38\u4e0d\u592a\u53cb\u597d\uff0c\u5927\u591a\u6570\u4e2d\u5c0f\u4f01\u4e1a\u4e00\u822c\u4e0d\u4f1a\u8003\u8651\u3002\u5982\u679c\u4f60\u786e\u5b9e\u6709 HSM \u53ef\u7528\u7684\u8bdd\uff0c\u90a3\u4e48\u7528\u5b83\u6765\u7ba1\u7406 Vault \u7684\u4e3b\u5bc6\u94a5\u4e5f\u662f\u4e00\u4e2a\u5408\u7406\u7684\u9009\u62e9\uff0c\u4e0d\u8fc7\u7528 HSM \u6765\u7ba1\u7406\u6240\u6709\u79c1\u5bc6\u4fe1\u606f\u901a\u5e38\u662f\u592a\u8fc7\u91cd\u91cf\u7ea7\u4e86\u3002</li> <li>DropBox(\u53ca\u5176\u4ed6\u7c7b\u4f3c\u7684\u7f51\u76d8) \u6211\u4eec\u90fd\u660e\u767d\uff1a\u7528\u8fd9\u79cd\u65b9\u6cd5\u6765\u7ba1\u7406\u79c1\u5bc6\u4fe1\u606f\uff0c\u5728\u5b89\u5168\u6027\u7684\u89d2\u5ea6\u6765\u8bb2\u80af\u5b9a\u662f\u4e0d\u5408\u683c\u7684\uff0c\u4f46\u7531\u4e8e\u4f7f\u7528\u65b9\u4fbf\uff0c\u4e8b\u5b9e\u4e0a\u8fd8\u771f\u6709\u5f88\u591a\u4e0d\u592a\u6ce8\u91cd\u5b89\u5168\u7684\u7528\u6237\u8d70\u4e86\u8fd9\u4e2a\u8def\u5b50\u3002Vault \u7684\u4f5c\u8005\u5f53\u7136\u662f\u4e0d\u9f13\u52b1\u8fd9\u79cd\u505a\u6cd5\u7684\uff0c\u5e76\u4e14\u5e0c\u671b Vault \u76f8\u6bd4\u5176\u4ed6\u66f4\u52a0\u91cd\u91cf\u7ea7\u7684\u89e3\u51b3\u65b9\u6848\u6765\u8bf4\u80fd\u591f\u5728\u4f7f\u7528\u4e0a\u66f4\u52a0\u7b80\u4fbf\u3002</li> <li>Amazon KMS(Key Management Service) \u4ece\u540d\u5b57\u4e0a\u5c31\u80fd\u770b\u51fa\uff0cKMS \u6ce8\u91cd\u7684\u662f\u5bc6\u94a5\u7684\u7ba1\u7406\uff0cVault \u5219\u66f4\u52a0\u7075\u6d3b\u3002KMS \u548c Amazon \u81ea\u8eab\u7684\u4e91\u5e73\u53f0\u96c6\u6210\u66f4\u4f73\uff0c\u5e76\u4e14\u662f\u4e00\u4e2a\u7eaf\u7cb9\u7684\u4e91\u7aef\u89e3\u51b3\u65b9\u6848\uff0c\u800c Vault \u65e2\u53ef\u4ee5\u672c\u5730\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u90e8\u7f72\u5230\u4e91\u7aef\uff08\u6709\u5b98\u65b9\u7684 Docker \u955c\u50cf\u53ef\u7528\uff09\u3002</li> <li>Square Keywhiz \u6211\u4eec\u77e5\u9053 Square \u4e3b\u8981\u662f\u505a\u7f51\u7edc\u652f\u4ed8\u7684\u516c\u53f8\uff0c\u4e1a\u52a1\u7279\u70b9\u51b3\u5b9a\u4e86\u4ed6\u4eec\u5bf9\u4e8e\u5b89\u5168\u4e5f\u975e\u5e38\u91cd\u89c6\uff0cKeywhize \u5c31\u662f\u4ed6\u4eec\u5f00\u53d1\u7684\u79c1\u5bc6\u4fe1\u606f\u7ba1\u7406\u5de5\u5177\u3002\u6211\u6ca1\u6709\u7528\u8fc7 Keywhiz\uff0c\u4e0d\u597d\u8bc4\u4ef7\u3002\u4e0d\u8fc7\u4ece\u5b98\u65b9\u4ecb\u7ecd\u6765\u770b\uff0cKeywhiz \u548c Vault \u7684\u529f\u80fd\u7279\u6027\u975e\u5e38\u76f8\u4f3c\uff0c\u57fa\u672c\u53ef\u4ee5\u4e92\u76f8\u53d6\u4ee3\u3002\u76ee\u524d\uff0c Vault \u4f3c\u4e4e\u53d7\u5173\u6ce8\u5ea6\u66f4\u9ad8\u4e00\u4e9b\uff0c\u672a\u6765\u5c31\u770b\u54ea\u4e00\u4e2a\u9879\u76ee\u53d1\u5c55\u7684\u66f4\u597d\u4e86\u3002\u4e3a\u4e86\u65b9\u4fbf\u6bd4\u8f83\uff0c\u6211\u5728\u4e0b\u9762\u505a\u4e86\u4e00\u4e2a Vault \u548c Keywhiz \u7684\u7b80\u5355\u5bf9\u6bd4\u8868\uff0c\u4f60\u53ef\u4ee5\u6309\u7167\u81ea\u5df1\u7684\u559c\u597d\u6765\u9009\u62e9\u3002</li> <li>1Password 1Password \u7b49\u5de5\u5177\u4e5f\u662f\u90e8\u5206\u7528\u6237\u559c\u6b22\u7684\u79c1\u5bc6\u4fe1\u606f\u89e3\u51b3\u65b9\u6848\u3002\u5c3d\u7ba1\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u4e0d\u9519\u7684\u5bc6\u7801\u7ba1\u7406\u5de5\u5177\uff0c\u4f46\u5b83\u662f\u5b58\u7cb9\u7684\u5ba2\u6237\u7aef\u7a0b\u5e8f\uff0c\u7ba1\u7406\u5bc6\u7801\u57fa\u672c\u9760\u4eba\u5de5\uff0c\u4ece\u4e13\u4e1a\u7684 DevOps \u89c2\u70b9\u6765\u8bf4\uff0c\u8fd9\u79cd\u65b9\u5f0f\u662f\u4e0d\u5408\u7406\u7684\u3002\u6b64\u5916\uff0c\u5b83\u4e5f\u7f3a\u4e4f\u5bc6\u94a5\u751f\u6210\u548c\u671f\u9650\u7ba1\u7406\u3001\u5ba1\u6838\u8bb0\u5f55\u7b49\u9ad8\u7ea7\u529f\u80fd\u3002</li> <li>\u5546\u4e1a\u89e3\u51b3\u65b9\u6848 \u67d0\u4e9b\u5b58\u50a8\u5e73\u53f0\uff0c\u4f8b\u5982 SQL Server\uff0c\u63d0\u4f9b\u4e86\u81ea\u5df1\u7684\u5217\u52a0\u5bc6\u673a\u5236\u3002\u5982\u679c\u4f60\u7684\u9879\u76ee\u5927\u91cf\u4f9d\u8d56\u4e8e\u8fd9\u4e9b\u5e73\u53f0\u3001\u4e14\u8fc1\u79fb\u5230\u5176\u4ed6\u5e73\u53f0\u7684\u53ef\u80fd\u6027\u5f88\u5c0f\uff0c\u90a3\u4e48\u4f7f\u7528\u5185\u7f6e\u7684\u673a\u5236\u4e5f\u65e0\u53ef\u539a\u975e\u3002\u5b83\u7684\uff08\u6f5c\u5728\uff09\u95ee\u9898\u662f\u4e0d\u5f00\u6e90\u3001\u4e0d\u900f\u660e\uff0c\u5b58\u5728\u4f9b\u5e94\u5546\u9501\u5b9a\u7684\u98ce\u9669\u3002</li> <li>\u81ea\u5b9a\u4e49\u65b9\u6848 \u6709\u4e9b\u7528\u6237\u548c\u9879\u76ee\u53ef\u80fd\u5df2\u7ecf\u5f00\u53d1\u4e86\u81ea\u5df1\u7684\u79c1\u5bc6\u4fe1\u606f\u89e3\u51b3\u65b9\u6848\uff0c\u901a\u5e38\u662f\u81ea\u5df1\u7f16\u5199\u7684\u4ee3\u7801\u3002\u6309\u7167\u4e1a\u754c\u7684\u666e\u904d\u89c2\u70b9\uff0c\u81ea\u5df1\u7f16\u7801\u5904\u7406\u52a0\u5bc6\u95ee\u9898\u662f\u5371\u9669\u7684\uff0c\u975e\u5b89\u5168\u4e13\u5bb6\u7f16\u5199\u7684\u5b89\u5168\u4ee3\u7801\u901a\u5e38\u4f1a\u6709\u5927\u91cf\u7684\u6f5c\u5728\u6f0f\u6d1e\uff0c\u800c\u4e14\u8fd9\u4e9b\u6f0f\u6d1e\u901a\u5e38\u6bd4\u4e00\u822c\u7684\u4e1a\u52a1 bug \u66f4\u52a0\u96be\u4ee5\u53d1\u73b0\u548c\u89e3\u51b3\u3002\u603b\u4e4b\uff0c\u4e0d\u8981\u53d1\u660e\u81ea\u5df1\u7684\u5bc6\u7801\u65b9\u6848\u3002</li> </ul>"},{"location":"vault/1vault_intro/#_2","title":"\u672f\u8bed","text":"<p>\u7531\u4e8e\u662f\u4e00\u4e2a\u5b89\u5168\u5de5\u5177\uff0cHashiCorp Vault \u4f7f\u7528\u4e2d\u4f1a\u6d89\u53ca\u5230\u4e0d\u5c11\u6709\u4e00\u5b9a\u4e13\u4e1a\u6027\u7684\u672f\u8bed\uff0c\u5982\u679c\u4e0d\u7406\u89e3\u8fd9\u4e9b\u672f\u8bed\u7684\u8bdd\uff0c\u5728\u4f7f\u7528\u8be5\u5e73\u53f0\u548c\u9605\u8bfb\u6587\u7ae0\u65f6\u4f1a\u6536\u5230\u4e00\u5b9a\u5f71\u54cd\u3002\u4ee5\u4e0b\u5217\u51fa\u8be5\u5de5\u5177\u4f7f\u7528\u4e2d\u5c06\u4f1a\u7528\u5230\u7684\u4e00\u4e9b\u672f\u8bed\uff0c\u4f60\u53ef\u4ee5\u5148\u7c97\u7565\u6d4f\u89c8\u4e00\u4e0b\uff0c\u6709\u4e2a\u5927\u6982\u5370\u8c61\uff0c\u4e0d\u5b8c\u5168\u7406\u89e3\u4e5f\u6ca1\u6709\u5173\u7cfb\uff0c\u540e\u9762\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u4f1a\u7ed3\u5408\u5177\u4f53\u7528\u6cd5\u8be6\u7ec6\u8bb2\u8ff0\u3002</p> <p></p>"},{"location":"vault/2vault_start/","title":"2 \u79c1\u5bc6\u4fe1\u606f\u7ba1\u7406\u5229\u5668 HashiCorp Vault\u2014\u2014\u542f\u52a8\u548c\u8bfb\u5199","text":"<ul> <li>Install Vault</li> <li>Vault tutorials</li> <li>Vault Documentation</li> <li>Install Vault</li> <li>Vault Github</li> </ul> <p>Vault \u6253\u5305\u4e3a\u5355\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u56e0\u6b64\u8fd0\u884c\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u4e0b\u8f7d\u5e76\u89e3\u538b\u5373\u53ef\u3002\u4f60\u53ef\u4ee5\u4ece\u4e0a\u9762\u7684\u4e0b\u8f7d\u5730\u5740\u627e\u5230\u5404\u4e2a\u5e73\u53f0\u7684\u4e0b\u8f7d\u6587\u4ef6\u5305\u3002</p>"},{"location":"vault/2vault_start/#windows","title":"Windows \u5e73\u53f0\u7684\u7279\u522b\u8bf4\u660e","text":"<p>Vault \u4e5f\u63d0\u4f9b\u4e86 Windows \u5e73\u53f0\u7684\u7248\u672c\uff08X86/X64\uff09\uff0c\u4f46\u5ba2\u6237\u7aef\u5e76\u672a\u7279\u522b\u53bb\u517c\u5bb9 Windows \u63a7\u5236\u53f0\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u5728 Windows \u4e0b\u8fd0\u884c vault \u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u770b\u5230\u8fd9\u6837\u602a\u6a21\u602a\u6837\u7684\u8f93\u51fa\uff1a</p> <p></p> <p>\u6709\u7ecf\u9a8c\u7684\u670b\u53cb\u4f1a\u660e\u767d\uff0c\u8fd9\u4e9b\u770b\u4f3c\u4e71\u7801\u7684\u4e1c\u897f\u5b9e\u9645\u4e0a\u662f\u63a7\u5236\u5b57\u7b26\uff0c\u4f46 Windows \u63a7\u5236\u53f0\u5e76\u4e0d\u80fd\u5904\u7406\u5b83\u4eec\u3002\u56e0\u6b64\uff0cWindows \u7528\u6237\u8981\u4e48\u4f7f\u7528\u5176\u4ed6\u63a7\u5236\u53f0\u7a0b\u5e8f\uff0c\u6bd4\u5982 ConEmu/Cmder \u7b49\uff08\u8bf7\u81ea\u884c\u5c1d\u8bd5\uff09\uff1b\u8981\u4e48\u5728 Linux/Mac \u5e73\u53f0\u8fd0\u884c\uff0c\u907f\u514d\u8fd9\u4e2a\u8fa3\u773c\u775b\u7684\u663e\u793a\u6548\u679c\u3002</p> <p>\u7531\u4e8e\u4e0a\u8ff0\u539f\u56e0\uff0c\u540e\u7eed\u5982\u65e0\u7279\u522b\u8bf4\u660e\u7684\u8bdd\uff0c\u6240\u6709\u547d\u4ee4\u7edf\u4e00\u5728 Linux \u5e73\u53f0\u4e0a\u8fd0\u884c</p>"},{"location":"vault/2vault_start/#vault","title":"\u8fd0\u884c Vault","text":"<p>\u89e3\u538b\u6587\u4ef6\u5b8c\u6bd5\u540e\uff0c\u4f60\u53ef\u4ee5\u4ece\u547d\u4ee4\u884c\u8fd0\u884c:</p> <pre><code>$ vault --version\nVault v0.9.3 ('5acd6a21d5a69ab49d0f7c0bf540123a9b2c696d')\n</code></pre> <p>\u4e3a\u4e86\u65b9\u4fbf\u4ee5\u540e\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u8003\u8651\u628a vault \u8def\u5f84\u6dfb\u52a0\u5230 PATH \u73af\u5883\u53d8\u91cf\u4e2d\u3002</p> <p>\u4e0d\u5e26\u53c2\u6570\u8fd0\u884c vault \u4f1a\u5217\u51fa\u5ba2\u6237\u7aef\u652f\u6301\u7684\u5404\u79cd\u547d\u4ee4\uff1a</p> <pre><code>$ vault\nUsage: vault &lt;command&gt; [args]\n\nCommon commands:\n    read        Read data and retrieves secrets\n    write       Write data, configuration, and secrets\n    ...\n</code></pre> <p>Vault \u4e5f\u63d0\u4f9b\u4e86\u81ea\u52a8\u5b8c\u6210\u529f\u80fd\uff08\u76ee\u524d\u652f\u6301Bash/Zsh\uff09\uff1a</p> <pre><code>$ vault -autocomplete-install\n</code></pre> <p>\u548c\u591a\u6570\u5e38\u89c4 Linux \u547d\u4ee4\u7684\u89c4\u8303\u4e0d\u540c\uff0cVault \u547d\u4ee4\u884c\u7684\u590d\u6742\u53c2\u6570\u662f\u5355-\u5f00\u5934\u7684\uff0c\u4e0d\u662f--\u3002Shell \u91cd\u5ea6\u7528\u6237\u9700\u8981\u9002\u5e94\u4e00\u4e0b\u3002</p>"},{"location":"vault/2vault_start/#vault_1","title":"\u542f\u52a8 Vault \u670d\u52a1","text":"<p>Vault \u662f\u670d\u52a1\u5668-\u5ba2\u6237\u7aef\u7684\u67b6\u6784\uff0c\u4f46\u6240\u6709\u529f\u80fd\u90fd\u5305\u542b\u5728\u5355\u4e00\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002</p> <p>\u4e3a\u4e86\u8fd0\u884c Vault\uff0c\u6211\u4eec\u9700\u8981\u5e76\u6392\u5f00\u4e24\u4e2a\u7ec8\u7aef\u7a97\u53e3\uff1a\u4e00\u4e2a\u8fd0\u884c \u670d\u52a1\u5668\uff0c\u4e00\u4e2a\u8fd0\u884c\u5ba2\u6237\u7aef\u3002</p> <p>\u4e3a\u4e86\u65b9\u4fbf\u672c\u5730\u5f00\u53d1\u4e0e\u6d4b\u8bd5\uff0cVault \u670d\u52a1\u5668\u63d0\u4f9b\u4e86\u5f00\u53d1\u6a21\u5f0f\u3002\u5f00\u53d1\u6a21\u5f0f\u4e0b\u4e0d\u9700\u8981\u989d\u5916\u7684\u914d\u7f6e\uff0c\u6240\u6709\u6570\u636e\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u4ece\u547d\u4ee4\u884c\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u3002\u5f53\u7136\uff0c\u76f8\u5e94\u7684\u7ed3\u679c\u662f\u5f00\u53d1\u6a21\u5f0f\u4e0b\u7684\u5b89\u5168\u6027\u5f88\u5dee\uff0c\u53ef\u4ee5\u4e0d\u53d7\u9650\u5236\u7684\u8bbf\u95ee\u51e0\u4e4e\u4efb\u4f55\u6570\u636e\uff0c\u6240\u4ee5\u5f00\u53d1\u6a21\u5f0f\u4ec5\u4f9b\u5b66\u4e60\u548c\u672c\u5730\u6d4b\u8bd5\u4f7f\u7528\uff0c\u751f\u4ea7\u73af\u5883\u4e2d\u7edd\u5bf9\u4e0d\u8981\u4f7f\u7528\u3002</p> <p>\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\uff0c\u7528\u5f00\u53d1\u6a21\u5f0f\u542f\u52a8\u670d\u52a1\u5668\uff1a</p> <pre><code>$ vault server -dev\n==&gt; Vault server configuration:\n\n                     Cgo: disabled\n         Cluster Address: https://127.0.0.1:8201\n              Listener 1: tcp (addr: \"127.0.0.1:8200\", cluster address: \"127.0.0.1:8201\", tls: \"disabled\")\n               Log Level: info\n                   Mlock: supported: true, enabled: false\n        Redirect Address: http://127.0.0.1:8200\n                 Storage: inmem\n                 Version: Vault v0.9.3\n             Version Sha: 5acd6a21d5a69ab49d0f7c0bf540123a9b2c696d\n\nWARNING! dev mode is enabled! In this mode, Vault runs entirely in-memory\nand starts unsealed with a single unseal key. The root token is already\nauthenticated to the CLI, so you can immediately begin using Vault.\n\nYou may need to set the following environment variable:\n\n    $ export VAULT_ADDR='http://127.0.0.1:8200'\n\nThe unseal key and root token are displayed below in case you want to\nseal/unseal the Vault or re-authenticate.\n\nUnseal Key: ***\nRoot Token: ***\n\nDevelopment mode should NOT be used in production installations!\n\n==&gt; Vault server started! Log data will stream in below:\n\n2018/02/08 11:36:57.917623 [INFO ] core: security barrier not initialized\n...\n</code></pre> <p>\u4f60\u53ef\u4ee5\u770b\u5230\u670d\u52a1\u5668\u8f93\u51fa\u4e86\u76f8\u5f53\u591a\u7684\u5185\u5bb9\u3002\u5176\u4e2d\uff0c\u6211\u4eec\u91cd\u70b9\u5173\u6ce8\u4e0b\u5217\u4fe1\u606f\uff1a</p> <ul> <li>\u670d\u52a1\u5668\u4fa6\u542c\u5730\u5740\u4e3a <code>127.0.0.1:8200</code> \uff08\u8fd8\u6709\u4e00\u4e2a\u7aef\u53e3 8201 \u7528\u4e8e\u96c6\u7fa4\u4f7f\u7528\uff0c\u76ee\u524d\u6211\u4eec\u4e0d\u5173\u6ce8\uff09\uff1b</li> <li>\u6570\u636e\u5b58\u50a8\u4f7f\u7528\u5185\u5b58\u5f15\u64ce\uff08inmem\uff09\u3002\u8fd9\u610f\u5473\u7740\u5f00\u53d1\u6a21\u5f0f\u4e0b\u6240\u6709\u6570\u636e\u5728\u5173\u95ed\u670d\u52a1\u5668\u540e\u90fd\u4e0d\u4f1a\u4fdd\u7559\uff1b</li> <li>\u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u8bbf\u95ee\u670d\u52a1\u5668\uff0c\u9700\u8981\u9996\u5148\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff08<code>VAULT_ADDR</code>\uff09\uff1b</li> <li>Unseal Key \u5728\u751f\u4ea7\u6a21\u5f0f\u4e0b\u5f88\u91cd\u8981\uff0c\u4f46\u662f\u5f00\u53d1\u73af\u5883\u4e0b\u6682\u65f6\u7528\u4e0d\u5230\uff1b</li> </ul> <p>Root Token \u503c\u5f97\u91cd\u70b9\u8bf4\u660e\u4e00\u4e0b\u3002</p> <p>Vault \u63d0\u4f9b\u591a\u79cd\u9a8c\u8bc1/\u6388\u6743\u5ba2\u6237\u7aef\u7684\u673a\u5236\uff0c\u5176\u4e2d Token \u662f\u9ed8\u8ba4\u7684\u9a8c\u8bc1\u624b\u6bb5\u3002\u65e0\u8bba\u5f00\u53d1\u8fd8\u662f\u751f\u4ea7\u73af\u5883\uff0c\u670d\u52a1\u5668\u542f\u52a8\u65f6\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a <code>Root Token</code>\uff0c\u8be5 Token \u76f8\u5f53\u4e8e Linux \u7cfb\u7edf\u4e2d\u7684 <code>root use</code>r\uff0c\u5177\u6709\u6700\u9ad8\u7684\u8bbf\u95ee\u6743\u9650\u3002</p> <p>\u4f7f\u7528 <code>Root Token</code> \u767b\u5f55\u7cfb\u7edf\u7684\u7528\u6237\u53ef\u4ee5\u751f\u6210\u53e6\u5916\u7684 Token\uff0c\u5e76\u4e14\u4e3a\u8fd9\u4e9b Token \u8bbe\u7f6e\u7279\u5b9a\u7684\u8bbf\u95ee\u6743\u9650\u3002</p> <p>\u8fd9\u5c31\u662f Vault \u7684\u8ba4\u8bc1/\u6388\u6743\u673a\u5236\u3002\u5728\u5f00\u53d1\u6a21\u5f0f\u4e0b\uff0c\u7528\u6237\u9ed8\u8ba4\u662f\u4f7f\u7528 <code>Root Token</code> \u767b\u5f55\u7684\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5728\u5206\u914d\u65b0\u7684 Token \u4e4b\u540e\uff0c\u4f7f\u7528\u65b0 Token \u91cd\u65b0\u767b\u5f55\u3002</p> <p>\u73b0\u5728\uff0c\u4f60\u5e94\u8be5\u628a Root Token \u8bb0\u5f55\u5728\u65b9\u4fbf\u8bbf\u95ee\u7684\u5730\u65b9\uff0c\u56e0\u4e3a\u65e5\u5fd7\u591a\u4e86\u4ee5\u540e\uff0c\u518d\u56de\u5934\u627e\u8fd9\u4e2a\u4fe1\u606f\u5c31\u56f0\u96be\u4e86\u3002</p> <pre><code>$ export VAULT_ADDR='http://127.0.0.1:8200'\n$ vault status\nKey             Value\n---             -----\nSeal Type       shamir\nSealed          false\nTotal Shares    1\nThreshold       1\nVersion         0.9.3\nCluster Name    vault-cluster-d71c802b\nCluster ID      36560e34-acd4-141d-c299-9a6d4ba0091b\nHA Enabled      false\n</code></pre> <p>\u770b\u5230\u4e0a\u9762\u7684\u4fe1\u606f\uff0c\u8bf4\u660e\u670d\u52a1\u5668\u8fd0\u884c\u6b63\u5e38\u3002\u6709\u4e24\u70b9\u503c\u5f97\u4e00\u63d0\uff1a</p> <ul> <li><code>Sealed=false</code>\uff0c\u8bf4\u660e\u6570\u636e\u5b58\u50a8\u6ca1\u6709\u5bc6\u5c01\uff0c\u53ef\u4ee5\u8bfb\u5199\uff08\u751f\u4ea7\u6a21\u5f0f\u4e0b\u9700\u8981\u7279\u5b9a\u7684\u521d\u59cb\u5316\u4e4b\u540e\u624d\u80fd\u89e3\u5c01\uff09\uff1b</li> <li><code>HA Enabled=false</code>\uff0c\u56e0\u4e3a\u5f00\u53d1\u6a21\u5f0f\u7684\u5b58\u50a8\u5f15\u64ce\uff08\u5185\u5b58\uff09\u4e0d\u652f\u6301\u96c6\u7fa4\u3002</li> </ul>"},{"location":"vault/2vault_start/#_1","title":"\u8bfb\u5199\u6570\u636e","text":"<p>\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u5747\u5df2\u5c31\u4f4d\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u4ee5\u5f80\u91cc\u9762\u8bfb\u5199\u6570\u636e\u4e86\uff1a</p> <pre><code>$ vault write secret/hello value=world\nSuccess! Data written to: secret/hello\n$ vault write secret/hello excited=yes name=user\nSuccess! Data written to: secret/hello\n$ vault read secret/hello\nKey                 Value\n---                 -----\nrefresh_interval    768h\nexcited             yes\nname                user\n</code></pre> <p>\u8bfb\u5199\u6570\u636e\u4f7f\u7528 read/write \u547d\u4ee4\u3002\u53c2\u6570 secret/hello\u8fd9\u662f\u4e00\u4e2a\u8def\u5f84\uff08Path\uff09\u3002</p> <p>Vault \u4e2d\u7528 Path \u533a\u5206\u4e0d\u540c\u6570\u636e\u7684\u5b58\u653e\u4f4d\u7f6e\u3002\u4e00\u4e2a Path \u4e0b\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u952e\u503c\u5bf9\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f write \u547d\u4ee4\u662f\u8986\u76d6\u5f0f\u7684\u800c\u4e0d\u662f\u8ffd\u52a0\u5f0f\u7684\uff0c\u6240\u4ee5\u7b2c\u4e00\u6761\u547d\u4ee4\u5199\u5165\u7684\u503c\u4f1a\u88ab\u540e\u6765\u7684\u6240\u8986\u76d6\uff0c\u56e0\u6b64\u4f60\u5fc5\u987b\u786e\u4fdd\u5728\u540c\u4e00\u4e2a\u547d\u4ee4\u4e2d\u4e00\u6b21\u6027\u5199\u5165\u6240\u6709\u7684\u5185\u5bb9\u3002</p> <p>read \u547d\u4ee4\u8bfb\u51fa\u4e86\u521a\u624d\u5199\u5165\u7684\u5185\u5bb9\uff0c\u53e6\u5916\u8fd8\u6709\u4e00\u6761\u989d\u5916\u7684\u4fe1\u606f <code>refresh_internal</code>\u3002</p> <p>\u8fd9\u662f\u7531\u7cfb\u7edf\u8d4b\u4e88\u7684\u4e00\u4e2a\u7279\u6b8a\u503c\uff0c\u8868\u793a\u8be5\u6570\u636e\u7684\u6709\u6548\u65f6\u95f4\uff08768\u5c0f\u65f6=32\u5929\uff09\uff0c\u5230\u671f\u540e\u8be5\u6570\u636e\u5c06\u88ab\u6e05\u9664\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u5c06\u6570\u636e\u8f93\u51fa\u4e3a Json \u683c\u5f0f\uff0c\u4ee5\u4fbf\u89c2\u5bdf\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\uff0c\u540c\u65f6\u4e5f\u65b9\u4fbf\u652f\u6301 Json \u683c\u5f0f\u7684\u5e93\u8bfb\u53d6\uff1a</p> <pre><code>$ vault read -format=json secret/hello\n{\n  \"request_id\": \"0893c6ee-e38c-82da-9d75-373c43d4ec98\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 2764800,\n  \"renewable\": false,\n  \"data\": {\n    \"excited\": \"yes\",\n    \"name\": \"user\"\n  },\n  \"warnings\": null\n}\n</code></pre> <p>\u6211\u4eec\u8bbe\u7f6e\u7684\u503c\u5728 Json \u6570\u636e\u7684 data \u8282\u70b9\u4e0b\u3002\u8fd8\u53ef\u4ee5\u770b\u5230\uff0c\u521a\u624d\u8f93\u51fa\u7684 <code>refresh_interval</code> \u5b9e\u9645\u4e0a\u662f\u8be5\u6570\u636e\u79df\u671f\uff08Lease\uff09\u7684\u4e00\u79cd\u8868\u8fbe\u5f62\u5f0f\u3002</p> <p>\u79df\u671f\u662f Vault \u7528\u6765\u8868\u793a\u79c1\u5bc6\u6570\u636e\u6709\u6548\u671f\u7684\u4e00\u4e2a\u6982\u5ff5\u3002\u79df\u671f\u7684\u5185\u90e8\u65f6\u95f4\uff08<code>lease_duration</code>\uff09\u662f\u7528\u79d2\u6765\u8bb0\u5f55\u7684\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u6362\u7b97\u4e00\u4e0b\u3002\u7531\u4e8e\u8be5\u6570\u636e\u662f\u4e0d\u53ef\u66f4\u65b0\uff08<code>Renewable</code>\uff09\u7684\uff0c\u56e0\u6b64 <code>lease_id</code> \u4e3a\u7a7a\u3002\u540e\u9762\u6211\u4eec\u8fd8\u4f1a\u8bb2\u5230\u5982\u4f55\u7ba1\u7406 Lease\u3002</p> <p>\u5982\u679c\u6211\u4eec\u4e0d\u518d\u9700\u8981\u8be5\u6570\u636e\uff0c\u53ef\u4ee5\u7528 delete \u547d\u4ee4\u5220\u9664\u5b83\uff1a</p> <pre><code>$ vault delete secret/hello\nSuccess! Data deleted (if it existed) at: secret/hello\n\n$ vault read secret/hello\nNo value found at secret/hello\n</code></pre> <p>\u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 secret/hello \u8def\u5f84\uff0c\u8fd9\u4e2a\u8def\u5f84\u5e76\u4e0d\u662f\u968f\u610f\u6307\u5b9a\u7684\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ea\u80fd\u628a\u79c1\u5bc6\u6570\u636e\u4fdd\u5b58\u5728\u4ee5 secret/ \u4e3a\u524d\u7f00\u7684\u8def\u5f84\u4e0b\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u4e0b\u9762\u7684\u9519\u8bef\u4fe1\u606f\uff1a</p> <pre><code>$ vault write foo/bar a=b\nError writing data to foo/bar: Error making API request.\n\nURL: PUT http://127.0.0.1:8200/v1/foo/bar\nCode: 404. Errors:\n\n* no handler for route 'foo/bar'\n</code></pre> <p>\u4ece\u51fa\u9519\u4fe1\u606f\u53ef\u4ee5\u53d1\u73b0\uff0cVault \u670d\u52a1\u5668/\u5ba2\u6237\u7aef\u4e4b\u95f4\u5b9e\u9645\u4e0a\u662f RESTful \u5f62\u5f0f\u7684 HTTP \u901a\u4fe1\u3002</p>"},{"location":"vault/3vault_secretengine/","title":"3 \u79c1\u5bc6\u4fe1\u606f\u7ba1\u7406\u5229\u5668 HashiCorp Vault-Secret Engine","text":"<p>\u5728\u4ecb\u7ecd\u90e8\u5206\u6211\u4eec\u8bf4\u8fc7\uff0cVault \u662f\u4e00\u4e2a\u7075\u6d3b\u7684\u3001\u53ef\u63d2\u62d4\u7684\u67b6\u6784\u3002</p> <p>Secret Engine \u5c31\u662f\u53ef\u63d2\u62d4\u6027\u7684\u4f53\u73b0\u4e4b\u4e00\u3002\u5b83\u5141\u8bb8\u5728\u4fdd\u6301 Vault \u6838\u5fc3\u7a33\u5b9a\u7684\u524d\u63d0\u4e0b\uff0c\u652f\u6301\u591a\u79cd\u4e0d\u540c\u7684\u52a0\u5bc6\u6e20\u9053\uff0c\u6bcf\u79cd\u6e20\u9053\u6709\u5404\u81ea\u7684\u4f18\u70b9\u548c\u9002\u7528\u8303\u56f4\uff0c\u540c\u65f6\u80fd\u591f\u901a\u8fc7\u7edf\u4e00\u7684\u63a5\u53e3\u8fdb\u884c\u7ba1\u7406\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u5c31\u6765\u68c0\u67e5\u4e00\u4e0b\u670d\u52a1\u5668\u914d\u7f6e\u4e86\u54ea\u4e9b engine\uff1a</p> <pre><code>$ vault secrets list\nPath          Type         Description\n----          ----         -----------\ncubbyhole/    cubbyhole    per-token private secret storage\nidentity/     identity     identity store\nsecret/       kv           key/value secret storage\nsys/          system       system endpoints used for control, policy and debugging\n</code></pre> <p>\u4ece\u8f93\u51fa\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\uff1a</p> <ul> <li>\u6709\u4e00\u4e2a\u7c7b\u578b\u4e3a kv \u7684\u5f15\u64ce\uff0c\u52a0\u8f7d\u5230\u4e86 secret/ \u8def\u5f84\u4e0a\uff0c\u5176\u63cf\u8ff0\u4e3a\u201c\u952e\u503c\u5bf9\u52a0\u5bc6\u5b58\u50a8\u201d\u3002\u8fd9\u6837\uff0c\u8c1c\u5e95\u5c31\u63ed\u5f00\u4e86\uff1a\u6211\u4eec\u4e4b\u6240\u4ee5\u80fd\u591f\u5411\u6307\u5b9a\u7684\u8def\u5f84\u8fdb\u884c\u8bfb\u5199\uff0c\u662f\u56e0\u4e3a\u6709 <code>Secret engine</code> \u7684\u652f\u6301\uff0c\u6ca1\u6709\u52a0\u8f7d\u7684\u8def\u5f84\u662f\u4e0d\u80fd\u8bbf\u95ee\u7684\u3002\uff08\u5176\u4ed6\u51e0\u4e2a engine \u662f Vault \u5185\u90e8\u7528\u4e8e\u652f\u6491\u5176\u4ed6\u7528\u9014\u7684\uff0c\u8fd9\u91cc\u6211\u4eec\u4e0d\u8ba8\u8bba\uff09<code>Secret Engine</code> \u4e5f\u53ef\u4ee5\u7531\u7ba1\u7406\u5458\u8fdb\u884c\u7075\u6d3b\u7684\u914d\u7f6e\u3002</li> </ul> <p>kv \u662f\u5176\u4e2d\u6700\u7b80\u5355\u7684\u5f15\u64ce\uff0c\u4e5f\u662f\u5f00\u53d1\u6a21\u5f0f\u4e0b\u9ed8\u8ba4\u52a0\u8f7d\u7684\uff0c\u5b83\u5141\u8bb8\u5728\u6211\u4eec\u5185\u5b58\u4e2d\u4ee5\u952e\u503c\u5bf9\u7684\u5f62\u5f0f\u4fdd\u5b58\u79c1\u5bc6\u6570\u636e\u3002</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u5c1d\u8bd5\u4e00\u4e0b\u5982\u4f55\u914d\u7f6e Secret engine\u3002\u4ecd\u7136\u4ee5 kv \u4e3a\u4f8b\uff0c\u6211\u4eec\u7528 enable \u547d\u4ee4\uff0c\u5c06 kv \u52a0\u8f7d\u5230\u53e6\u5916\u4e00\u4e2a\u4f4d\u7f6e</p> <pre><code>$ vault secrets enable -path=kv kv\nSuccess! Enabled the kv secrets engine at: kv/\n\n$ vault secrets list\nPath          Type         Description\n----          ----         -----------\ncubbyhole/    cubbyhole    per-token private secret storage\nidentity/     identity     identity store\nkv/           kv           n/a\nsecret/       kv           key/value secret storage\nsys/          system       system endpoints used for control, policy and debugging\n</code></pre> <p>\u6211\u4eec\u770b\u5230\uff0c\u540c\u4e00\u4e2a\u5f15\u64ce\u53ef\u4ee5\u88ab\u52a0\u8f7d\u5230\u4e0d\u540c\u7684\u8def\u5f84\u4e0b\uff08\u4f60\u53ef\u4ee5\u60f3\u8c61\u4e3a\u540c\u4e00\u4e2a Engine \u7c7b\u7684\u591a\u4e2a\u5b9e\u4f8b\uff09\u3002</p> <p>\u867d\u7136\u662f\u76f8\u540c\u7684\u5f15\u64ce\uff0c\u4f46\u6bcf\u4e2a\u8def\u5f84\u4e0b\u7684\u6570\u636e\u90fd\u662f\u5f7c\u6b64\u72ec\u7acb\u7684\uff0c\u5b83\u4eec\u4e4b\u95f4\u4e0d\u4f1a\u4e92\u76f8\u5e72\u6270\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff1a</p> <pre><code>$ vault write kv/hello target=world\nSuccess! Data written to: kv/hello\n\n$ vault read kv/hello\nKey                 Value\n---                 -----\nrefresh_interval    768h\ntarget              world\n\n$ vault read secret/hello\nNo value found at secret/hello\n</code></pre> <p>\u5f53\u67d0\u4e2a\u5f15\u64ce\u4e0d\u518d\u9700\u8981\u4ee5\u540e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u5176\u7981\u7528\uff1a</p> <pre><code>$ vault secrets disable kv\nSuccess! Disabled the secrets engine (if it existed) at: kv/\n\n$ vault secrets list\nPath          Type         Description\n----          ----         -----------\ncubbyhole/    cubbyhole    per-token private secret storage\nidentity/     identity     identity store\nsecret/       kv           key/value secret storage\nsys/          system       system endpoints used for control, policy and debugging\n</code></pre>"},{"location":"vault/3vault_secretengine/#_1","title":"\u6709\u54ea\u4e9b\u5f15\u64ce\u53ef\u7528\uff1f","text":"<p>\u4e0a\u9762\u7684\u4f8b\u5b50\u4f7f\u7528 kv \u4f5c\u4e3a\u52a0\u5bc6\u5f15\u64ce\u3002\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u952e\u503c\u5bf9\u5b58\u50a8\uff0c\u597d\u5904\u662f\u4f7f\u7528\u548c\u914d\u7f6e\u6781\u5176\u7b80\u5355\uff0c\u4f46\u672a\u5fc5\u7b26\u5408\u9879\u76ee\u7684\u5177\u4f53\u8981\u6c42\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u8fd8\u6709\u54ea\u4e9b\u5f15\u64ce\u53ef\u4ee5\u4f7f\u7528\u5462\uff1f</p> <p>\u76ee\u524d\uff0cVault \u652f\u6301\u4e0b\u5217\u5f15\u64ce\uff1a</p> <ul> <li>AWS</li> <li>Consul</li> <li>Cubbyhole</li> <li>Database\uff08\u591a\u79cd\uff09</li> <li>Identity</li> <li>Key/Value</li> <li>Nomad</li> <li>PKI</li> <li>RabbitMQ</li> <li>SSH</li> <li>TOTP</li> <li>Transit</li> </ul> <p>\u5176\u4e2d\uff0cDatabase \u6309\u6570\u636e\u5e93\u7c7b\u578b\u53c8\u5206\u4e3a\u591a\u79cd\u5b50\u7c7b\u578b\uff0cMySQL/Postgres/Oracle/MSSQL/MongoDB \u7b49\u4e3b\u6d41\u6570\u636e\u5e93\u90fd\u5305\u542b\u5728\u5185\u4e86\u3002\u5982\u679c\u8fd8\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\u7684\u8bdd\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u6309\u7167 Vault \u63d2\u4ef6\u89c4\u8303 \u81ea\u5df1\u624b\u64b8\u4e00\u4e2a\u3002</p>"},{"location":"vault/3vault_secretengine/#aws","title":"AWS \u52a0\u5bc6\u5f15\u64ce","text":"<p>\u4f7f\u7528\u8be5\u5f15\u64ce\u4e4b\u524d\uff0c\u9700\u8981\u8fdb\u884c\u4e00\u5b9a\u7684\u914d\u7f6e\u5de5\u4f5c\uff0c\u624d\u80fd\u8bbf\u95ee AWS \u63a5\u53e3\u3002\u8fd9\u91cc\u7684\u4f8b\u5b50\u53ea\u4f7f\u7528\u6700\u57fa\u672c\u7684 AWS \u5b89\u5168\u7b56\u7565\uff0c\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u8d39\u7528\uff0c\u8bf7\u5b89\u5fc3\u4f7f\u7528\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u5728 Vault \u4e2d\u542f\u7528 aws \u5f15\u64ce\uff1a</p> <pre><code>$ vault secrets enable -path=aws aws\nSuccess! Enabled the aws secrets engine at: aws/\n</code></pre> <p>\u542f\u7528\u5f15\u64ce\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a <code>-path</code> \u53c2\u6570\uff0c\u90a3\u4e48\u52a0\u8f7d\u7684\u8def\u5f84\u5c06\u4f1a\u4f7f\u7528\u5f15\u64ce\u81ea\u8eab\u7684\u540d\u5b57\uff08aws\uff09\uff0c\u56e0\u6b64\u4e0a\u8ff0\u547d\u4ee4\u53ef\u4ee5\u7b80\u5199\u4e3a <code>vault secrets enable aws</code>\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u9700\u8981\u52a0\u8f7d\u5230\u975e\u9ed8\u8ba4\u4f4d\u7f6e\uff0c\u90a3\u4e48\u8fd8\u662f\u9700\u8981 <code>-path</code> \u53c2\u6570</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u53bb AWS \u7684\u540e\u53f0\u521b\u5efa\u4e00\u4e2a\u5b89\u5168\u51ed\u8bc1\uff08\u6211\u7684\u5b89\u5168\u51ed\u8bc1 -&gt; \u8bbf\u95ee\u5bc6\u94a5\uff09\u3002</p> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u751f\u6210\u8fc7\u51ed\u8bc1\u7684\u8bdd\uff0c\u90a3\u4e48\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ece\u524d\u7684\u3002\u4f46\u8bf7\u8bb0\u4f4f\uff0c AWS \u7684\u51ed\u8bc1\u53ea\u6709\u521b\u5efa\u65f6\u624d\u80fd\u770b\u5230\u8bbf\u95ee\u5bc6\u94a5\u548c\u79c1\u6709\u5bc6\u94a5\uff0c\u4ee5\u540e\u5c31\u518d\u6ca1\u6709\u673a\u4f1a\u4e86\uff0c\u6240\u4ee5\u8bf7\u52a1\u5fc5\u627e\u4e2a\u5b89\u5168\u7684\u5730\u65b9\u628a\u8fd9\u4e9b\u503c\u8bb0\u5f55\u4e0b\u6765\u3002 </p> <p>\u5f53\u7136\uff0c\u5982\u679c\u771f\u7684\u5fd8\u4e86\u5177\u4f53\u503c\u7684\u8bdd\uff0c\u4e5f\u4e0d\u662f\u4ec0\u4e48\u5927\u95ee\u9898\uff0c\u91cd\u65b0\u518d\u751f\u6210\u4e00\u4e2a\u5c31\u662f\u4e86\u3002</p> <p></p> <p>\u51ed\u8bc1\u521b\u5efa\u540e\uff0c\u6211\u4eec\u7528\u5982\u4e0b\u547d\u4ee4\u914d\u7f6e AWS \u5f15\u64ce\uff0c\u542f\u7528\u8bbf\u95ee\u8d26\u53f7\uff1a</p> <pre><code>$ vault write aws/config/root access_key=[ACCESS KEY] secret_key=[SECRET_KEY]\nSuccess! Data written to: aws/config/root\n</code></pre> <p>\u8bf7\u5c06\u4e0a\u4e00\u6b65\u8bb0\u5f55\u4e0b\u6765\u7684\u8bbf\u95ee\u5bc6\u94a5/\u79c1\u6709\u5bc6\u94a5\u586b\u5199\u5230\u76f8\u5e94\u7684\u53c2\u6570\u4f4d\u7f6e\u3002</p> <p>\u6211\u4eec\u662f\u5982\u4f55\u77e5\u9053\u914d\u7f6e\u8981\u5199\u5165 aws/config/root \u5462\uff1f\u540e\u9762\u6211\u4eec\u4f1a\u56de\u5934\u6765\u8bb2\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u914d\u7f6e\u8bbf\u95ee\u8d26\u53f7\u662f\u5b8c\u6210\u4e86\u9a8c\u8bc1\uff08Authentication\uff09\u7684\u6b65\u9aa4\uff0c\u4f46\u6211\u4eec\u8fd8\u9700\u8981\u6388\u6743\uff08Authorization\uff09\uff0c\u4ee5\u63a7\u5236\u8be5\u7528\u6237\u7684\u8bbf\u95ee\u6743\u9650\u3002</p> <p>\u7531\u4e8e AWS \u683c\u5f0f\u7684\u7b56\u7565\u6570\u636e\u6bd4\u8f83\u590d\u6742\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5bf9 AWS IAM \u4e0d\u592a\u719f\u6089\u7684\u7528\u6237\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u76f4\u63a5\u5c06\u4e0b\u9762\u7684\u5185\u5bb9\u7c98\u8d34\u5230\u547d\u4ee4\u884c\u7a97\u53e3\u8fd0\u884c\uff1a</p> <pre><code>$ vault write aws/roles/my-role policy=-&lt;&lt;EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"Stmt1426528957000\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:*\"\n      ],\n      \"Resource\": [\n        \"*\"\n      ]\n    }\n  ]\n}\nEOF\nSuccess! Data written to: aws/roles/my-role\n</code></pre> <p>\u6211\u4eec\u914d\u7f6e\u4e86\u4e00\u4e2a\u540d\u4e3a my-role \u7684\u7b56\u7565\u3002\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u8981\u6c42\u5f15\u64ce\u4e3a\u6211\u4eec\u751f\u6210\u8bbf\u95ee\u51ed\u636e\uff0c\u8be5\u51ed\u636e\u53ef\u4ee5\u901a\u8fc7 read \u547d\u4ee4\u8bfb\u53d6\uff1a</p> <pre><code>$ vault read aws/creds/my-role\nKey                Value\n---                -----\nlease_id           aws/creds/my-role/9397859b-62a0-da5e-ad19-d1ee83a4810c\nlease_duration     768h\nlease_renewable    true\naccess_key         ***\nsecret_key         ***\nsecurity_token     &lt;nil&gt;\n</code></pre> <p>\u4f60\u4f1a\u6ce8\u610f\u5230\u6267\u884c\u8fd9\u4e2a\u547d\u4ee4\u9700\u8981\u4e00\u70b9\u65f6\u95f4\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u5e55\u540e\uff0cAWS \u5f15\u64ce\u5b9e\u9645\u4e0a\u8c03\u7528\u4e86 AWS API \u63a5\u53e3\u6765\u521b\u5efa\u51ed\u636e\u3002\u8fd8\u8bb0\u5f97\u524d\u9762\u7684\u7b56\u7565\u6587\u4ef6\u6307\u5b9a\u4e86\u64cd\u4f5c\u6743\u9650\u4e3a \u201cec2:*\u201d \u5417\uff1f</p> <p>\u8fd9\u610f\u5473\u7740\u4f7f\u7528\u8fd9\u91cc\u751f\u6210\u7684 <code>access_key/secret_key</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u65e0\u9650\u5236\u5730\u8bbf\u95ee AWS EC2 \u7684\u6240\u6709\u529f\u80fd\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u6743\u9650\u662f\u975e\u5e38\u5927\u7684\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u7eed\u7684\u6b65\u9aa4\u628a\u8fd9\u4e2a\u6d4b\u8bd5\u51ed\u8bc1\u5220\u6389\uff0c\u4ee5\u8bbf\u88ab\u6076\u610f\u4f7f\u7528\u3002</p> <p>\u5982\u679c\u4f60\u73b0\u5728\u5230 AWS \u7684 IAM \u63a7\u5236\u53f0\u53bb\u770b\u4e00\u4e0b\uff0c\u5c31\u80fd\u627e\u5230 Vault \u4e3a\u6211\u4eec\u751f\u6210\u7684\u51ed\u8bc1\uff1a</p> <p></p> <p>\u73b0\u5728\uff0c\u56de\u5934\u770b\u770b Vault \u4e3a\u6211\u4eec\u751f\u6210\u7684\u51ed\u636e\u5185\u5bb9\u3002\u4f60\u4f1a\u53d1\u73b0\u8be5\u51ed\u636e\u6709\u4e00\u4e2a\u6709\u6548\u7684\u79df\u671f\uff08<code>lease_id</code>\uff09\uff0c\u8bf7\u8bb0\u4f4f\u8fd9\u4e2a <code>lease_id</code>\uff0c\u4ee5\u540e\u65e0\u8bba\u8bfb\u53d6\u3001\u66f4\u65b0\u3001\u7eed\u671f\u6216\u5220\u9664\u51ed\u636e\uff0c\u90fd\u8981\u901a\u8fc7 <code>lease_id</code> \u6765\u8bbf\u95ee\u3002\u5f53\u7136\uff0c<code>lease_duration</code> \u544a\u8bc9\u6211\u4eec\u8fd9\u4e2a\u51ed\u636e\u5728 768\u5c0f\u65f6 \uff0832\u5929\uff09\u4e4b\u540e\u5c31\u4f1a\u8fc7\u671f\u3002</p> <p>\u5982\u679c\u6211\u4eec\u4e0d\u518d\u9700\u8981\u6b64\u51ed\u636e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 lease \u5b50\u547d\u4ee4\u5c06\u5176\u5220\u9664\uff1a</p> <pre><code>vault lease revoke aws/creds/my-role/9397859b-62a0-da5e-ad19-d1ee83a4810c\nSuccess! Revoked lease: aws/creds/my-role/9397859b-62a0-da5e-ad19-d1ee83a4810c\n</code></pre> <p>\u8fd9\u4e2a\u547d\u4ee4\u4e5f\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\u6765\u6267\u884c\uff0c\u56e0\u4e3a\u5b83\u540c\u65f6\u4e5f\u4f1a\u5220\u9664 AWS \u540e\u53f0\u7684\u51ed\u636e\u3002\u5b8c\u6210\u540e\u518d\u68c0\u67e5\u4e00\u4e0b AWS IAM \u63a7\u5236\u53f0\uff0c\u4f60\u4f1a\u53d1\u73b0\u539f\u6765\u7684\u51ed\u636e\u73b0\u5728\u5df2\u7ecf\u6d88\u5931\u4e86\u3002</p>"},{"location":"vault/3vault_secretengine/#_2","title":"\u5e2e\u52a9\u7cfb\u7edf","text":"<p>\u5728\u4e0a\u9762\u7684\u6b65\u9aa4\u4e2d\uff0c\u6211\u4eec\u5bf9 AWS \u5f15\u64ce\u8fdb\u884c\u4e86\u914d\u7f6e\uff0c\u4f46\u5e76\u672a\u8bf4\u660e\u5f15\u64ce\u7684\u914d\u7f6e\u683c\u5f0f\u662f\u4ec0\u4e48\u6837\u7684\u3002\u6bd4\u5982\uff0c\u4f60\u600e\u4e48\u77e5\u9053 AWS \u5f15\u64ce\u7684\u914d\u7f6e\u8def\u5f84\u662f aws/config/root\uff1f</p> <p>\u4e00\u4e2a\u663e\u7136\u6613\u89c1\u7684\u56de\u7b54\u662f\u770b\u6587\u6863\u3002\u4f46\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a\u529e\u6cd5\uff0c\u90a3\u5c31\u662f\u5185\u7f6e\u7684\u5e2e\u52a9\u7cfb\u7edf\u3002</p> <p>\u53ef\u4ee5\u7406\u89e3\u7684\u662f\uff0c\u6bcf\u79cd\u5f15\u64ce\u7684\u914d\u7f6e\u683c\u5f0f\u90fd\u662f\u4e0d\u540c\u7684\uff0c\u4f8b\u5982 RDBMS \u6570\u636e\u5e93\u548c AWS \u663e\u793a\u9700\u8981\u5b8c\u5168\u4e0d\u540c\u7684\u914d\u7f6e\u3002</p> <p>Vault \u7684\u8bbe\u8ba1\u8005\u660e\u767d\u8fd9\u4e00\u70b9\uff0c\u5e76\u4e14\u4e3a\u4e86\u8f85\u52a9\u6211\u4eec\u914d\u7f6e\u4e0d\u540c\u7684\u5f15\u64ce\uff0c\u51cf\u5c11\u8bb0\u5fc6\u8d1f\u62c5\uff0c\u4e3a\u6bcf\u79cd\u5185\u7f6e\u7684\u5f15\u64ce\u90fd\u63d0\u4f9b\u4e86\u5e2e\u52a9\u4fe1\u606f\u3002\u663e\u793a\u5e2e\u52a9\u4fe1\u606f\u7684\u547d\u4ee4\u53eb\u505a path-help\u3002</p> <p>\u53ef\u80fd\u6709\u70b9\u4e0d\u597d\u7406\u89e3\u7684\u5730\u65b9\u5728\u4e8e\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u547d\u4ee4\u53eb\u505a path-help\uff0c \u800c\u4e0d\u662f secret-help \u6216\u8005 engine-help\uff1f\u5b98\u65b9\u6587\u6863\u5e76\u6ca1\u6709\u660e\u786e\u7684\u8bf4\u660e\u3002</p> <p>\u6211\u7684\u7406\u89e3\u662f\uff0c\u51fa\u4e8e\u6027\u80fd\u4e0a\u7684\u8003\u8651\uff0cVault \u5e76\u4e0d\u4f1a\u5728\u542f\u52a8\u65f6\u521b\u5efa\u6240\u6709\u7684\u5f15\u64ce\uff0c\u800c\u662f\u5728\u628a\u5f15\u64ce\u52a0\u8f7d\u5230\u8def\u5f84\u4e0a\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u6309\u7167\u9700\u8981\u751f\u6210\u5fc5\u8981\u7684\u5f15\u64ce\u5b9e\u4f8b\u3002</p> <p>\u5982\u679c\u67d0\u4e2a\u5f15\u64ce\u6ca1\u6709\u52a0\u8f7d\u5230\u7279\u5b9a\u7684\u8def\u5f84\u4e0a\uff0c\u90a3\u4e48 Vault \u4e0d\u4f1a\u5c06\u5176\u5b9e\u4f8b\u5316\uff0c\u81ea\u7136\u4e5f\u65e0\u6cd5\u8bfb\u53d6\u5b83\u7684\u5e2e\u52a9\u4fe1\u606f\u3002</p> <p>\u56e0\u6b64\uff0c\u8bfb\u53d6\u7684\u5e2e\u52a9\u4fe1\u606f\u603b\u662f\u6309\u7167\u8def\u5f84\uff08Path\uff09\u800c\u975e\u5f15\u64ce\u6765\u6307\u5b9a\u7684\uff0c\u6240\u4ee5\u53eb\u505a path-help\u3002\uff08\u8fd9\u5f53\u7136\u662f\u6211\u81ea\u5df1\u7684\u7406\u89e3\uff0c\u6709\u4e0d\u5bf9\u7684\u5730\u65b9\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\u3002\uff09</p> <p>\u7406\u8bba\u8bf4\u7684\u591f\u591a\u4e86\uff0c\u6211\u4eec\u8fd8\u662f\u6765\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u5e2e\u52a9\u5185\u5bb9\u3002</p> <pre><code>$ vault path-help aws\n## DESCRIPTION\n\nThe AWS backend dynamically generates AWS access keys for a set of\nIAM policies. The AWS access keys have a configurable lease set and\nare automatically revoked at the end of the lease.\n\nAfter mounting this backend, credentials to generate IAM keys must\nbe configured with the \"root\" path and policies must be written using\nthe \"roles/\" endpoints before any access keys can be generated.\n\n## PATHS\n\nThe following paths are supported by this backend. To view help for\nany of the paths below, use the help command with any route matching\nthe path pattern. Note that depending on the policy of your auth token,\nyou may or may not be able to access certain paths.\n\n    ^config/lease$\n        Configure the default lease information for generated credentials.\n\n    ^config/root$\n        Configure the root credentials that are used to manage IAM.\n\n    ^creds/(?P&lt;name&gt;\\w(([\\w-.]+)?\\w)?)$\n        Generate an access key pair for a specific role.\n\n    ^roles/(?P&lt;name&gt;\\w(([\\w-.]+)?\\w)?)$\n        Read, write and reference IAM policies that access keys can be made for.\n\n    ^roles/?$\n        List the existing roles in this backend\n\n    ^sts/(?P&lt;name&gt;\\w(([\\w-.]+)?\\w)?)$\n        Generate an access key pair + security token for a specific role.\n</code></pre> <p>\u5e2e\u52a9\u5185\u5bb9\u4e2d\u6700\u9700\u8981\u6ce8\u610f\u7684\u662f\u4ee5\u6b63\u5219\u8868\u8fbe\u5f0f\u5f62\u5f0f\u6307\u5b9a\u7684\u5404\u79cd\u8def\u5f84\uff0c\u540c\u65f6\u4e5f\u5305\u542b\u8fd9\u4e9b\u8def\u5f84\u7684\u542b\u4e49\u3002\u5bf9\u4e8e\u7279\u5b9a\u7684\u8def\u5f84\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u67e5\u770b\u5176\u8be6\u7ec6\u7684\u5185\u5bb9\u4fe1\u606f\uff1a</p> <pre><code>$ vault path-help aws/config/root\nRequest:        config/root\nMatching Route: ^config/root$\n\nConfigure the root credentials that are used to manage IAM.\n\n## PARAMETERS\n\n    access_key (string)\n        Access key with permission to create new keys.\n\n    iam_endpoint (string)\n        Endpoint to custom IAM server URL\n\n    region (string)\n        Region for API calls.\n\n    secret_key (string)\n        Secret key with permission to create new keys.\n\n    sts_endpoint (string)\n        Endpoint to custom STS server URL\n\n## DESCRIPTION\n\nBefore doing anything, the AWS backend needs credentials that are able\nto manage IAM policies, users, access keys, etc. This endpoint is used\nto configure those credentials. They don't necessarilly need to be root\nkeys as long as they have permission to manage IAM.\n</code></pre> <p>path-help \u5141\u8bb8\u6211\u4eec\u68c0\u67e5\u6bcf\u4e2a Path \u4e0b\u6240\u9700\u8981\u7684\u5404\u79cd\u53c2\u6570\u53ca\u5176\u5177\u4f53\u542b\u4e49\uff0c\u8fd9\u5bf9\u4e8e\u6211\u4eec\u914d\u7f6e\u5f15\u64ce\u6765\u8bf4\u662f\u975e\u5e38\u6709\u7528\u7684\u4fe1\u606f\u3002\u6211\u4eec\u518d\u770b\u770b\u5185\u7f6e\u7684 kv \u5f15\u64ce\u7684\u5e2e\u52a9\u4fe1\u606f\uff1a</p> <pre><code>$ vault path-help secret\n## DESCRIPTION\n\nThe kv backend reads and writes arbitrary secrets to the backend.\nThe secrets are encrypted/decrypted by Vault: they are never stored\nunencrypted in the backend and the backend never has an opportunity to\nsee the unencrypted value.\n\nTTLs can be set on a per-secret basis. These TTLs will be sent down\nwhen that secret is read, and it is assumed that some outside process will\nrevoke and/or replace the secret at that path.\n\n## PATHS\n\nThe following paths are supported by this backend. To view help for\nany of the paths below, use the help command with any route matching\nthe path pattern. Note that depending on the policy of your auth token,\nyou may or may not be able to access certain paths.\n\n    ^.*$\n        Pass-through secret storage to the storage backend, allowing you to\n        read/write arbitrary data into secret storage.\n</code></pre> <p>KV \u5f15\u64ce\u975e\u5e38\u7b80\u5355\u2014\u2014\u5b83\u4e0d\u9700\u8981\u4efb\u4f55\u914d\u7f6e\u53c2\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u5199\u5165\u4efb\u610f\u8def\u5f84\u4e0b\u7684\u4efb\u610f\u53c2\u6570\u503c\u3002</p> <p>\u4e0d\u8fc7\u56de\u60f3\u4e00\u4e0b\uff0c\u5bf9\u5f15\u64ce\u7684\u64cd\u4f5c\u5b9e\u9645\u4e0a\u662f\u901a\u8fc7 RESTful \u63a5\u53e3\u8fdb\u884c\u7684\uff0c\u800c\u5bf9\u7279\u5b9a\u8def\u5f84\u7684\u8bfb\u5199\u6700\u7ec8\u4f1a\u6620\u5c04\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684 URL\uff1ahttp://127.0.0.1:8200/v1/foo/bar\u3002</p> <p>\u8003\u8651\u5230 URL \u7f16\u7801\u53ef\u80fd\u5f15\u8d77\u7684\u6f5c\u5728\u95ee\u9898\uff0c\u6211\u8fd8\u662f\u5efa\u8bae\u4f60\u4e0d\u8981\u5728\u8def\u5f84\u548c\u53c2\u6570\u540d\u4e2d\u4f7f\u7528\u4efb\u4f55\u7279\u6b8a\u5b57\u7b26\u3001\u7a7a\u767d\u6216\u8005\u4e2d\u6587</p>"},{"location":"vault/4vault_auth/","title":"4 \u79c1\u5bc6\u4fe1\u606f\u7ba1\u7406\u5229\u5668 HashiCorp Vault\u2014\u2014\u9a8c\u8bc1\u548c\u6388\u6743","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u90fd\u662f\u4f7f\u7528 vault \u5ba2\u6237\u7aef\u76f4\u63a5\u8bbf\u95ee\u670d\u52a1\u5668\uff0c\u5e76\u672a\u8fdb\u884c\u4efb\u4f55\u767b\u5f55\u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u5f00\u53d1\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u5c06\u7528\u6237\u767b\u5f55\u4e3a root \u7528\u6237\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u7b80\u5316\u6d4b\u8bd5\uff0c\u907f\u514d\u5728\u767b\u5f55\u95ee\u9898\u4e0a\u5361\u4f4f\u521d\u5b66\u8005\u3002\u4f46\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8fd9\u663e\u7136\u662f\u975e\u5e38\u4e0d\u5b89\u5168\u7684\u3002\u518d\u91cd\u590d\u4e00\u6b21\uff0c\u7edd\u5bf9\u4e0d\u8981\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528\u5f00\u53d1\u6a21\u5f0f\u3002</p>"},{"location":"vault/4vault_auth/#1-auth-method","title":"1 \u9a8c\u8bc1\u65b9\u6cd5\uff08Auth Method\uff09","text":"<p>\u5728\u7528\u6237\u8ba4\u8bc1\u7684\u95ee\u9898\u4e0a\uff0cVault \u540c\u6837\u4f7f\u7528\u4e86\u7075\u6d3b\u7684\u63d2\u4ef6\u67b6\u6784\uff0c\u5141\u8bb8\u591a\u79cd\u8ba4\u8bc1\u624b\u6bb5\uff0cVault \u5c06\u5176\u79f0\u4e3a\u9a8c\u8bc1\u65b9\u6cd5\uff08Auth method\uff09</p> <ul> <li>AppRole</li> <li>AWS</li> <li>Google Cloud</li> <li>Kubernetes</li> <li>Github</li> <li>LDAP</li> <li>Okta</li> <li>RADIUS</li> <li>TLS Certificates</li> <li>Tokens</li> </ul> <p>\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\uff0cToken \u662f Vault \u5185\u7f6e\u7684\u9a8c\u8bc1\u65b9\u6cd5\uff0c\u542f\u52a8\u65f6\u5373\u88ab\u52a0\u8f7d\uff0c\u4e14\u4e0d\u80fd\u7981\u7528\u3002\u56de\u5fc6\u4e00\u4e0b\uff0c\u670d\u52a1\u5668\u542f\u52a8\u65f6\u4f1a\u8f93\u51fa Root Token\uff0c\u4f7f\u7528 Root token \u767b\u5f55\u7684\u7528\u6237\u5177\u6709\u7cfb\u7edf\u6700\u9ad8\u7684\u8bbf\u95ee\u6743\u9650\u3002Token \u662f\u53ef\u7ee7\u627f\u7684\uff0c\u8fd9\u4e2a\u7ee7\u627f\u5305\u62ec\u4e24\u65b9\u9762\u7684\u542b\u4e49\uff1a</p> <ul> <li>\u6301\u6709 Token \u7684\u7528\u6237\u521b\u5efa\u65b0\u7684 Token\uff08Child token\uff09\uff0c\u9664\u975e\u7279\u522b\u6307\u5b9a\uff0c\u5426\u5219 Child token \u6743\u9650\u548c\u539f\u6765\u7684 Token \u76f8\u540c\uff1b</li> <li>\u5f53\u56de\u6536\uff08Revoke\uff09\u67d0\u4e2a Token \u65f6\uff0c\u5176\u6240\u521b\u5efa\u7684 Child Token\uff0c\u4ee5\u53ca Child Token \u7684 Child Token... \u90fd\u4f1a\u88ab\u4e00\u5e76\u5220\u9664\u3002</li> </ul>"},{"location":"vault/4vault_auth/#2-token","title":"2 Token \u9a8c\u8bc1\u65b9\u6cd5","text":"<p>\u521b\u5efa\u65b0\u4e00\u4e2a\u65b0 Token\uff1a</p> <pre><code>$ vault token create\nKey                Value\n---                -----\ntoken              0fea4b53-9e31-cd50-c5ae-104f66192297\ntoken_accessor     14ec0d45-cfed-6a84-8498-923194e361df\ntoken_duration     \u221e\ntoken_renewable    false\ntoken_policies     [root]\n</code></pre> <p>\u5f53 Token \u4e0d\u518d\u4f7f\u7528\u540e\uff0c\u53ef\u4ee5\u7528 revoke \u64a4\u9500\uff1a</p> <pre><code>$ vault token revoke 0fea4b53-9e31-cd50-c5ae-104f66192297\nSuccess! Revoked token (if it existed)\n</code></pre> <p>\u91cd\u590d\u7b2c\u4e00\u6b65\u7684\u64cd\u4f5c\u518d\u521b\u5efa\u4e00\u4e2a Token\u3002\u7136\u540e\u7528\u8be5 Token \u767b\u5f55\uff1a</p> <pre><code>$ vault login bfdd4016-651a-91d1-b24f-7d032e9127fe\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                Value\n---                -----\ntoken              bfdd4016-651a-91d1-b24f-7d032e9127fe\ntoken_accessor     e435c4ed-0662-3298-9644-7554fe4a2729\ntoken_duration     \u221e\ntoken_renewable    false\ntoken_policies     [root]\n</code></pre> <p>\u6ce8\u610f\uff0c\u867d\u7136 Token \u65b9\u6cd5\u975e\u5e38\u7b80\u4fbf\u6613\u7528\uff0c\u4f46\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u652f\u6301\u81ea\u8eab\u7684\u8fd0\u884c\uff0c\u5b89\u5168\u6027\u5e76\u4e0d\u662f\u975e\u5e38\u9ad8\u3002</p> <p>\u5bf9\u4e8e\u771f\u6b63\u7684\u7528\u6237/\u673a\u5668\u8ba4\u8bc1\u573a\u666f\uff0cVault \u5b98\u65b9\u63a8\u8350\u4f7f\u7528\u5176\u4ed6\u66f4\u52a0\u6210\u719f\u7684\u673a\u5236\uff0c\u4f8b\u5982 LDAP\uff0cGithub\uff0cAppRole \u7b49\uff0c\u5e76\u4e14\u8fd9\u4e9b\u65b9\u6cd5\u901a\u5e38\u6709\u66f4\u597d\u7684\u5de5\u5177\u652f\u6301\u3002</p>"},{"location":"vault/4vault_auth/#3-auth-method","title":"3 \u5176\u4ed6 Auth Method","text":"<p>\u8bf4\u660e\uff1a\u5728 Vault \u7684\u5b98\u65b9\u6587\u6863\u4e2d\uff0c\u4f7f\u7528 Github \u4f5c\u4e3a Auth Method \u7684\u4f8b\u5b50\u3002\u9057\u61be\u7684\u662f\uff0cGithub \u7684\u7528\u6237\u9a8c\u8bc1\u5fc5\u987b\u4f7f\u7528\u7ec4\u7ec7\u8d26\u53f7\uff0c\u800c\u6211\u53ea\u6709\u4e2a\u4eba\u8d26\u6237\uff0c\u6240\u4ee5\u8fd9\u91cc\u65e0\u6cd5\u6f14\u793a\u3002\u6709 Github \u7ec4\u7ec7\u8d26\u6237\u7684\u540c\u5b66\u53ef\u4ee5\u6309\u7167 \u5b98\u65b9\u6587\u6863 \u4e2d\u7684\u6b65\u9aa4\u6765\u64cd\u4f5c\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u7528\u53e6\u4e00\u4e2a\u7b80\u5355\u800c\u5e38\u7528\u7684 Auth Method \u6765\u6f14\u793a\uff0c\u8fd9\u5c31\u662f userpass\u3002\u987e\u540d\u601d\u4e49\uff0cuserpass \u9700\u8981\u7528\u6237\u540d/\u5bc6\u7801\u5bf9\u6765\u8fdb\u884c\u8ba4\u8bc1\uff0c\u8fd9\u548c\u5927\u591a\u6570\u7f51\u7ad9\u7684\u7528\u6237\u7ba1\u7406\u673a\u5236\u662f\u4e00\u81f4\u7684\u3002</p> <p>\u4e3a\u4e86\u4f7f\u7528 userpass \u9a8c\u8bc1\u65b9\u6cd5\uff0c\u9996\u5148\u9700\u8981\u542f\u7528\u5b83\uff1a</p> <pre><code>$ vault auth enable -path=userpass userpass\nSuccess! Enabled userpass auth method at: userpass/\n</code></pre> <p>\u548c\u5176\u4ed6\u7684 Vault \u5bf9\u8c61\u7c7b\u4f3c\uff0c\u4f60\u53ef\u4ee5\u7528\u5185\u7f6e\u7684 path-help \u6765\u67e5\u770b\u8be5\u65b9\u6cd5\u7684\u5e2e\u52a9\u4fe1\u606f\uff1a</p> <pre><code>$ vault path-help auth/userpass\n</code></pre> <p>\u7136\u540e\uff0c\u6dfb\u52a0\u7528\u6237/\u5bc6\u7801\u5bf9\uff1a</p> <pre><code>$ vault write auth/userpass/users/bob password=male policies=admin\nSuccess! Data written to: auth/userpass/users/bob\n\n$ vault write auth/userpass/users/alice password=female policies=admin\nSuccess! Data written to: auth/userpass/users/alice\n</code></pre> <p>Policies \u53c2\u6570\u548c\u7528\u6237\u6743\u9650\u6709\u5173\uff0c\u540e\u9762\u6211\u4eec\u518d\u8bb2\u3002\u73b0\u5728\u4f60\u53ef\u4ee5\u7528\u7528\u6237\u540d/\u5bc6\u7801\u767b\u5f55\u4e86\uff1a</p> <pre><code>$ vault login -method=userpass username=bob password=male\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                    Value\n---                    -----\ntoken                  9e14802b-549b-d0b1-3212-b8b7fbf33f73\ntoken_accessor         2f411ac4-22d1-7761-8c38-9f668e8c411e\ntoken_duration         768h\ntoken_renewable        true\ntoken_policies         [admin default]\ntoken_meta_username    bob\n</code></pre>"},{"location":"vault/4vault_auth/#4","title":"4 \u6388\u6743","text":"<p>\u4e0a\u9762\u7684\u64cd\u4f5c\u8bb2\u8ff0\u7684\u90fd\u662f\u7528\u6237\u8ba4\u8bc1\uff08authentication\uff09\u7684\u5185\u5bb9\uff0c\u5176\u4e2d\u4e5f\u6d89\u53ca\u5230\u4e00\u4e9b\u6388\u6743\uff08authorization\uff09\u7684\u53c2\u6570\uff0c\u4f46\u5e76\u672a\u6df1\u5165\u8bb2\u89e3\u3002\u73b0\u5728\u6211\u4eec\u5c31\u6765\u4ecb\u7ecd\u5173\u4e8e\u6388\u6743\u7684\u5185\u5bb9</p> <p>\u4e3a\u4e86\u5b9e\u73b0\u6388\u6743\uff0c\u9700\u8981\u5206\u4e24\u4e2a\u6b65\u9aa4\uff1a</p> <ol> <li>\u6307\u5b9a\u6388\u6743\u7b56\u7565\uff08Policy\uff09\u3002\u4f60\u53ef\u4ee5\u628a Vault Policy \u7406\u89e3\u4e3a\u4e00\u822c\u7cfb\u7edf\u4e2d\u5e38\u89c1\u7684\u89d2\u8272\uff08Role\uff09\uff0c\u5b83\u5b9a\u4e49\u4e3a\u4e00\u4e9b\u64cd\u4f5c\u6743\u9650\u7684\u96c6\u5408\u3002</li> <li>\u5c06\u7b56\u7565\uff08Policy\uff09\u548c\u7279\u5b9a\u7684\u767b\u5f55\u8eab\u4efd\u4fe1\u606f\u5173\u8054\u8d77\u6765\u3002</li> </ol> <p>\u7b56\u7565\u662f\u7528 HCL \u8bed\u8a00\u7f16\u5199\u7684\u3002HCL \u662f HashiCorp \u521b\u9020\u7684\u3001\u4e13\u95e8\u7528\u4e8e\u914d\u7f6e\u6587\u4ef6\u7684\u8bed\u8a00\u683c\u5f0f\uff0c\u7c7b\u4f3c\u4e8e Json/YAML\uff08\u4e3a\u4ec0\u4e48\u4e0d\u7528\u73b0\u6210\u7684 Json/YAML \u5462\uff1f\u4e0a\u9762\u7684\u94fe\u63a5\u91cc\u6709\u6765\u81ea\u5b98\u65b9\u7684\u89e3\u91ca\u3002\uff09</p> <p>HCL \u7684\u683c\u5f0f\u5e76\u4e0d\u590d\u6742\u3002\u4e0b\u9762\u6211\u4eec\u6765\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7b56\u7565\uff1a</p> <pre><code>path \"secret/*\" {\n  capabilities = [\"create\"]\n}\n\npath \"secret/foo\" {\n  capabilities = [\"read\"]\n}\n</code></pre> <p>\u89c4\u5219\u5f88\u7b80\u5355\uff1a\u6211\u4eec\u5e0c\u671b\u5bf9 secret/ \u8def\u5f84\u4e0b\u7684\u4e00\u822c\u6570\u636e\u6709\u5b8c\u5168\u7684\u8bfb\u5199\u6743\u9650\uff0c\u4f46 secret/foo \u5219\u662f\u53ea\u8bfb\u7684\u3002</p> <p>\u540c\u65f6\u53ef\u4ee5\u770b\u51fa\uff0cHCL \u7684\u4f5c\u7528\u57df\u89c4\u5219\u7c7b\u4f3c\u4e8e CSS\uff0c\u540e\u9762\u7684\u89c4\u5219\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u3002</p> <p>\u5982\u679c\u6211\u4eec\u62c5\u5fc3\u89c4\u5219\u6709\u8bed\u6cd5\u9519\u8bef\uff0c\u53ef\u4ee5\u7528 fmt \u547d\u4ee4\u68c0\u67e5\uff1a</p> <pre><code>$ vault policy fmt my-policy.hcl \nSuccess! Formatted policy: my-policy.hcl\n</code></pre> <p>fmt \u4e0d\u4ec5\u4f1a\u68c0\u67e5\u6587\u4ef6\u4e2d\u6709\u65e0\u8bed\u6cd5\u9519\u8bef\uff0c\u8fd8\u4f1a\u628a\u6587\u4ef6\u683c\u5f0f\u6574\u7406\u6210\u6807\u51c6\u7684\u5f62\u5f0f\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u6587\u4ef6\u5bfc\u5165\u7cfb\u7edf\uff0c\u751f\u6210\u4e00\u4e2a\u5bf9\u5e94\u7684\u7b56\u7565\uff08Policy\uff09\u3002\u5982\u679c\u8fd9\u4e00\u6b65\u53d1\u751f 403 \u9519\u8bef\uff0c\u8bf7\u68c0\u67e5\u4f60\u662f\u5426\u662f\u4ee5 Root Token \u767b\u5f55\uff1a</p> <pre><code>$ vault policy write my-policy my-policy.hcl\nSuccess! Uploaded policy: my-policy\n</code></pre> <p>\u6211\u4eec\u6839\u636e\u8be5\u6743\u9650\u65b0\u5efa\u4e00\u4e2a\u767b\u5f55 Token\uff1a</p> <pre><code>vault token create -policy=my-policy\nKey                Value\n---                -----\ntoken              26a6addd-485f-3203-9b2a-a426d3c91030\ntoken_accessor     26006593-9106-8dcd-607b-67646b5f5052\ntoken_duration     768h\ntoken_renewable    true\ntoken_policies     [default my-policy]\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u65b0 Token \u7684\u6743\u9650\u5df2\u7ecf\u6b63\u786e\u8bbe\u7f6e\u4e86\u3002</p> <p>\u7528\u65b0\u7684 Token \u767b\u5f55\uff0c\u5e76\u9a8c\u8bc1\u6743\u9650\u662f\u5426\u751f\u6548\uff1a</p> <pre><code>$ vault login 26a6addd-485f-3203-9b2a-a426d3c91030\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                Value\n---                -----\ntoken              26a6addd-485f-3203-9b2a-a426d3c91030\ntoken_accessor     26006593-9106-8dcd-607b-67646b5f5052\ntoken_duration     767h58m50s\ntoken_renewable    true\ntoken_policies     [default my-policy]\n$ vault write secret/hello name=world\nSuccess! Data written to: secret/hello\n$ vault write secret/foo name=world\nError writing data to secret/foo: Error making API request.\n\nURL: PUT http://127.0.0.1:8200/v1/secret/foo\nCode: 403. Errors:\n\n* permission denied\n</code></pre> <p>\u6700\u540e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u628a\u65b0\u7684\u7b56\u7565\u548c\u7528\u6237\u9a8c\u8bc1\u65b9\u6cd5\u5173\u8054\u8d77\u6765\uff1a</p> <pre><code>$ vault write auth/userpass/users/bob password=male policies=my-policy\nSuccess! Data written to: auth/userpass/users/bob\n$ vault login -method=userpass username=bob password=male\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                    Value\n---                    -----\ntoken                  66c0cd16-4dea-5180-a52f-a0b19e2f8341\ntoken_accessor         88690d6d-fb5f-e3aa-4d5f-50ecbf78ae2b\ntoken_duration         768h\ntoken_renewable        true\ntoken_policies         [default my-policy]\ntoken_meta_username    bob\n</code></pre> <p>\u6211\u4eec\u770b\u5230\u65b0\u7684\u7b56\u7565\u786e\u5b9e\u5e94\u7528\u5230\u7528\u6237\u4e86\u3002</p>"},{"location":"vault/5vault_deploy/","title":"5 \u79c1\u5bc6\u4fe1\u606f\u7ba1\u7406\u5229\u5668 HashiCorp Vault\u2014\u2014\u90e8\u7f72","text":""},{"location":"vault/5vault_deploy/#1","title":"1 \u5b58\u50a8\u5f15\u64ce","text":"<p>\u5728\u90e8\u7f72\u4e4b\u524d\u9996\u5148\u8981\u8003\u8651\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u6211\u4eec\u8981\u5982\u4f55\u4fdd\u5b58 Vault \u7684\u6570\u636e\u3002</p> <p>\u56de\u5fc6\u4e00\u4e0b\uff0c\u5728\u5f00\u53d1\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u8f93\u51fa\u7684\u4fe1\u606f\u4e2d\u6709\u8fd9\u4e48\u4e00\u6761\uff1a</p> <pre><code>Storage: inmem\n</code></pre> <p>\u8fd9\u610f\u5473\u7740\u5f00\u53d1\u6a21\u5f0f\u4e0b\uff0c\u6240\u6709\u4fe1\u606f\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u670d\u52a1\u5668\u5173\u95ed\u6570\u636e\u5373\u6d88\u5931\uff0c\u8fd9\u5bf9\u4e8e\u751f\u4ea7\u73af\u5883\u663e\u7136\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\u3002</p> <p>\u800c Vault \u7684\u7075\u6d3b\u6027\u5728\u8fd9\u91cc\u53c8\u4e00\u6b21\u5f97\u5230\u4f53\u73b0\uff0cinmem \u662f\u7cfb\u7edf\u652f\u6301\u7684\u5b58\u50a8\u5f15\u64ce\u4e4b\u4e00\uff0c\u5176\u4ed6\u5f15\u64ce\u8fd8\u5305\u62ec</p> <p></p>"},{"location":"vault/5vault_deploy/#2","title":"2 \u670d\u52a1\u5668\u914d\u7f6e","text":"<p>\u5b58\u50a8\u5f15\u64ce\u5df2\u7ecf\u51b3\u5b9a\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u8981\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u5668\u914d\u7f6e\u6587\u4ef6\uff0c\u670d\u52a1\u5668\u5c06\u6839\u636e\u8be5\u914d\u7f6e\u51b3\u5b9a\u5982\u4f55\u542f\u52a8\u3002\u548c\u6388\u6743\u7b56\u7565\uff08Policy\uff09\u7c7b\u4f3c\uff0c\u670d\u52a1\u5668\u914d\u7f6e\u4e5f\u662f\u4f7f\u7528 HCL \u8bed\u8a00\u7f16\u5199\u7684\uff0c\u76ee\u524d\u6211\u4eec\u4fdd\u6301\u7b80\u5355\uff0c\u53ea\u751f\u6210\u5fc5\u8981\u7684\u4fe1\u606f\uff1a\u5b58\u50a8\u5f15\u64ce\u548c\u4fa6\u542c\u5730\u5740\u3002</p> <pre><code>storage \"file\" {\n    path = \"/var/opt/vault\"\n}\n\nlistener \"tcp\" {\n    address = \"127.0.0.1:8200\"\n    tls_disable = 1\n}\n</code></pre> <p>\u5f53\u7136\uff0c\u4f60\u9700\u8981\u4fdd\u8bc1\u5bf9 path \u6307\u5b9a\u7684\u8def\u5f84\u6709\u8db3\u591f\u7684\u8bfb\u5199\u6743\u9650\u3002\u5982\u679c\u62c5\u5fc3\u6587\u4ef6\u6709\u95ee\u9898\u7684\u8bdd\uff0c\u53ef\u4ee5\u8fd0\u884c <code>vault policy fmt server.hcl</code> \u68c0\u67e5\u4e00\u4e0b\u3002</p> <p>\u7f51\u7edc\u914d\u7f6e\u4e2d\u7684 <code>tls_disable</code> \u6307\u5b9a\u4e0d\u4f7f\u7528 TLS\uff0c\u8fd9\u65f6\u6570\u636e\u4f20\u8f93\u662f\u660e\u6587\u7684\uff0c\u5b89\u5168\u6027\u4e0d\u591f\u9ad8\u3002\u5982\u679c\u9700\u8981\u4f7f\u7528 TLS \u4ee5\u52a0\u5f3a\u5b89\u5168\u6027\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd8\u9700\u8981\u5728\u8fd9\u91cc\u914d\u7f6e\u8bc1\u4e66\uff0c\u8be6\u7ec6\u7684\u5185\u5bb9\u8bf7\u53c2\u8003 tcp \u914d\u7f6e\u3002</p>"},{"location":"vault/5vault_deploy/#3","title":"3 \u542f\u52a8\u670d\u52a1","text":"<p>\u73b0\u5728\uff0c\u6211\u4eec\u6839\u636e\u4e0a\u9762\u521b\u5efa\u7684\u914d\u7f6e\u6587\u4ef6\u542f\u52a8\u670d\u52a1\uff1a</p> <pre><code># vault server -config=server.hcl\n==&gt; Vault server configuration:\n\n                     Cgo: disabled\n              Listener 1: tcp (addr: \"127.0.0.1:8200\", cluster address: \"127.0.0.1:8201\", tls: \"disabled\")\n               Log Level: info\n                   Mlock: supported: true, enabled: true\n                 Storage: file\n                 Version: Vault v0.9.3\n             Version Sha: 5acd6a21d5a69ab49d0f7c0bf540123a9b2c696d\n\n==&gt; Vault server started! Log data will stream in below:\n</code></pre> <p>\u8bf4\u660e\uff1a\u5728\u67d0\u4e9b\u7cfb\u7edf\u4e0a\u542f\u52a8\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u9047\u5230\u65e0\u6cd5\u4f7f\u7528 mlock \u7684\u63d0\u793a\u3002\u5982\u679c\u9047\u5230\u6b64\u95ee\u9898\u7684\u8bdd\uff0c\u8bf7\u6309\u5982\u4e0b\u6b65\u9aa4\u89e3\u51b3\uff1a </p> <ul> <li>\u5982\u679c\u4ec5\u4ec5\u662f warning\uff0c\u670d\u52a1\u5668\u4ecd\u7136\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c\u7684\u8bdd\uff0c\u90a3\u4e48\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e2a\u63d0\u793a\uff1b </li> <li>\u5982\u679c\u4f60\u662f\u4ee5\u666e\u901a\u7528\u6237\u8fd0\u884c\u670d\u52a1\u5668\u7684\u8bdd\uff0c\u90a3\u4e48\u6700\u597d\u662f\u6362\u7528 root \u8eab\u4efd\u542f\u52a8\u670d\u52a1\uff1b </li> <li>\u8981\u662f\u4e0a\u8ff0\u65b9\u6cd5\u90fd\u4e0d\u884c\u7684\u8bdd\uff0c\u90a3\u4e48\u8bf7\u6309\u7167 \u8fd9\u91cc\u7684\u914d\u7f6e \u7981\u7528 mlock\u3002</li> </ul> <p>\u73b0\u5728\uff0c\u670d\u52a1\u5668\u5df2\u7ecf\u542f\u52a8\u6210\u529f\uff0c\u4f46\u5e76\u6ca1\u6709 Root Token \u53ef\u7528\u3002\u5982\u679c\u5019\u9a6c\u4e0a\u53bb\u5c1d\u8bd5\u8bfb\u5199\u6570\u636e\u7684\u8bdd\uff0c\u4f1a\u53d1\u73b0\u8fd9\u6837\u7684\u9519\u8bef\uff1a</p> <pre><code>vault write secret/hello name=world\nError writing data to secret/hello: Error making API request.\nURL: PUT http://127.0.0.1:8200/v1/secret/hello\nCode: 503. Errors:\n* Vault is sealed\n</code></pre> <p>\u9519\u8bef\u4fe1\u606f\u63d0\u793a\u6211\u4eec Vault \u88ab\u5bc6\u5c01\uff08Sealed\uff09\u4e86\uff0c\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f</p>"},{"location":"vault/5vault_deploy/#vault","title":"\u89e3\u5c01 Vault","text":"<p>Vault \u5bf9\u4e8e\u6570\u636e\u4fdd\u62a4\u662f\u975e\u5e38\u91cd\u89c6\u7684\u3002</p> <p>\u8fd9\u4f53\u73b0\u5728\u670d\u52a1\u5668\u542f\u52a8\u540e\uff0c\u5e76\u4e0d\u80fd\u9a6c\u4e0a\u8bbf\u95ee\u5176\u6570\u636e\uff0c\u800c\u5fc5\u987b\u7ecf\u8fc7\u4e00\u4e2a\u89e3\u5c01\uff08Unseal\uff09\u7684\u52a8\u4f5c\u3002</p> <p>\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u662f\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u89e3\u5c01\u670d\u52a1\u5668\uff0cVault \u53c8\u89c4\u5b9a\uff1a\u5bf9\u4e8e\u5168\u65b0\u542f\u52a8\u7684\u670d\u52a1\uff0c\u5fc5\u987b\u7ecf\u8fc7\u4e00\u4e2a\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\uff08Initialize\uff09\uff0c\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u4f1a\u751f\u6210 Unseal Key, \u4ee5\u540e\u5fc5\u987b\u4f7f\u7528 Unseal Key \u6765\u89e3\u5c01\u670d\u52a1\u5668\u3002</p> <p>\u4e3a\u4e86\u8fdb\u4e00\u6b65\u52a0\u5f3a\u5b89\u5168\u6027\uff0cVault \u751a\u81f3\u8fd8\u89c4\u5b9a\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u9700\u8981\u81f3\u5c11 3 \u4e2a Unseal Key \u624d\u80fd\u89e3\u5c01\u670d\u52a1\u5668\u3002\u8fd9\u6709\u70b9\u50cf\u6c11\u4e3b\u6295\u7968\u7684\u610f\u601d\u4e86\uff1a\u5982\u679c\u67d0\u4e2a\u7528\u6237\u662f\u6076\u610f\u7684\uff0c\u90a3\u4e48\u5355\u51ed\u4ed6\u81ea\u5df1\u65e0\u6cd5\u8bbf\u95ee\u670d\u52a1\u5668\uff0c\u8fd8\u5fc5\u987b\u7ecf\u8fc7\u5176\u4ed6 2 \u4e2a\u4eba\u7684\u540c\u610f\uff0c\u670d\u52a1\u5668\u624d\u80fd\u5f00\u542f\u3002</p> <p>\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u786e\u662f\u8bbe\u8ba1\u5f97\u76f8\u5f53\u5b89\u5168\uff0c\u4e0d\u8fc7\u76f8\u5e94\u7684\u670d\u52a1\u5668\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u4e5f\u6bd4\u8f83\u590d\u6742\u3002\u6211\u4eec\u6765\u4e00\u6b65\u4e00\u6b65\u5b8c\u6210\u8fd9\u4e2a\u64cd\u4f5c\u3002</p> <p>\u9996\u5148\u6211\u4eec\u9700\u8981\u6267\u884c operator \u547d\u4ee4\u6765\u8fdb\u884c\u521d\u59cb\u5316\u3002\u6ce8\u610f\u521d\u59cb\u5316\u53ea\u80fd\u5bf9\u65b0\u7684\u670d\u52a1\u5668\u6267\u884c\u4e00\u6b21\uff0c\u5f53\u670d\u52a1\u5668\u4e0a\u5df2\u7ecf\u6709\u6570\u636e\u4ee5\u540e\uff0c\u5c31\u4e0d\u5141\u8bb8\u518d\u6267\u884c\u8fd9\u4e2a\u52a8\u4f5c\u4e86\u3002</p> <pre><code>$ vault operator init\nUnseal Key 1: /bEBj01yMkDZgYtwzWczC+m8tclpl/7TPoxPBAz5FToE\nUnseal Key 2: VDEb4gFwllgSMEOKWx1DZwut9atdY3PyLzM/YCK2Cbo6\nUnseal Key 3: WAd8skYyTp8+Iybq/Mp8WDrKb0QhK/xvqcl7u4Rha32e\nUnseal Key 4: OZI2i0v1yhf7hF8j1p/AUui0oTQ7cQjDLKF6QnE9cs0U\nUnseal Key 5: OoF3fyXH2lkcuu1Si2UQbXaGvZp0gr/cJkUnt6N2O9Yh\n\nInitial Root Token: 444b8cb7-e58d-9e57-076a-fe0763f06248\n\nVault initialized with 5 key shares an a key threshold of 3. Please securely\ndistributed the key shares printed above. When the Vault is re-sealed,\nrestarted, or stopped, you must supply at least 3 of these keys to unseal it\nbefore it can start servicing requests.\n\nVault does not store the generated master key. Without at least 3 key to\nreconstruct the master key, Vault will remain permanently sealed!\n\nIt is possible to generate new unseal keys, provided you have a quorum of\nexisting unseal keys shares. See \"vault rekey\" for more information.\n</code></pre> <p>\u5f3a\u8c03\uff1a\u8fd9\u91cc\u7684\u4fe1\u606f\u975e\u5e38\u91cd\u8981\uff01\uff01 \u521d\u59cb\u5316\u52a8\u4f5c\u4e3a\u6211\u4eec\u751f\u6210\u4e86 5 \u4e2a Unseal key\uff0c\u6b64\u5916\u8fd8\u6709\u9ed8\u8ba4\u7684 Root Token\u3002\u8bf7\u52a1\u5fc5\u9a6c\u4e0a\u628a\u8fd9\u4e9b\u4fe1\u606f\u8bb0\u5f55\u5230\u5b89\u5168\u7684\u5730\u65b9\uff0c\u56e0\u4e3a\u4ee5\u540e\u4f60\u5c31\u6ca1\u6709\u673a\u4f1a\u518d\u770b\u5230\u5b83\u4eec\u4e86\u3002</p> <p>\u6309\u7167 Vault \u7684\u8bbe\u8ba1\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\u6211\u4eec\u5e94\u8be5\u628a 5 \u4e2a Key \u5206\u914d\u7ed9\u4e0d\u540c\u7684\u4eba\uff0c\u9700\u8981\u8d85\u8fc7\u4e00\u534a\u7684\u4eba\u4ee5\u4e0a\u540c\u610f\uff0c\u6211\u4eec\u624d\u80fd\u89e3\u5c01\u670d\u52a1\u5668\uff08\u96c6\u9f507\u9897\u9f99\u73e0\u53ec\u5524\u795e\u9f99\uff1f\uff09\u5f88\u591a\u5c0f\u4f01\u4e1a\u672a\u5fc5\u6709\u8fd9\u4e48\u591a\u4eba\u53ef\u4ee5\u6388\u6743\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u6240\u6709 Unseal Key \u4e00\u8d77\u7ba1\u7406\u4e5f\u662f\u5141\u8bb8\u7684\uff0c\u5f53\u7136\u8fd9\u6837\u5b89\u5168\u7b49\u7ea7\u5c31\u6ca1\u6709\u90a3\u4e48\u9ad8\u4e86\u3002</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u6267\u884c\u89e3\u5c01\uff08Unseal\uff09\uff1a</p> <pre><code>$ vault operator unseal\nUnseal Key (will be hidden): \nKey                Value\n---                -----\nSeal Type          shamir\nSealed             true\nTotal Shares       5\nThreshold          3\nUnseal Progress    1/3\nUnseal Nonce       a8dd07a3-2fd3-19b6-d61d-b7687ffbcdcd\nVersion            0.9.3\nHA Enabled         true\nHA Mode            sealed\n</code></pre> <p>\u8bf7\u6309\u7167\u63d0\u793a\u7c98\u8d34\u4e00\u4e2a Unseal key \u8fdb\u53bb\u3002\u8f93\u51fa\u4fe1\u606f\u544a\u8bc9\u6211\u4eec\uff0c\u76ee\u524d\u89e3\u5c01\u8fdb\u5ea6\u53ea\u6267\u884c\u4e861/3\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u53e6\u5916 2 \u4e2a Key \u624d\u80fd\u5b8c\u6210\u89e3\u5c01\u3002</p> <p>\u7ee7\u7eed\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u6bcf\u6b21\u9009\u62e9\u53e6\u4e00\u4e2a Unseal key\uff08\u5df2\u4f7f\u7528\u7684 Key \u518d\u6b21\u4f7f\u7528\u65e0\u6548\uff09\uff0c3 \u6b21\u4ee5\u540e\u670d\u52a1\u5668\u5c06\u88ab\u89e3\u5c01\uff1a</p> <pre><code>$ vault operator unseal\nUnseal Key (will be hidden): \nKey             Value\n---             -----\nSeal Type       shamir\nSealed          false\nTotal Shares    5\nThreshold       3\nVersion         0.9.3\nCluster Name    vault-cluster-5e474aa3\nCluster ID      8430f6d7-8176-229f-c6be-5ac06107a427\nHA Enabled      false\n</code></pre>"},{"location":"vault/6vault_api/","title":"6 \u79c1\u5bc6\u4fe1\u606f\u7ba1\u7406\u5229\u5668 HashiCorp Vault\u2014\u2014REST API","text":"<p>\u6211\u4eec\u4e00\u76f4\u5728\u4f7f\u7528 Vault \u547d\u4ee4\u884c\u5ba2\u6237\u7aef\u3002\u4e0d\u8fc7\uff0c\u90e8\u5206\u8f93\u51fa\u5185\u5bb9\u4e5f\u900f\u9732\u4e86\u8fd9\u6837\u7684\u4fe1\u606f\uff0c\u90a3\u5c31\u662f\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7684\u901a\u4fe1\u5b9e\u8d28\u4e0a\u662f\u901a\u8fc7 HTTP \u534f\u8bae\u8fdb\u884c\u7684\u3002</p> <p>\u672c\u6587\u5c31\u663e\u793a\u5982\u4f55\u4f7f\u7528 REST API \u548c\u670d\u52a1\u5668\u901a\u4fe1\u3002Vault \u6709\u8bb8\u591a\u9488\u5bf9\u7279\u5b9a\u8bed\u8a00\u7684\u5ba2\u6237\u7aef\u5e93\uff0c\u5b83\u4eec\u57fa\u672c\u4e0a\u5c31\u662f\u8fd9\u4e9b\u63a5\u53e3\u7684\u7b80\u5355\u5c01\u88c5\u3002\u53ea\u8981\u660e\u767d\u4e86\u57fa\u672c\u539f\u7406\uff0c\u5176\u5b9e\u4f60\u81ea\u5df1\u5199\u4e00\u4e2a\u4e5f\u975e\u5e38\u7b80\u5355\u3002</p> <p>\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0cVault \u6709\u8bb8\u591a\u7528\u6237\u8ba4\u8bc1\u65b9\u6cd5\uff0c\u5bf9\u4e8e\u7a0b\u5e8f\u5ba2\u6237\u7aef\uff0cToken \u662f\u6700\u7b80\u5355\u4e5f\u662f\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u3002\u4e3a\u4e86\u907f\u514d\u5728\u540e\u7eed\u64cd\u4f5c\u4e2d\u53cd\u590d\u8f93\u5165 Token\uff0c\u6211\u5148\u628a\u5b83\u4fdd\u5b58\u5230\u73af\u5883\u53d8\u91cf\u4e2d\uff1a</p> <pre><code>export VAULT_TOKEN=444b8cb7-e58d-9e57-076a-fe0763f06248\n</code></pre> <p>\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u5728\u6d4b\u8bd5\u73af\u5883\u4e2d\u76f4\u63a5\u4f7f\u7528 Root Token\u3002\u751f\u4ea7\u73af\u5883\u4e0b\u5e94\u8be5\u5206\u914d\u5e76\u4f7f\u7528\u6743\u9650\u53d7\u9650\u7684 Token\u3002</p> <pre><code>$ curl \\\n&gt; --header \"X-Vault-Token: $VAULT_TOKEN\" \\\n&gt; --request POST \\\n&gt; --data '{\"bar\": \"baz\", \"name\": \"world\"}' \\\n&gt; http://127.0.0.1:8200/v1/secret/foo\n</code></pre> <p>\u5199\u5165\u6210\u529f\u5e76\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u4fe1\u606f\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u9a8c\u8bc1\u6570\u636e\u786e\u5b9e\u5199\u5165\u4e86\uff1a</p> <pre><code>$ curl \\\n&gt; --header \"X-Vault-Token: $VAULT_TOKEN\" \\\n&gt; http://127.0.0.1:8200/v1/secret/foo\n{\"request_id\":\"50ccf7ef-8153-ec3d-cfc6-ce52dc60483c\",\"lease_id\":\"\",\"renewable\":false,\"lease_duration\":2764800,\"data\":{\"bar\":\"baz\",\"name\":\"world\"},\"wrap_info\":null,\"warnings\":null,\"auth\":null}\n</code></pre> <p>\u5982\u679c\u8c03\u7528\u5931\u8d25\uff0c\u5c06\u4f1a\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff1a</p> <pre><code>curl \\\n&gt; --header \"X-Vault-Token: $VAULT_TOKEN\" \\\n&gt; --request POST \\\n&gt; --data '{\"bar\": \"baz\", \"name\": \"world\"}' \\\n&gt; http://127.0.0.1:8200/v1/mydata/foo\n{\"errors\":[\"no handler for route 'mydata/foo'\"]}\n</code></pre> <p>\u867d\u7136\u53ef\u4ee5\u4f7f\u7528\u7684\u63a5\u53e3\u5f88\u4e30\u5bcc\uff0c\u4f46\u6211\u4eec\u65e5\u5e38\u4f1a\u7528\u5230\u7684\u57fa\u672c\u4e0a\u4e5f\u5c31\u662f\u8bfb\u5199\u6570\u636e\u4e86\u3002\u9664\u975e\u4f60\u9700\u8981\u505a\u4e00\u4e2a\u529f\u80fd\u5b8c\u5584\u7684\u5de5\u5177\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u53c2\u8003\u5b8c\u6574\u7684 \u63a5\u53e3\u6587\u6863\u3002</p>"},{"location":"vault/7vault_impl/","title":"7 \u5bc6\u94a5\u7ba1\u7406\u795e\u5668\u4e4b Vault \u96c6\u7fa4\u642d\u5efa","text":""},{"location":"vault/7vault_impl/#71","title":"7.1 \u4e00 \u80cc\u666f","text":"<p>Vault \u652f\u6301\u591a\u670d\u52a1\u5668\u90e8\u7f72\u6a21\u5f0f\u4ee5\u5b9e\u73b0\u9ad8\u53ef\u7528\u6027\u3002\u6b64\u6a21\u5f0f\u901a\u8fc7\u8fd0\u884c\u591a\u4e2a Vault \u670d\u52a1\u5668\u6765\u9632\u6b62\u670d\u52a1\u4e2d\u65ad\u3002\u4f7f\u7528\u652f\u6301\u9ad8\u53ef\u7528\u7684\u6570\u636e\u5b58\u50a8\u65f6\uff0c\u4f1a\u81ea\u52a8\u542f\u7528\u9ad8\u53ef\u7528\u6a21\u5f0f\u3002</p> <p>\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u542f\u52a8\u670d\u52a1\u5668\u5e76\u67e5\u770b\u8f93\u51fa\u6570\u636e\u5b58\u50a8\u4fe1\u606f\u4e4b\u540e\u662f\u5426\u7d27\u8ddf\u7740\u8f93\u51fa\u201c(HA available)\u201d\u6765\u5224\u65ad\u6570\u636e\u5b58\u50a8\u662f\u5426\u652f\u6301\u9ad8\u53ef\u7528\u6027\u6a21\u5f0f\uff08\u201cHA\u201d\uff09\u3002\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5219 Vault \u5c06\u81ea\u52a8\u4f7f\u7528 HA \u6a21\u5f0f\u3002</p> <p>\u4e3a\u4e86\u83b7\u5f97\u9ad8\u53ef\u7528\u6027\uff0c\u5176\u4e2d\u67d0\u4e00\u4e2a Vault \u670d\u52a1\u5668\u8282\u70b9\u4f1a\u5728\u6570\u636e\u5b58\u50a8\u4e2d\u6210\u529f\u83b7\u53d6\u9501\u3002\u83b7\u53d6\u5230\u9501\u7684\u670d\u52a1\u5668\u8282\u70b9\u5c06\u6210\u4e3a\u4e3b\u8282\u70b9\uff1b\u6240\u6709\u5176\u4ed6\u8282\u70b9\u6210\u4e3a\u5907\u7528\u8282\u70b9\u3002</p> <p>\u6b64\u65f6\uff0c\u5982\u679c\u5907\u7528\u8282\u70b9\u6536\u5230\u8bf7\u6c42\uff0c\u5b83\u4eec\u5c06\u6839\u636e\u96c6\u7fa4\u7684\u5f53\u524d\u914d\u7f6e\u548c\u72b6\u6001\u5bf9\u76f8\u5173\u8be6\u7ec6\u4fe1\u606f\u8fdb\u884c\u8bf7\u6c42\u8f6c\u53d1\u6216\u5ba2\u6237\u7aef\u91cd\u5b9a\u5411\uff0c\u8bf7\u53c2\u9605\u672c\u6587\u4e0b\u65b9\u7684\u90e8\u5206\u3002\u7531\u4e8e\u8fd9\u79cd\u67b6\u6784\uff0cHA \u65e0\u6cd5\u63d0\u9ad8\u6027\u80fd\u53ef\u6269\u5c55\u6027\u3002\u4e00\u822c\u6765\u8bf4\uff0cVault \u6027\u80fd\u7684\u74f6\u9888\u5728\u4e8e\u6570\u636e\u5b58\u50a8\u672c\u8eab\uff0c\u800c\u4e0d\u662f Vault \u5185\u6838\u3002</p> <p>\u4f8b\u5982\uff1a\u4e3a\u4e86\u589e\u52a0\u4f7f\u7528 Consul \u4f5c\u4e3a\u5b58\u50a8\u7684 Vault \u96c6\u7fa4\u7684\u6027\u80fd\u53ef\u6269\u5c55\u6027\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u6269\u5c55 Consul \u800c\u4e0d\u662f Vault\u3002</p> <p>\u67d0\u4e9b\u5b58\u50a8\u540e\u7aef\u53ef\u4ee5\u652f\u6301\u9ad8\u53ef\u7528\u6027\u6a21\u5f0f\uff0c\u8fd9\u4f7f\u5b83\u4eec\u53ef\u4ee5\u540c\u65f6\u5b58\u50a8 Vault \u7684\u4fe1\u606f\u4ee5\u53ca HA \u9501\u4fe1\u606f\u3002</p> <p>\u4f46\u662f\uff0cVault \u4e5f\u652f\u6301\u5206\u5f00\u5b58\u50a8 Vault \u6570\u636e \u548c HA \u9501\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728\u5177\u6709\u4e0d\u540c\u540e\u7aef\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a storage \u548c <code>ha_storage</code> \u8282\u6765\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982\uff0c\u53ef\u4ee5\u5c06 Vault \u96c6\u7fa4\u8bbe\u7f6e\u4e3a\u4f7f\u7528 Consul \u4f5c\u4e3a <code>ha_storage</code> \u6765\u7ba1\u7406\u9501\uff0c\u5e76\u4f7f\u7528 Amazon S3 \u4f5c\u4e3a\u6240\u6709\u5176\u4ed6\u6301\u4e45\u6570\u636e\u7684\u5b58\u50a8\u3002</p> <p>\u4ee5\u4e0b\u90e8\u5206\u66f4\u8be6\u7ec6\u5730\u89e3\u91ca\u4e86\u670d\u52a1\u5668\u901a\u4fe1\u6a21\u5f0f\u548c\u6bcf\u79cd\u7c7b\u578b\u7684\u8bf7\u6c42\u5904\u7406\u3002\u81f3\u5c11\u8981\u6ee1\u8db3\u91cd\u5b9a\u5411\u6a21\u5f0f\u7684</p>"},{"location":"vault/7vault_impl/#_1","title":"\u4e8c \u90e8\u7f72","text":""},{"location":"vault/7vault_impl/#21","title":"2.1 \u672c\u5730\u90e8\u7f72","text":""},{"location":"vault/7vault_impl/#211-vault","title":"2.1.1 \u7f16\u5199vault\u914d\u7f6e\u6587\u4ef6","text":"<p>\u7531\u4e8e\u662f\u672c\u5730\u6d4b\u8bd5\uff0c\u4f7f\u7528dev\u6a21\u5f0f\uff0c\u914d\u7f6e\u5b58\u50a8data\uff0c\u6ce8\u610fdata\u6570\u636e\u4e3a\u5b58\u50a8vault\u91cd\u8981\u6570\u636e\uff0c\u9700\u8981\u914d\u7f6e\u9ad8\u53ef\u7528\u5b58\u50a8\u3002</p> <pre><code># \u521b\u5efa\u914d\u7f6e\u6587\u4ef6\ncat &gt; cat config.hcl &lt;&lt;EOF\nui = true\ndisable_mlock = true\n\nstorage \"raft\" {\n  path    = \"./vault/data\"\n  node_id = \"node1\"\n}\n\nlistener \"tcp\" {\n  address     = \"0.0.0.0:8200\"\n  tls_disable = \"true\"\n}\n\napi_addr = \"http://127.0.0.1:8200\"\ncluster_addr = \"https://127.0.0.1:8201\"\nEOF\n\n# \u521b\u5efadata\u76ee\u5f55\nmkdir -pv vault/data\n</code></pre>"},{"location":"vault/7vault_impl/#212","title":"2.1.2 \u542f\u52a8\u670d\u52a1","text":"<p>\u542f\u52a8\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u542f\u52a8</p> <pre><code>$ vault server -config=config.hcl\n==&gt; Vault server configuration:\n\n             Api Address: http://127.0.0.1:8200\n                     Cgo: disabled\n         Cluster Address: https://127.0.0.1:8201\n              Go Version: go1.17.11\n              Listener 1: tcp (addr: \"0.0.0.0:8200\", cluster address: \"0.0.0.0:8201\", max_request_duration: \"1m30s\", max_request_size: \"33554432\", tls: \"disabled\")\n               Log Level: info\n                   Mlock: supported: false, enabled: false\n           Recovery Mode: false\n                 Storage: raft (HA available)\n                 Version: Vault v1.10.4\n             Version Sha: 6a1dde56c18c4a1be2756b931ce3c872d8ca5a76\n\n==&gt; Vault server started! Log data will stream in below:\n\n2022-08-29T18:31:18.164+0800 [INFO]  proxy environment: http_proxy=\"\" https_proxy=\"\" no_proxy=\"\"\n2022-08-29T18:31:18.308+0800 [INFO]  core: Initializing versionTimestamps for core\n2022-08-29T18:32:16.650+0800 [INFO]  core: security barrier not initialized\n2022-08-29T18:32:16.741+0800 [INFO]  storage.raft: creating Raft: config=\"&amp;raft.Config{ProtocolVersion:3, HeartbeatTimeout:5000000000, ElectionTimeout:5000000000, CommitTimeout:50000000, MaxAppendEntries:64, BatchApplyCh:true, ShutdownOnRemove:true, TrailingLogs:0x2800, SnapshotInterval:120000000000, SnapshotThreshold:0x2000, LeaderLeaseTimeout:2500000000, LocalID:\\\"node1\\\", NotifyCh:(chan&lt;- bool)(0xc0009be150), LogOutput:io.Writer(nil), LogLevel:\\\"DEBUG\\\", Logger:(*hclog.interceptLogger)(0xc0009e2060), NoSnapshotRestoreOnStart:true, skipStartup:false}\"\n2022-08-29T18:32:16.819+0800 [INFO]  storage.raft: initial configuration: index=1 servers=\"[{Suffrage:Voter ID:node1 Address:127.0.0.1:8201}]\"\n2022-08-29T18:32:16.820+0800 [INFO]  storage.raft: entering follower state: follower=\"Node at node1 [Follower]\" leader-address= leader-id=\n2022-08-29T18:32:24.532+0800 [WARN]  storage.raft: heartbeat timeout reached, starting election: last-leader-addr= last-leader-id=\n2022-08-29T18:32:24.533+0800 [INFO]  storage.raft: entering candidate state: node=\"Node at node1 [Candidate]\" term=2\n2022-08-29T18:32:24.663+0800 [INFO]  storage.raft: election won: tally=1\n2022-08-29T18:32:24.663+0800 [INFO]  storage.raft: entering leader state: leader=\"Node at node1 [Leader]\"\n2022-08-29T18:32:25.064+0800 [INFO]  core: security barrier initialized: stored=1 shares=5 threshold=3\n2022-08-29T18:32:25.328+0800 [INFO]  core: post-unseal setup starting\n2022-08-29T18:32:25.501+0800 [INFO]  core: loaded wrapping token key\n2022-08-29T18:32:25.583+0800 [INFO]  core: Recorded vault version: vault version=1.10.4 upgrade time=\"2022-08-29 10:32:25.501019 +0000 UTC\"\n2022-08-29T18:32:25.584+0800 [INFO]  core: successfully setup plugin catalog: plugin-directory=\"\"\n2022-08-29T18:32:25.584+0800 [INFO]  core: no mounts; adding default mount table\n2022-08-29T18:32:25.803+0800 [INFO]  core: successfully mounted backend: type=cubbyhole path=cubbyhole/\n2022-08-29T18:32:25.810+0800 [INFO]  core: successfully mounted backend: type=system path=sys/\n2022-08-29T18:32:25.814+0800 [INFO]  core: successfully mounted backend: type=identity path=identity/\n2022-08-29T18:32:26.272+0800 [INFO]  core: successfully enabled credential backend: type=token path=token/ namespace=\"ID: root. Path: \"\n2022-08-29T18:32:26.364+0800 [INFO]  rollback: starting rollback manager\n2022-08-29T18:32:26.367+0800 [INFO]  core: restoring leases\n2022-08-29T18:32:26.372+0800 [INFO]  expiration: lease restore complete\n2022-08-29T18:32:26.533+0800 [INFO]  identity: entities restored\n2022-08-29T18:32:26.533+0800 [INFO]  identity: groups restored\n2022-08-29T18:32:26.538+0800 [INFO]  core: usage gauge collection is disabled\n2022-08-29T18:32:27.569+0800 [INFO]  core: post-unseal setup complete\n2022-08-29T18:32:27.863+0800 [INFO]  core: root token generated\n2022-08-29T18:32:27.986+0800 [INFO]  core: pre-seal teardown starting\n2022-08-29T18:32:27.987+0800 [INFO]  core: stopping raft active node\n2022-08-29T18:32:27.987+0800 [INFO]  rollback: stopping rollback manager\n2022-08-29T18:32:27.987+0800 [INFO]  core: pre-seal teardown complete\n2022-08-29T18:34:50.838+0800 [INFO]  core.cluster-listener.tcp: starting listener: listener_address=0.0.0.0:8201\n2022-08-29T18:34:50.839+0800 [INFO]  core.cluster-listener: serving cluster requests: cluster_listen_address=[::]:8201\n2022-08-29T18:34:50.840+0800 [INFO]  storage.raft: creating Raft: config=\"&amp;raft.Config{ProtocolVersion:3, HeartbeatTimeout:15000000000, ElectionTimeout:15000000000, CommitTimeout:50000000, MaxAppendEntries:64, BatchApplyCh:true, ShutdownOnRemove:true, TrailingLogs:0x2800, SnapshotInterval:120000000000, SnapshotThreshold:0x2000, LeaderLeaseTimeout:2500000000, LocalID:\\\"node1\\\", NotifyCh:(chan&lt;- bool)(0xc000e42850), LogOutput:io.Writer(nil), LogLevel:\\\"DEBUG\\\", Logger:(*hclog.interceptLogger)(0xc0009e2060), NoSnapshotRestoreOnStart:true, skipStartup:false}\"\n2022-08-29T18:34:50.885+0800 [INFO]  storage.raft: initial configuration: index=1 servers=\"[{Suffrage:Voter ID:node1 Address:127.0.0.1:8201}]\"\n2022-08-29T18:34:50.885+0800 [INFO]  storage.raft: entering follower state: follower=\"Node at 127.0.0.1:8201 [Follower]\" leader-address= leader-id=\n2022-08-29T18:34:50.885+0800 [WARN]  storage.raft: heartbeat timeout reached, starting election: last-leader-addr= last-leader-id=\n2022-08-29T18:34:50.885+0800 [INFO]  storage.raft: entering candidate state: node=\"Node at 127.0.0.1:8201 [Candidate]\" term=3\n2022-08-29T18:34:50.886+0800 [INFO]  core: vault is unsealed\n2022-08-29T18:34:50.886+0800 [INFO]  core: entering standby mode\n2022-08-29T18:34:51.057+0800 [INFO]  storage.raft: election won: tally=1\n2022-08-29T18:34:51.057+0800 [INFO]  storage.raft: entering leader state: leader=\"Node at 127.0.0.1:8201 [Leader]\"\n2022-08-29T18:34:51.205+0800 [INFO]  core: acquired lock, enabling active operation\n2022-08-29T18:34:51.315+0800 [INFO]  core: post-unseal setup starting\n2022-08-29T18:34:51.398+0800 [INFO]  core: loaded wrapping token key\n2022-08-29T18:34:51.398+0800 [INFO]  core: successfully setup plugin catalog: plugin-directory=\"\"\n2022-08-29T18:34:51.400+0800 [INFO]  core: successfully mounted backend: type=system path=sys/\n2022-08-29T18:34:51.401+0800 [INFO]  core: successfully mounted backend: type=identity path=identity/\n2022-08-29T18:34:51.401+0800 [INFO]  core: successfully mounted backend: type=cubbyhole path=cubbyhole/\n2022-08-29T18:34:51.402+0800 [INFO]  core: successfully enabled credential backend: type=token path=token/ namespace=\"ID: root. Path: \"\n2022-08-29T18:34:51.403+0800 [INFO]  rollback: starting rollback manager\n2022-08-29T18:34:51.404+0800 [INFO]  core: restoring leases\n2022-08-29T18:34:51.404+0800 [INFO]  identity: entities restored\n2022-08-29T18:34:51.404+0800 [INFO]  identity: groups restored\n2022-08-29T18:34:51.404+0800 [INFO]  core: starting raft active node\n2022-08-29T18:34:51.405+0800 [INFO]  expiration: lease restore complete\n2022-08-29T18:34:51.405+0800 [INFO]  storage.raft: starting autopilot: config=\"&amp;{false 0 10s 24h0m0s 1000 0 10s}\" reconcile_interval=0s\n2022-08-29T18:34:51.410+0800 [INFO]  core: usage gauge collection is disabled\n2022-08-29T18:34:51.490+0800 [INFO]  core: post-unseal setup complete\n</code></pre> <p>\u5728\u5176\u4e2d\u53ef\u4ee5\u770b\u5230\u670d\u52a1\u76d1\u542c\u5730\u5740\uff0c\u53ca<code>VAULT_ADDR</code> \u73af\u5883\u53d8\u91cf\uff0c\u540e\u7eed\u53ef\u4ee5\u4f7f\u7528CLI\u8fdb\u884c\u767b\u5f55\u3002</p>"},{"location":"vault/7vault_impl/#213-operator-init","title":"2.1.3 operator init","text":"<p>\u4ee5\u751f\u4ea7\u73af\u5883\u542f\u52a8\u7684vault\u662f\u5904\u4e8eunsel\u72b6\u6001\uff0c\u9700\u8981\u8fdb\u884cseal\uff0c\u8fdb\u884coperator init\u4f1a\u751f\u4ea7\u4e94\u4e2aUnseal key\uff0c\u8bb0\u5f55\u5176\u8f93\u5165\u4e09\u4e2a\u53ef\u4ee5\u5bf9vault\u8fdb\u884c\u89e3\u5c01\uff0c</p> <pre><code>$ export VAULT_ADDR='http://127.0.0.1:8200'\n\n$ vault operator init\nUnseal Key 1: YnypGKZR9wfTCORBRjT7dje5rX6OkXOn21XkOFYx2z5x\nUnseal Key 2: IgQzIX6Y+J3Txr88zTfaG0VGSlsQLSR5+WKpAGHoys7T\nUnseal Key 3: Uw/B2KGnazLCzfZLCNXldJHoKhZjk0v4F52gJ9YlXOuQ\nUnseal Key 4: NcVwEDfLh/0mjpE/EzE/rdvVIkMPjzJRHkKE9Q11hlMq\nUnseal Key 5: Mzf7grcLoakA7/Ue/z/fhIHFIWRG6hNjmjw03jf/0MZs\n\nInitial Root Token: hvs.8ei4GOhxbwsdvCjfKFqoE3jg\n\nVault initialized with 5 key shares and a key threshold of 3. Please securely\ndistribute the key shares printed above. When the Vault is re-sealed,\nrestarted, or stopped, you must supply at least 3 of these keys to unseal it\nbefore it can start servicing requests.\n\nVault does not store the generated root key. Without at least 3 keys to\nreconstruct the root key, Vault will remain permanently sealed!\n\nIt is possible to generate new unseal keys, provided you have a quorum of\nexisting unseal keys shares. See \"vault operator rekey\" for more information.\n</code></pre>"},{"location":"vault/7vault_impl/#214-sealunseal","title":"2.1.4 Seal/Unseal","text":"<p>\u4f7f\u7528\u547d\u4ee4\u884c</p> <pre><code>vault operator unseal\n</code></pre> <p></p> <p>\u89e3\u5c01\u5b8c\u6210\u8fdb\u884c\u767b\u5f55</p> <pre><code>$ vault login\n\n</code></pre> <p></p>"},{"location":"vault/7vault_impl/#3-kubernets","title":"3 Kubernets \u90e8\u7f72","text":"<p>\u5728Kubernetes\u4e0a\u5b89\u88c5\u548c\u914d\u7f6eVault\u7684\u63a8\u8350\u65b9\u6cd5\u662f\u4f7f\u7528Vault helm chart\u3002</p> <p>\u9664\u4e86\u8fd0\u884cVault\u672c\u8eab\u4e4b\u5916\uff0cHelm chart\u8fd8\u662f\u5b89\u88c5\u548c\u914d\u7f6eVault\u4ee5\u4e0e\u5176\u4ed6\u670d\u52a1\uff08\u5982Consul for High Availability(HA)\u90e8\u7f72\uff09\u96c6\u6210\u7684\u4e3b\u8981\u65b9\u6cd5\u3002</p> <p>\u6ce8\u610f\uff1a\u8bf7\u4f7f\u7528helm3\u5b89\u88c5</p>"},{"location":"vault/7vault_impl/#31-vault-namespace","title":"3.1 \u521b\u5efavault namespace","text":"<pre><code>kubectl create namespace vault\n</code></pre>"},{"location":"vault/7vault_impl/#32-hashicorp-helm-repo","title":"3.2 \u914d\u7f6eHashiCorp helm repo","text":"<pre><code>$ helm repo add hashicorp https://helm.releases.hashicorp.com\n\n$ helm repo update\n\n$ helm search repo hashicorp/vault\nNAME            CHART VERSION   APP VERSION DESCRIPTION\nhashicorp/vault 0.21.0          1.11.2      Official HashiCorp Vault Chart\n</code></pre>"},{"location":"vault/7vault_impl/#33-vault-helm-chart","title":"3.3 \u914d\u7f6eVault helm chart","text":"<pre><code># \u67e5\u770b\u7248\u672c\n$ helm search repo hashicorp/vault --versions\nNAME            CHART VERSION   APP VERSION DESCRIPTION\nhashicorp/vault 0.21.0          1.11.2      Official HashiCorp Vault Chart\nhashicorp/vault 0.20.1          1.10.3      Official HashiCorp Vault Chart\nhashicorp/vault 0.20.0          1.10.3      Official HashiCorp Vault Chart\nhashicorp/vault 0.19.0          1.9.2       Official HashiCorp Vault Chart\nhashicorp/vault 0.18.0          1.9.0       Official HashiCorp Vault Chart\nhashicorp/vault 0.17.1          1.8.4       Official HashiCorp Vault Chart\nhashicorp/vault 0.17.0          1.8.4       Official HashiCorp Vault Chart\nhashicorp/vault 0.16.1          1.8.3       Official HashiCorp Vault Chart\nhashicorp/vault 0.16.0          1.8.2       Official HashiCorp Vault Chart\nhashicorp/vault 0.15.0          1.8.1       Official HashiCorp Vault Chart\nhashicorp/vault 0.14.0          1.8.0       Official HashiCorp Vault Chart\nhashicorp/vault 0.13.0          1.7.3       Official HashiCorp Vault Chart\nhashicorp/vault 0.12.0          1.7.2       Official HashiCorp Vault Chart\nhashicorp/vault 0.11.0          1.7.0       Official HashiCorp Vault Chart\nhashicorp/vault 0.10.0          1.7.0       Official HashiCorp Vault Chart\nhashicorp/vault 0.9.1           1.6.2       Official HashiCorp Vault Chart\nhashicorp/vault 0.9.0           1.6.1       Official HashiCorp Vault Chart\nhashicorp/vault 0.8.0           1.5.4       Official HashiCorp Vault Chart\nhashicorp/vault 0.7.0           1.5.2       Official HashiCorp Vault Chart\nhashicorp/vault 0.6.0           1.4.2       Official HashiCorp Vault Chart\nhashicorp/vault 0.5.0                       Install and configure Vault on Kubernetes.\nhashicorp/vault 0.4.0                       Install and configure Vault on Kubernetes.\n\n# \u8986\u76d6\u914d\u7f6e\u8fdb\u884c\u5b89\u88c5,\u5982\u679c\u60f3\u5b58\u50a8\u5728\u672c\u5730\u4f7f\u7528helm fetch\u4e0b\u8f7d\u4e0b\u6765\uff0c\u7136\u540e\u8fdb\u884c\u4fee\u6539vault\u8fdb\u884c\u5b89\u88c5,helm fetch hashicorp/vault --version=0.21.0\n$ helm install vault hashicorp/vault \\\n    --namespace vault \\\n    --set \"server.ha.enabled=true\" \\\n    --set \"server.ha.replicas=5\" \\\n    --dry-run\n\n# \u6216\u8005\u7f16\u5199\u8865\u4e01\u914d\u7f6e\u6587\u4ef6\uff0c\u8fdb\u884c\u8986\u76d6\n$ cat &lt;&lt; EOF &gt; ./override-values.yml\nserver:\n  ha:\n    enabled: true\n    replicas: 5\n\nEOF\n\n# \u5229\u7528\u8865\u4e01\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u5b89\u88c5\n$ helm install vault hashicorp/vault \\\n    --namespace vault \\\n    -f override-values.yml \\\n    --dry-run\n</code></pre> <ul> <li>\u751f\u4ea7\u73af\u5883HA\u6a21\u5f0f</li> </ul> <p>\u6ce8\u610f\uff1a<code>Vault Integrated Storage</code>\u5b9e\u73b0\u4e86Raft\u5b58\u50a8\u534f\u8bae\uff0c\u5728HashiCorp Vault\u6587\u6863\u4e2d\u901a\u5e38\u79f0\u4e3a<code>Raft</code>\u3002\u5982\u679c\u4f7f\u7528HA\u6a21\u5f0f\u4e0e\u6267\u653f\u5b98\u5b58\u50a8\u540e\u7aef\uff0c\u6211\u4eec\u5efa\u8bae\u4f7f\u7528<code>helm chart</code>\u8fdb\u884c\u5b89\u88c5\u3002</p> <pre><code>$ cat &lt;&lt; EOF &gt; ./override-values.yml\n\n# Vault Helm Chart Value Overrides\nglobal:\n  enabled: true\n  tlsDisable: false\n\ninjector:\n  enabled: true\n  # Use the Vault K8s Image https://github.com/hashicorp/vault-k8s/\n  image:\n    repository: \"hashicorp/vault-k8s\"\n    tag: \"latest\"\n\n  resources:\n      requests:\n        memory: 256Mi\n        cpu: 250m\n      limits:\n        memory: 256Mi\n        cpu: 250m\n\nserver:\n  # Use the Enterprise Image\n  image:\n    repository: \"hashicorp/vault-enterprise\"\n    tag: \"1.5.0_ent\"\n\n  # These Resource Limits are in line with node requirements in the\n  # Vault Reference Architecture for a Small Cluster\n  resources:\n    requests:\n      memory: 8Gi\n      cpu: 2000m\n    limits:\n      memory: 16Gi\n      cpu: 2000m\n\n  # For HA configuration and because we need to manually init the vault,\n  # we need to define custom readiness/liveness Probe settings\n  readinessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true&amp;sealedcode=204&amp;uninitcode=204\"\n  livenessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true\"\n    initialDelaySeconds: 60\n\n  # extraEnvironmentVars is a list of extra environment variables to set with the stateful set. These could be\n  # used to include variables required for auto-unseal.\n  extraEnvironmentVars:\n    VAULT_CACERT: /vault/userconfig/tls-ca/ca.crt\n\n  # extraVolumes is a list of extra volumes to mount. These will be exposed\n  # to Vault in the path `/vault/userconfig/&lt;name&gt;/`.\n  extraVolumes:\n    - type: secret\n      name: tls-server\n    - type: secret\n      name: tls-ca\n    - type: secret\n      name: kms-creds\n\n  # This configures the Vault Statefulset to create a PVC for audit logs.\n  # See https://www.vaultproject.io/docs/audit/index.html to know more\n  auditStorage:\n    enabled: true\n\n  standalone:\n    enabled: false\n\n  # Run Vault in \"HA\" mode.\n  ha:\n    enabled: true\n    replicas: 5\n    raft:\n      enabled: true\n      setNodeId: true\n\n      config: |\n        ui = true\n        listener \"tcp\" {\n          address = \"[::]:8200\"\n          cluster_address = \"[::]:8201\"\n          tls_cert_file = \"/vault/userconfig/tls-server/fullchain.pem\"\n          tls_key_file = \"/vault/userconfig/tls-server/server.key\"\n          tls_client_ca_file = \"/vault/userconfig/tls-server/client-auth-ca.pem\"\n        }\n\n        storage \"raft\" {\n          path = \"/vault/data\"\n            retry_join {\n            leader_api_addr = \"https://vault-0.vault-internal:8200\"\n            leader_ca_cert_file = \"/vault/userconfig/tls-ca/ca.crt\"\n            leader_client_cert_file = \"/vault/userconfig/tls-server/server.crt\"\n            leader_client_key_file = \"/vault/userconfig/tls-server/server.key\"\n          }\n          retry_join {\n            leader_api_addr = \"https://vault-1.vault-internal:8200\"\n            leader_ca_cert_file = \"/vault/userconfig/tls-ca/ca.crt\"\n            leader_client_cert_file = \"/vault/userconfig/tls-server/server.crt\"\n            leader_client_key_file = \"/vault/userconfig/tls-server/server.key\"\n          }\n          retry_join {\n            leader_api_addr = \"https://vault-2.vault-internal:8200\"\n            leader_ca_cert_file = \"/vault/userconfig/tls-ca/ca.crt\"\n            leader_client_cert_file = \"/vault/userconfig/tls-server/server.crt\"\n            leader_client_key_file = \"/vault/userconfig/tls-server/server.key\"\n          }\n          retry_join {\n              leader_api_addr = \"https://vault-3.vault-internal:8200\"\n              leader_ca_cert_file = \"/vault/userconfig/tls-ca/ca.crt\"\n              leader_client_cert_file = \"/vault/userconfig/tls-server/server.crt\"\n              leader_client_key_file = \"/vault/userconfig/tls-server/server.key\"\n          }\n          retry_join {\n              leader_api_addr = \"https://vault-4.vault-internal:8200\"\n              leader_ca_cert_file = \"/vault/userconfig/tls-ca/ca.crt\"\n              leader_client_cert_file = \"/vault/userconfig/tls-server/server.crt\"\n              leader_client_key_file = \"/vault/userconfig/tls-server/server.key\"\n          }\n\n          autopilot {\n            cleanup_dead_servers = \"true\"\n            last_contact_threshold = \"200ms\"\n            last_contact_failure_threshold = \"10m\"\n            max_trailing_logs = 250000\n            min_quorum = 5\n            server_stabilization_time = \"10s\"\n          }\n\n        }\n\n        service_registration \"kubernetes\" {}\n\n# Vault UI\nui:\n  enabled: true\n  serviceType: \"LoadBalancer\"\n  serviceNodePort: null\n  externalPort: 8200\n\n  # For Added Security, edit the below\n  #loadBalancerSourceRanges:\n  #   - &lt; Your IP RANGE Ex. 10.0.0.0/16 &gt;\n  #   - &lt; YOUR SINGLE IP Ex. 1.78.23.3/32 &gt;\n\nEOF\n</code></pre>"},{"location":"vault/7vault_impl/#34-vault","title":"3.4 \u5b89\u88c5vault","text":"<pre><code>$ helm install vault --namespace vault -f override-values.yml vault/\n</code></pre>"},{"location":"vault/7vault_impl/#35-vault","title":"3.5 \u521d\u59cb\u5316\u548c\u89e3\u5c01vault","text":"<pre><code>$ kubectl get pods --selector='app.kubernetes.io/name=vault' --namespace=' vault'\n\n$ kubectl exec --stdin=true --tty=true vault-0 -- vault operator init\n</code></pre>"},{"location":"vault/7vault_impl/#36","title":"3.6 \u6807\u51c6\u5316\u5b89\u88c5","text":"<p>\u5b89\u88c5\uff1a \u4f7f\u7528storageclass\u4f5c\u4e3a\u5b58\u50a8</p> <pre><code>$ kubectl create ns vault\n$ helm repo add hashicorp https://helm.releases.hashicorp.com\n$ cat &gt; helm-vault-raft-values.yml &lt;&lt;EOF\nserver:\n  affinity: \"\"\n  ha:\n    enabled: true\n    raft: \n      enabled: true\nEOF\n\n$ helm install vault --namespace vault -f helm-vault-raft-values.yml vault/\n</code></pre> <p>\u767b\u5f55NFS\u670d\u52a1\u67e5\u770b\u6570\u636e</p> <p></p>"},{"location":"vault/7vault_impl/#37","title":"3.7 \u521d\u59cb\u5316","text":"<p><code>operator init</code>\u547d\u4ee4\u751f\u6210\u4e00\u4e2a\u6839\u5bc6\u94a5\uff0c\u5c06\u5176\u5206\u89e3\u4e3a\u5bc6\u94a5\u5171\u4eab<code>-key-shares=</code>1\uff0c\u7136\u540e\u8bbe\u7f6e\u89e3\u5c01<code>vault-key-threshold=1</code>\u6240\u9700\u7684\u5bc6\u94a5\u5171\u4eab\u6570\u3002</p> <p>\u8fd9\u4e9b\u5bc6\u94a5\u5171\u4eab\u4ee5JSON\u683c\u5f0f-format=JSON\u4f5c\u4e3a\u89e3\u5c01\u5bc6\u94a5\u5199\u5165\u8f93\u51fa\u3002\u5728\u8fd9\u91cc\uff0c\u8f93\u51fa\u88ab\u91cd\u5b9a\u5411\u5230\u4e00\u4e2a\u540d\u4e3a<code>cluster-keys.json</code>\u7684\u6587\u4ef6\u3002</p> <pre><code>$ kubectl exec vault-0 -n vault -- vault operator init \\\n    -key-shares=1 \\\n    -key-threshold=1 \\\n    -format=json &gt; cluster-keys.json\n</code></pre> <p></p>"},{"location":"vault/7vault_impl/#38","title":"3.8 \u67e5\u770b\u89e3\u5c01\u5bc6\u94a5","text":"<p>\u663e\u793a\u5728<code>cluster-keys.json</code>\u4e2d\u627e\u5230\u7684\u89e3\u5c01\u5bc6\u94a5\u3002</p> <pre><code>jq -r \".unseal_keys_b64[]\" cluster-keys.json\nqia0mFswr7LwQg60l5DS6bJ3tjKCKcnOO7ceVqOUOy4=\n</code></pre>"},{"location":"vault/7vault_impl/#39-vault_unseal_key","title":"3.9 \u521b\u5efa<code>VAULT_UNSEAL_KEY</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a<code>VAULT_UNSEAL_KEY</code>\u7684\u53d8\u91cf\u6765\u5b58\u50a8\u89e3\u5c01\u5bc6\u94a5\u3002</p> <pre><code>VAULT_UNSEAL_KEY=$(jq -r \".unseal_keys_b64[]\" cluster-keys.json)\n</code></pre> <p>\u521d\u59cb\u5316\u540e\uff0cVault\u88ab\u914d\u7f6e\u4e3a\u77e5\u9053\u5728\u4f55\u5904\u4ee5\u53ca\u5982\u4f55\u8bbf\u95ee\u5b58\u50a8\uff0c\u4f46\u4e0d\u77e5\u9053\u5982\u4f55\u89e3\u5bc6\u5176\u4e2d\u4efb\u4f55\u5b58\u50a8\u3002\u89e3\u5c01\u662f\u6784\u5efa\u8bfb\u53d6\u89e3\u5bc6\u5bc6\u94a5\u4ee5\u89e3\u5bc6\u6570\u636e\u6240\u9700\u7684\u6839\u5bc6\u94a5\u7684\u8fc7\u7a0b\uff0c\u5141\u8bb8\u8bbf\u95ee\u5b58\u50a8\u5e93\u3002</p> <p></p>"},{"location":"vault/7vault_impl/#310","title":"3.10 \u89e3\u5c01","text":"<p>\u89e3\u5c01\u5728vault-0 pod\u4e0a\u8fd0\u884c\u7684Vault\u3002</p> <pre><code>kubectl exec vault-0 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY\n</code></pre> <p></p> <p>\u4fdd\u9669\u5e93\u670d\u52a1\u5668\u88ab\u521d\u59cb\u5316\u5e76\u89e3\u5c01\u3002</p>"},{"location":"vault/7vault_impl/#311-raft","title":"3.11 \u52a0\u5165raft\u96c6\u7fa4","text":"<p>\u5c06vault-1pod \u548c vault-2 pod \u52a0\u5165\u5230Raft\u96c6\u7fa4\u4e2d\uff0c</p> <pre><code>kubectl exec -ti vault-1 -n vault -- vault operator raft join http://vault-0.vault-internal:8200\n\nkubectl exec -ti vault-2 -n vault -- vault operator raft join http://vault-0.vault-internal:8200\n</code></pre> <p></p>"},{"location":"vault/7vault_impl/#312-vault12","title":"3.12 \u89e3\u5c01vault1/2","text":"<pre><code>kubectl exec -ti vault-1 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY\n\nkubectl exec -ti vault-2 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY\n</code></pre>"},{"location":"vault/7vault_impl/#313-svc","title":"3.13 \u4fee\u6539SVC \u7c7b\u578b","text":"<p>\u83b7\u53d6roottoken</p> <pre><code>jq -r \".root_token\" cluster-keys.json\n</code></pre> <p></p>"},{"location":"vault/7vault_impl/#314","title":"3.14 \u9875\u9762\u8bbf\u95ee","text":"<p>\u4f7f\u7528token\u9a8c\u8bc1\u6a21\u5f0f</p> <p></p> <p></p> <p>\u81f3\u6b64\u751f\u4ea7\u73af\u5883vault\u90e8\u7f72\u5b8c\u6210\u3002</p> <p>\u4e00\u822c\u60c5\u51b5\u4ecb\u4e8e\u4fbf\u6377\u6027\u548c\u9ad8\u53ef\u7528\uff0c\u91c7\u7528\u7b2c\u4e09\u79cd\u6807\u51c6\u5b89\u88c5\u8f83\u4e3a\u5408\u9002\u3002</p>"},{"location":"vault/8vault_k8s/","title":"8 K8S\u4e0eVault\u96c6\u6210\uff0c\u8fdb\u884cSecret\u7ba1\u7406","text":"<p>Vault \u662f\u7528\u4e8e\u5904\u7406\u548c\u52a0\u5bc6\u6574\u4e2a\u57fa\u7840\u67b6\u6784\u79d8\u94a5\u7684\u4e2d\u5fc3\u7ba1\u7406\u670d\u52a1\u3002Vault \u901a\u8fc7 secret \u5f15\u64ce\u7ba1\u7406\u6240\u6709\u7684\u79d8\u94a5\uff0cVault \u6709\u4e00\u5957 secret \u5f15\u64ce\u53ef\u4ee5\u4f7f\u7528\u3002</p> <p>\u5176\u4e3b\u8981\u6709\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ul> <li>\u5b89\u5168\u5bc6\u94a5\u5b58\u50a8\uff1a\u4efb\u610f\u7684key/value Secret\u90fd\u53ef\u4ee5\u5b58\u50a8\u5230Vault\u4e2d\uff0cVault\u4f1a\u5bf9\u8fd9\u4e9bSecret\u8fdb\u884c\u52a0\u5bc6\u5e76\u6301\u4e45\u5316\u5b58\u50a8\u3002\u540e\u7aef\u5b58\u50a8\u652f\u6301\u672c\u5730\u78c1\u76d8\u3001cosul\u7b49\uff1b</li> <li>\u52a8\u6001\u5bc6\u94a5\uff1aVault\u53ef\u4ee5\u52a8\u6001\u751f\u6210Secret\uff0c\u5728\u79df\u7ea6\u5230\u671f\u540e\u4f1a\u81ea\u52a8\u64a4\u9500\u5b83\u4eec\uff1b</li> <li>\u6570\u636e\u52a0\u5bc6\uff1aVault\u53ef\u4ee5\u52a0\u5bc6\u548c\u89e3\u5bc6\u6570\u636e\uff0c\u5b89\u5168\u56e2\u961f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u52a0\u5bc6\u53c2\u6570\uff1b</li> <li>\u79df\u8d41\u548c\u7eed\u8ba2\uff1aVault \u4e2d\u7684\u6240\u6709\u673a\u5bc6\u90fd\u6709\u4e0e\u5176\u5173\u8054\u7684\u79df\u7ea6\u3002\u5728\u79df\u7ea6\u7ed3\u675f\u65f6\uff0cVault \u5c06\u81ea\u52a8\u64a4\u9500\u8be5\u673a\u5bc6\u3002\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u7eed\u8ba2 API \u7eed\u8ba2\u79df\u7ea6\uff1b</li> <li>\u540a\u9500\uff1aVault\u5177\u6709\u5bf9\u79d8\u5bc6\u540a\u9500\u7684\u5185\u7f6e\u652f\u6301\u3002Vault \u53ef\u4ee5\u64a4\u9500\u5355\u4e2a\u673a\u5bc6\uff0c\u8fd8\u53ef\u4ee5\u64a4\u9500\u4e00\u4e2a\u673a\u5bc6\u6811\uff0c\u4f8b\u5982\u7531\u7279\u5b9a\u7528\u6237\u8bfb\u53d6\u7684\u6240\u6709\u673a\u5bc6\u6216\u7279\u5b9a\u7c7b\u578b\u7684\u6240\u6709\u673a\u5bc6\u3002\u5728\u53d1\u751f\u5165\u4fb5\u65f6\uff0c\u540a\u9500\u6709\u52a9\u4e8e\u5173\u952e\u6eda\u52a8\u548c\u9501\u5b9a\u7cfb\u7edf\uff1b</li> </ul>"},{"location":"vault/8vault_k8s/#_1","title":"\u5b89\u88c5","text":"<p>\u5728Linux\u4e3b\u673a\u4e0a\u5b89\u88c5</p> <p>\u5728Linux\u4e3b\u673a\u4e0a\u5b89\u88c5\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u9700\u8981\u4e0b\u9762\u4e09\u6b65\uff1a</p> <pre><code>#\u00a0\u5b89\u88c5\u5305\u7ba1\u7406\u5de5\u5177\n$\u00a0sudo\u00a0yum\u00a0install\u00a0-y\u00a0yum-utils\n#\u00a0\u6dfb\u52a0\u6e90\n$\u00a0sudo\u00a0yum-config-manager\u00a0--add-repo\u00a0https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n#\u00a0\u5b89\u88c5vault\n$\u00a0sudo\u00a0yum\u00a0-y\u00a0install\u00a0vault\n</code></pre> <p>\u5728K8S\u4e2d\u5b89\u88c5</p> <pre><code>#\u00a0\u6dfb\u52a0repo\u4ed3\u5e93\n$\u00a0helm\u00a0repo\u00a0add\u00a0hashicorp\u00a0https://helm.releases.hashicorp.com\n\n#\u00a0\u66f4\u65b0\u672c\u5730\u4ed3\u5e93\n$\u00a0helm\u00a0repo\u00a0update\n\n#\u00a0\u5b89\u88c5vault\n$\u00a0helm\u00a0install\u00a0vault\u00a0hashicorp/vault\n</code></pre>"},{"location":"vault/8vault_k8s/#_2","title":"\u8d77\u670d\u52a1\u7aef","text":"<p>\u8fd9\u91cc\u5df2\u7ecf\u5728\u4e3b\u673a\u4e0a\u5b89\u88c5\u4e86vault\u3002</p> <pre><code>$ vault version\nVault v1.6.1 (6d2db3f033e02e70202bef9ec896360062b88b03)\n</code></pre> <p>\u7136\u540e\u4ee5\u5f00\u53d1\u9ed8\u8ba4\u8fd0\u884c\u4e00\u4e2aVault\u670d\u52a1\u7aef\uff0c\u6b63\u5f0f\u73af\u5883\u4e0d\u7528\u5f00\u53d1\u6a21\u5f0f\u3002</p> <pre><code>$\u00a0vault\u00a0server\u00a0-dev\u00a0-dev-listen-address=0.0.0.0:8200\u00a0&amp;\n......\nWARNING!\u00a0dev\u00a0mode\u00a0is\u00a0enabled!\u00a0In\u00a0this\u00a0mode,\u00a0Vault\u00a0runs\u00a0entirely\u00a0in-memory\nand\u00a0starts\u00a0unsealed\u00a0with\u00a0a\u00a0single\u00a0unseal\u00a0key.\u00a0The\u00a0root\u00a0token\u00a0is\u00a0already\nauthenticated\u00a0to\u00a0the\u00a0CLI,\u00a0so\u00a0you\u00a0can\u00a0immediately\u00a0begin\u00a0using\u00a0Vault.\n\nYou\u00a0may\u00a0need\u00a0to\u00a0set\u00a0the\u00a0following\u00a0environment\u00a0variable:\n\n\u00a0\u00a0\u00a0\u00a0$\u00a0export\u00a0VAULT_ADDR='http://0.0.0.0:8200'\n\nThe\u00a0unseal\u00a0key\u00a0and\u00a0root\u00a0token\u00a0are\u00a0displayed\u00a0below\u00a0in\u00a0case\u00a0you\u00a0want\u00a0to\nseal/unseal\u00a0the\u00a0Vault\u00a0or\u00a0re-authenticate.\n\nUnseal\u00a0Key:\u00a0killR+cPfTR7P7HoYRt5SsMySMDv2w9WD7ljcxpXB+Q=\nRoot\u00a0Token:\u00a0s.pd4FBsC1pamE21nLv3fszdI1\n\nDevelopment\u00a0mode\u00a0should\u00a0NOT\u00a0be\u00a0used\u00a0in\u00a0production\u00a0installations\n</code></pre> <p>\u7136\u540e\u53ef\u4ee5\u901a\u8fc7 <code>http://ip:8200/ui</code> \u8fdb\u884c\u8bbf\u95ee\u3002</p> <p>\u586b\u5165\u751f\u6210\u7684Token\uff0c\u5373\u53ef\u767b\u5f55\u3002</p> <p></p>"},{"location":"vault/8vault_k8s/#k8svault","title":"\u914d\u7f6eK8S\u4e0eVault\u901a\u4fe1","text":"<p>\u8981\u4f7fK8S\u80fd\u6b63\u5e38\u8bfb\u53d6Vault\u4e2d\u7684Secret\uff0c\u5219\u5fc5\u987b\u4fdd\u8bc1K8S\u548cVault\u80fd\u6b63\u5e38\u901a\u4fe1\u3002</p> <ul> <li>\u6dfb\u52a0\u73af\u5883\u53d8\u91cf\uff0c\u5176\u4e2dIP\u5730\u5740\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u586b\u5199</li> </ul> <pre><code>$ export VAULT_ADDR=http://192.168.0.153:8200\n</code></pre> <ul> <li>\u5f00\u542fK8S\u8ba4\u8bc1\u65b9\u5f0f</li> </ul> <pre><code>$ vault auth enable kubernetes\nSuccess! Enabled kubernetes auth method at: kubernetes/\n</code></pre> <ul> <li>\u6dfb\u52a0K8S\u96c6\u7fa4\u914d\u7f6e\u4fe1\u606f</li> </ul> <pre><code>$\u00a0vault\u00a0write\u00a0auth/kubernetes/config\u00a0\\\n\u00a0\u00a0\u00a0\u00a0kubernetes_host=https://192.168.0.153:6443\u00a0\\\n\u00a0\u00a0\u00a0\u00a0kubernetes_ca_cert=@/etc/kubernetes/pki/ca.crt\nSuccess!\u00a0Data\u00a0written\u00a0to:\u00a0auth/kubernetes/config\n</code></pre> <ul> <li>\u521b\u5efa\u6743\u9650\u7b56\u7565</li> </ul> <pre><code>$\u00a0cat\u00a0&lt;&lt;EOF\u00a0|\u00a0vault\u00a0policy\u00a0write\u00a0vault-demo-policy\u00a0-\n&gt;\u00a0path\u00a0\"sys/mounts\"\u00a0{\u00a0capabilities\u00a0=\u00a0[\"read\"]\u00a0}\n&gt;\u00a0path\u00a0\"secret/data/demo/*\"\u00a0{\u00a0capabilities\u00a0=\u00a0[\"read\"]\u00a0}\n&gt;\u00a0path\u00a0\"secret/metadata/demo/*\"\u00a0{\u00a0capabilities\u00a0=\u00a0[\"list\"]\u00a0}\n&gt;\u00a0EOF\nSuccess!\u00a0Uploaded\u00a0policy:\u00a0vault-demo-policy\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u6f14\u793a\u7684demo\u7b56\u7565\u3002</p> <ul> <li>\u521b\u5efa\u4e00\u4e2a\u8ba4\u8bc1\u89d2\u8272<ul> <li><code>bound_service_account_names</code></li> <li><code>bound_service_account_namespaces</code></li> <li>policies</li> <li>ttl</li> </ul> </li> </ul> <pre><code>$\u00a0vault\u00a0write\u00a0auth/kubernetes/role/vault-demo-role\u00a0\\\n&gt;\u00a0\u00a0\u00a0\u00a0\u00a0bound_service_account_names=vault-serviceaccount\u00a0\\\n&gt;\u00a0\u00a0\u00a0\u00a0\u00a0bound_service_account_namespaces=default\u00a0\\\n&gt;\u00a0\u00a0\u00a0\u00a0\u00a0policies=vault-demo-policy\u00a0\\\n&gt;\u00a0\u00a0\u00a0\u00a0\u00a0ttl=1h\nSuccess!\u00a0Data\u00a0written\u00a0to:\u00a0auth/kubernetes/role/vault-demo-role\n</code></pre> <p>\u89d2\u8272\u540d\u662f<code>vault-demo-role</code>\uff0c\u8ba4\u8bc1\u65b9\u5f0f\u662fRBAC\u8ba4\u8bc1\uff0c\u7ed1\u5b9a\u7684\u7528\u6237\u662f<code>vault-serviceaccount</code>\uff0c\u7b56\u7565\u662f<code>vault-demo-policy</code></p> <ul> <li>\u521b\u5efa\u5bc6\u94a5</li> </ul> <pre><code>$\u00a0vault\u00a0kv\u00a0put\u00a0secret/demo/database\u00a0username=\"coolops\"\u00a0password=123456\nKey\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Value\n---\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-----\ncreated_time\u00a0\u00a0\u00a0\u00a0\u00a02021-01-25T08:22:35.134166877Z\ndeletion_time\u00a0\u00a0\u00a0\u00a0n/a\ndestroyed\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0false\nversion\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\n\n#\u00a0\u67e5\u770b\n$\u00a0vault\u00a0kv\u00a0get\u00a0secret/demo/database\n======\u00a0Metadata\u00a0======\nKey\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Value\n---\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-----\ncreated_time\u00a0\u00a0\u00a0\u00a0\u00a02021-01-25T08:22:35.134166877Z\ndeletion_time\u00a0\u00a0\u00a0\u00a0n/a\ndestroyed\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0false\nversion\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\n\n======\u00a0Data\u00a0======\nKey\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Value\n---\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-----\npassword\u00a0\u00a0\u00a0\u00a0123456\nusername\u00a0\u00a0\u00a0\u00a0coolops\n</code></pre> <ul> <li>\u5728K8S\u96c6\u7fa4\u4e2d\u521b\u5efaRBAC\u6743\u9650</li> </ul> <pre><code>---\napiVersion:\u00a0v1\nkind:\u00a0ServiceAccount\nmetadata:\n\u00a0\u00a0name:\u00a0vault-serviceaccount\n\n---\napiVersion:\u00a0rbac.authorization.k8s.io/v1beta1\nkind:\u00a0ClusterRoleBinding\nmetadata:\n\u00a0\u00a0name:\u00a0vault-clusterrolebinding\nroleRef:\n\u00a0\u00a0apiGroup:\u00a0rbac.authorization.k8s.io\n\u00a0\u00a0kind:\u00a0ClusterRole\n\u00a0\u00a0name:\u00a0system:auth-delegator\nsubjects:\n\u00a0\u00a0-\u00a0kind:\u00a0ServiceAccount\n\u00a0\u00a0\u00a0\u00a0name:\u00a0vault-serviceaccount\n\u00a0\u00a0\u00a0\u00a0namespace:\u00a0default\n\n---\nkind:\u00a0Role\napiVersion:\u00a0rbac.authorization.k8s.io/v1\nmetadata:\n\u00a0\u00a0name:\u00a0vault-secretadmin-role\nrules:\n-\u00a0apiGroups:\u00a0[\"\"]\n\u00a0\u00a0resources:\u00a0[\"secrets\"]\n\u00a0\u00a0verbs:\u00a0[\"*\"]\n\n---\nkind:\u00a0RoleBinding\napiVersion:\u00a0rbac.authorization.k8s.io/v1\nmetadata:\n\u00a0\u00a0name:\u00a0vault-secretadmin-rolebinding\nsubjects:\n-\u00a0kind:\u00a0ServiceAccount\n\u00a0\u00a0name:\u00a0vault-serviceaccount\nroleRef:\n\u00a0\u00a0kind:\u00a0Role\n\u00a0\u00a0name:\u00a0vault-secretadmin-role\n\u00a0\u00a0apiGroup:\u00a0rbac.authorization.k8s.io\n</code></pre> <p>\u521b\u5efaRBAC\u914d\u7f6e\u6587\u4ef6</p> <pre><code>$\u00a0kubectl\u00a0apply\u00a0-f\u00a0rbac.yaml\u00a0\nserviceaccount/vault-serviceaccount\u00a0created\nclusterrolebinding.rbac.authorization.k8s.io/vault-clusterrolebinding\u00a0created\nrole.rbac.authorization.k8s.io/vault-secretadmin-role\u00a0created\nrolebinding.rbac.authorization.k8s.io/vault-secretadmin-rolebinding\u00a0created\n</code></pre>"},{"location":"vault/8vault_k8s/#k8svaultsecret","title":"\u5728K8S\u4e2d\u4f7f\u7528Vault\u4e2d\u7684Secret","text":"<p>\u8981\u83b7\u53d6\u5230Vault\u4e2d\u7684Secret\uff0c\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a</p> <ul> <li>\u4f7f\u7528vault agent\u5728initContainer\u4e2d\u5c06secret\u53d6\u51fa\u6765</li> <li>\u4f7f\u7528vault SDK\u5728\u7a0b\u5e8f\u4e2d\u83b7\u53d6</li> </ul>"},{"location":"vault/8vault_k8s/#initcontainer","title":"\u4f7f\u7528initContainer\u65b9\u5f0f","text":"<p>\u6d41\u7a0b\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u521b\u5efaConfigMap</p> <pre><code>apiVersion:\u00a0v1\ndata:\n\u00a0\u00a0vault-agent-config.hcl:\u00a0|\n\u00a0\u00a0\u00a0\u00a0#\u00a0Comment\u00a0this\u00a0out\u00a0if\u00a0running\u00a0as\u00a0sidecar\u00a0instead\u00a0of\u00a0initContainer\n\u00a0\u00a0\u00a0\u00a0exit_after_auth\u00a0=\u00a0true\n\n\u00a0\u00a0\u00a0\u00a0pid_file\u00a0=\u00a0\"/home/vault/pidfile\"\n\n\u00a0\u00a0\u00a0\u00a0auto_auth\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0method\u00a0\"kubernetes\"\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mount_path\u00a0=\u00a0\"auth/kubernetes\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0config\u00a0=\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0role\u00a0=\u00a0\"vault-demo-role\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sink\u00a0\"file\"\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0config\u00a0=\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path\u00a0=\u00a0\"/home/vault/.vault-token\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0template\u00a0{\n\u00a0\u00a0\u00a0\u00a0destination\u00a0=\u00a0\"/etc/secrets/index.html\"\n\u00a0\u00a0\u00a0\u00a0contents\u00a0=\u00a0&lt;&lt;EOT\n\u00a0\u00a0\u00a0\u00a0&lt;html&gt;\n\u00a0\u00a0\u00a0\u00a0&lt;body&gt;\n\u00a0\u00a0\u00a0\u00a0&lt;p&gt;Some\u00a0secrets:&lt;/p&gt;\n\u00a0\u00a0\u00a0\u00a0{{-\u00a0with\u00a0secret\u00a0\"secret/demo/database\"\u00a0}}\n\u00a0\u00a0\u00a0\u00a0&lt;ul&gt;\n\u00a0\u00a0\u00a0\u00a0&lt;li&gt;&lt;pre&gt;username:\u00a0{{\u00a0.Data.data.username\u00a0}}&lt;/pre&gt;&lt;/li&gt;\n\u00a0\u00a0\u00a0\u00a0&lt;li&gt;&lt;pre&gt;password:\u00a0{{\u00a0.Data.data.password\u00a0}}&lt;/pre&gt;&lt;/li&gt;\n\u00a0\u00a0\u00a0\u00a0&lt;/ul&gt;\n\u00a0\u00a0\u00a0\u00a0{{\u00a0end\u00a0}}\n\u00a0\u00a0\u00a0\u00a0&lt;/body&gt;\n\u00a0\u00a0\u00a0\u00a0&lt;/html&gt;\n\u00a0\u00a0\u00a0\u00a0EOT\n\u00a0\u00a0\u00a0\u00a0}\nkind:\u00a0ConfigMap\nmetadata:\n\u00a0\u00a0name:\u00a0example-vault-agent-config\n\u00a0\u00a0namespace:\u00a0default\n</code></pre> <p>template\u5141\u8bb8\u5c06Vault\u91cc\u4fdd\u5b58\u7684Secret\u4fdd\u5b58\u5230\u6587\u4ef6\u3002</p> <ul> <li>\u521b\u5efapod</li> </ul> <pre><code>apiVersion:\u00a0v1\nkind:\u00a0Pod\nmetadata:\n\u00a0\u00a0name:\u00a0vault-agent-example\n\u00a0\u00a0namespace:\u00a0default\nspec:\n\u00a0\u00a0serviceAccountName:\u00a0vault-serviceaccount\u00a0\n\n\u00a0\u00a0volumes:\n\u00a0\u00a0-\u00a0configMap:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0items:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-\u00a0key:\u00a0vault-agent-config.hcl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path:\u00a0vault-agent-config.hcl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name:\u00a0example-vault-agent-config\n\u00a0\u00a0\u00a0\u00a0name:\u00a0config\n\u00a0\u00a0-\u00a0emptyDir:\u00a0{}\n\u00a0\u00a0\u00a0\u00a0name:\u00a0shared-data\n\n\u00a0\u00a0initContainers:\n\u00a0\u00a0-\u00a0args:\n\u00a0\u00a0\u00a0\u00a0-\u00a0agent\n\u00a0\u00a0\u00a0\u00a0-\u00a0-config=/etc/vault/vault-agent-config.hcl\n\u00a0\u00a0\u00a0\u00a0-\u00a0-log-level=debug\n\u00a0\u00a0\u00a0\u00a0env:\n\u00a0\u00a0\u00a0\u00a0-\u00a0name:\u00a0VAULT_ADDR\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value:\u00a0http://192.168.0.153:8200\n\u00a0\u00a0\u00a0\u00a0image:\u00a0registry.cn-hangzhou.aliyuncs.com/rookieops/vault:1.6.1\u00a0\n\u00a0\u00a0\u00a0\u00a0name:\u00a0vault-agent\n\u00a0\u00a0\u00a0\u00a0volumeMounts:\n\u00a0\u00a0\u00a0\u00a0-\u00a0mountPath:\u00a0/etc/vault\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name:\u00a0config\n\u00a0\u00a0\u00a0\u00a0-\u00a0mountPath:\u00a0/etc/secrets\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name:\u00a0shared-data\n\n\u00a0\u00a0containers:\n\u00a0\u00a0-\u00a0image:\u00a0nginx\n\u00a0\u00a0\u00a0\u00a0name:\u00a0nginx-container\n\u00a0\u00a0\u00a0\u00a0ports:\n\u00a0\u00a0\u00a0\u00a0-\u00a0containerPort:\u00a080\n\u00a0\u00a0\u00a0\u00a0volumeMounts:\n\u00a0\u00a0\u00a0\u00a0-\u00a0mountPath:\u00a0/usr/share/nginx/html\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name:\u00a0shared-data\n</code></pre> <p>\u5f85pod\u8fd0\u884c\u540e\uff0c\u53ef\u4ee5\u6b63\u5e38\u83b7\u53d6\u5230vault\u91cc\u7684Secret\uff0c\u5982\u4e0b\uff1a</p> <pre><code>apiVersion:\u00a0v1\nkind:\u00a0Pod\nmetadata:\n\u00a0\u00a0name:\u00a0vault-agent-example\n\u00a0\u00a0namespace:\u00a0default\nspec:\n\u00a0\u00a0serviceAccountName:\u00a0vault-serviceaccount\u00a0\n\n\u00a0\u00a0volumes:\n\u00a0\u00a0-\u00a0configMap:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0items:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-\u00a0key:\u00a0vault-agent-config.hcl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path:\u00a0vault-agent-config.hcl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name:\u00a0example-vault-agent-config\n\u00a0\u00a0\u00a0\u00a0name:\u00a0config\n\u00a0\u00a0-\u00a0emptyDir:\u00a0{}\n\u00a0\u00a0\u00a0\u00a0name:\u00a0shared-data\n\n\u00a0\u00a0initContainers:\n\u00a0\u00a0-\u00a0args:\n\u00a0\u00a0\u00a0\u00a0-\u00a0agent\n\u00a0\u00a0\u00a0\u00a0-\u00a0-config=/etc/vault/vault-agent-config.hcl\n\u00a0\u00a0\u00a0\u00a0-\u00a0-log-level=debug\n\u00a0\u00a0\u00a0\u00a0env:\n\u00a0\u00a0\u00a0\u00a0-\u00a0name:\u00a0VAULT_ADDR\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value:\u00a0http://192.168.0.153:8200\n\u00a0\u00a0\u00a0\u00a0image:\u00a0registry.cn-hangzhou.aliyuncs.com/rookieops/vault:1.6.1\u00a0\n\u00a0\u00a0\u00a0\u00a0name:\u00a0vault-agent\n\u00a0\u00a0\u00a0\u00a0volumeMounts:\n\u00a0\u00a0\u00a0\u00a0-\u00a0mountPath:\u00a0/etc/vault\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name:\u00a0config\n\u00a0\u00a0\u00a0\u00a0-\u00a0mountPath:\u00a0/etc/secrets\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name:\u00a0shared-data\n\n\u00a0\u00a0containers:\n\u00a0\u00a0-\u00a0image:\u00a0nginx\n\u00a0\u00a0\u00a0\u00a0name:\u00a0nginx-container\n\u00a0\u00a0\u00a0\u00a0ports:\n\u00a0\u00a0\u00a0\u00a0-\u00a0containerPort:\u00a080\n\u00a0\u00a0\u00a0\u00a0volumeMounts:\n\u00a0\u00a0\u00a0\u00a0-\u00a0mountPath:\u00a0/usr/sha\n</code></pre> <p>!! \u6ce8\u610fserviceAccountName\u9700\u548c\u4e4b\u524d\u914d\u7f6e\u7684\u4fdd\u6301\u4e00\u81f4</p> <p>\u5f85pod\u8fd0\u884c\u540e\uff0c\u53ef\u4ee5\u6b63\u5e38\u83b7\u53d6\u5230vault\u91cc\u7684Secret\uff0c\u5982\u4e0b\uff1a</p> <pre><code>$\u00a0kubectl\u00a0get\u00a0po\u00a0-o\u00a0wide\nNAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0READY\u00a0\u00a0\u00a0STATUS\u00a0\u00a0\u00a0\u00a0RESTARTS\u00a0\u00a0\u00a0AGE\u00a0\u00a0\u00a0\u00a0IP\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NODE\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NOMINATED\u00a0NODE\u00a0\u00a0\u00a0READINESS\u00a0GATES\nnfs-client-prosioner-598d477ff6-fmgwf\u00a0\u00a0\u00a01/1\u00a0\u00a0\u00a0\u00a0\u00a0Running\u00a0\u00a0\u00a08\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a065d\u00a0\u00a0\u00a0\u00a0172.16.7.140\u00a0\u00a0\u00a0\u00a0\u00a0ecs-968f-0005\u00a0\u00a0\u00a0&lt;none&gt;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;none&gt;\ntraefik-5b8bb6787-dn96j\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01/1\u00a0\u00a0\u00a0\u00a0\u00a0Running\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a065d\u00a0\u00a0\u00a0\u00a0172.16.7.138\u00a0\u00a0\u00a0\u00a0\u00a0ecs-968f-0005\u00a0\u00a0\u00a0&lt;none&gt;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;none&gt;\nvault-agent-example\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01/1\u00a0\u00a0\u00a0\u00a0\u00a0Running\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0106s\u00a0\u00a0\u00a0172.16.235.231\u00a0\u00a0\u00a0k8s-master\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;none&gt;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;none&gt;\n\n$\u00a0curl\u00a0172.16.235.231\n&lt;html&gt;\n&lt;body&gt;\n&lt;p&gt;Some\u00a0secrets:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;pre&gt;username:\u00a0coolops&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;pre&gt;password:\u00a0123456&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vault/8vault_k8s/#sdk","title":"\u4f7f\u7528SDK\u65b9\u5f0f","text":"<pre><code>package\u00a0main\n\nimport\u00a0(\n\u00a0\u00a0\u00a0\u00a0\"fmt\"\n\u00a0\u00a0\u00a0\u00a0\"io/ioutil\"\n\n\u00a0\u00a0\u00a0\u00a0vaultApi\u00a0\"github.com/hashicorp/vault/api\"\n)\n\nvar\u00a0(\n\u00a0\u00a0\u00a0\u00a0vaultHost\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string\n\u00a0\u00a0\u00a0\u00a0vaultCAPath\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string\n\u00a0\u00a0\u00a0\u00a0vaultServiceAccount\u00a0string\n\u00a0\u00a0\u00a0\u00a0vaultJWTPath\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string\n)\n\nfunc\u00a0main()\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0K8S\u7684token\n\u00a0\u00a0\u00a0\u00a0vaultJWTPath\u00a0=\u00a0\"/var/run/secrets/kubernetes.io/serviceaccount/token\"\n\u00a0\u00a0\u00a0\u00a0//\u00a0sa\u540d\u5b57\n\u00a0\u00a0\u00a0\u00a0vaultServiceAccount\u00a0=\u00a0\"vault-serviceaccount\"\n\n\u00a0\u00a0\u00a0\u00a0tlsConfig\u00a0:=\u00a0&amp;vaultApi.TLSConfig{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CACert:\u00a0\u00a0\u00a0vaultCAPath,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Insecure:\u00a0false,\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0config\u00a0:=\u00a0vaultApi.DefaultConfig()\n\u00a0\u00a0\u00a0\u00a0//\u00a0vault\u5730\u5740\n\u00a0\u00a0\u00a0\u00a0config.Address\u00a0=\u00a0fmt.Sprintf(\"https://%s\",\u00a0vaultHost)\n\u00a0\u00a0\u00a0\u00a0config.ConfigureTLS(tlsConfig)\n\n\u00a0\u00a0\u00a0\u00a0client,\u00a0_\u00a0:=\u00a0vaultApi.NewClient(config)\n\u00a0\u00a0\u00a0\u00a0buf,\u00a0_\u00a0:=\u00a0ioutil.ReadFile(vaultJWTPath)\n\u00a0\u00a0\u00a0\u00a0jwt\u00a0:=\u00a0string(buf)\n\n\u00a0\u00a0\u00a0\u00a0options\u00a0:=\u00a0map[string]interface{}{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"jwt\":\u00a0\u00a0jwt,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"role\":\u00a0vaultServiceAccount,\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0loginSecret,\u00a0_\u00a0:=\u00a0client.Logical().Write(\"auth/kubernetes/login\",\u00a0options)\n\u00a0\u00a0\u00a0\u00a0client.SetToken(loginSecret.Auth.ClientToken)\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0//\u00a0secret\u5730\u5740\n\u00a0\u00a0\u00a0\u00a0secret,\u00a0_\u00a0:=\u00a0client.Logical().Read(\"database/creds/tx\")\n\u00a0\u00a0\u00a0\u00a0fmt.Println(secret)\n}\n</code></pre> <ul> <li>https://developer.hashicorp.com/vault/docs/agent/template</li> <li>https://developer.hashicorp.com/vault/tutorials/kubernetes/agent-kubernetes</li> <li>https://developer.hashicorp.com/vault/docs/agent</li> </ul>"},{"location":"vault/9vault_docker/","title":"9 \u4f7f\u7528 Docker \u548c Traefik \u642d\u5efa Vault","text":""},{"location":"vault/9vault_docker/#vault","title":"\u7f16\u5199 Vault \u914d\u7f6e\u6587\u4ef6","text":"<p>\u5728\u7f16\u5199 compose \u914d\u7f6e\u542f\u52a8\u670d\u52a1\u524d\uff0c\u6211\u4eec\u9700\u8981\u5148\u7f16\u5199 Vault \u7684\u914d\u7f6e\u3002</p> <p>\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>config.json</code> \u7684\u6587\u4ef6</p> <pre><code>{\n    \"backend\": {\n        \"file\": {\n            \"path\": \"/vault/file\"\n        }\n    },\n    \"listener\": {\n        \"tcp\": {\n            \"address\": \"0.0.0.0:8200\",\n            \"tls_disable\": 1\n        }\n    },\n    \"default_lease_ttl\": \"168h\",\n    \"max_lease_ttl\": \"720h\",\n    \"ui\": true\n}\n</code></pre> <p>\u4e0a\u9762\u8fd9\u4efd\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u51e0\u4e2a\u5185\u5bb9\uff1a</p> <ul> <li>\u9ed8\u8ba4\u6570\u636e\u5b58\u50a8\u8def\u5f84<ul> <li>\u672c\u4f8b\u4e3a\u4e86\u6f14\u793a\u65b9\u4fbf\u4f7f\u7528\u4e86\u6587\u4ef6\u50a8\u5b58\uff0c\u56e2\u961f\u5b9e\u9645\u4f7f\u7528\uff0c\u5efa\u8bae\u4f7f\u7528 Etcd \u6216\u8005\u6570\u636e\u5e93\u3001\u4e91\u5382\u5546\u50a8\u5b58\u6c60\u7b49\u65b9\u6848</li> </ul> </li> <li>\u63d0\u4f9b\u670d\u52a1\u7684\u7aef\u53e3\u5730\u5740\uff0c\u4ee5\u53ca\u662f\u5426\u5f00\u542f SSL<ul> <li>\u56e0\u4e3a\u5728\u5bb9\u5668\u4e2d\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\uff0c\u9700\u8981\u7ed1\u5b9a\u5730\u5740\u4e3a 0.0.0.0</li> <li>\u4e0d\u5f00\u542f SSL \u662f\u56e0\u4e3a\u8bc1\u4e66\u6302\u8f7d\u8fd9\u4ef6\u4e8b\uff0c\u6211\u4eec\u4ea4\u7531 Traefik \u6765\u5904\u7406</li> </ul> </li> <li>\u63a5\u53e3\u6570\u636e\u7684\u6709\u6548\u671f<ul> <li>Vault \u6240\u6709\u4ece\u63a5\u53e3\u83b7\u53d6\u7684\u6570\u636e\uff0c\u9700\u8981\u8eab\u4efd\u8ba4\u8bc1</li> </ul> </li> <li>\u5f00\u542f Vault Web UI<ul> <li>\u5982\u679c\u4e0d\u4f7f\u7528 UI \uff0c\u53ef\u4ee5\u4e0d\u8fdb\u884c\u914d\u7f6e</li> </ul> </li> </ul>"},{"location":"vault/9vault_docker/#compose","title":"\u7f16\u5199 Compose \u914d\u7f6e\u6587\u4ef6","text":"<p>\u5728\u5408\u9002\u7684\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a docker-compose.yml \u7684\u6587\u4ef6\uff0c\u5e76\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <pre><code>version: '3'\n\nservices:\n\n  vault:\n    image: vault:1.1.2\n    volumes:\n      - ./config:/vault/config:rw\n      - ./file:/vault/file:rw\n      - ./logs:/vault/logs\n    cap_add:\n      - IPC_LOCK\n    entrypoint: vault server -config=/vault/config/vault.json\n    restart: always\n    expose:\n      - 8200\n    networks:\n      - traefik\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.port=8200\"\n      - \"traefik.frontend.rule=Host:vault.lab.com\"\n      - \"traefik.frontend.entryPoints=https,http\"\n      - \"traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:*\"\n\nnetworks:\n  traefik:\n    external: true\n</code></pre> <p>\u4f7f\u7528 docker-compose up \u542f\u52a8\u670d\u52a1\uff0c\u4f1a\u770b\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u5185\u5bb9\uff1a</p> <pre><code>Creating vaultlabcom_vault_1 ... done\nAttaching to vaultlabcom_vault_1\nvault_1  | ==&gt; Vault server configuration:\nvault_1  |\nvault_1  |                      Cgo: disabled\nvault_1  |               Listener 1: tcp (addr: \"0.0.0.0:8200\", cluster address: \"0.0.0.0:8201\", max_request_duration: \"1m30s\", max_request_size: \"33554432\", tls: \"disabled\")\nvault_1  |                Log Level: info\nvault_1  |                    Mlock: supported: true, enabled: true\nvault_1  |                  Storage: file\nvault_1  |                  Version: Vault v1.1.2\nvault_1  |              Version Sha: 0082501623c0b704b87b1fbc84c2d725994bac54\nvault_1  |\nvault_1  | ==&gt; Vault server started! Log data will stream in below:\n</code></pre> <p>\u8bbf\u95ee\u6211\u4eec\u5728 Traefik \u4e2d\u5b9a\u4e49\u7684\u57df\u540d\uff1avault.lab.com \uff0c\u7136\u540e\u4f1a\u770b\u5230\u4e0b\u9762\u7684\u754c\u9762\u3002</p>"},{"location":"vault/9vault_docker/#vault_1","title":"\u914d\u7f6e\u5e76\u5f00\u59cb\u4f7f\u7528 Vault","text":"<p>\u8fd9\u91cc\u4e2a\u4eba\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u90fd\u586b\u5199\u201c1\u201d\uff0c\u51cf\u5c11\u4f7f\u7528\u7684\u201c\u590d\u6742\u5ea6\u201d\u3002</p> <p></p> <p>\u4f7f\u7528\u4e0a\u9762\u7684\u79d8\u94a5\u767b\u5f55\u7cfb\u7edf\u540e\uff0c\u5c31\u80fd\u591f\u770b\u5230\u767b\u5f55\u754c\u9762\u4e86\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u4f1a\u63d0\u4f9b\u4e00\u4e2a \u540d\u4e3a <code>cubbyhole</code> \u7684\u201c\u50a8\u5b58\u4ed3\u5e93\u201d\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u6dfb\u52a0\u4efb\u610f\u5185\u5bb9\uff0c\u6bd4\u5982</p> <p></p> <p>\u63a5\u53e3\u58f0\u660e\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 curl \u6765\u9a8c\u8bc1\u521a\u521a\u914d\u7f6e\u5185\u5bb9\u5566\uff0c\u6bd4\u5982\uff1a</p> <pre><code>curl --header \"X-Vault-Token: s.oaLMHNEBsW8KrmtDqxczfriI\" \\\n     http://vault.lab.com/v1/cubbyhole/soulteary\n</code></pre> <p>\u5f97\u5230\u7684\u54cd\u5e94\u7ed3\u679c\u5c31\u662f\u6211\u4eec\u4e4b\u524d\u8bbe\u7f6e\u7684\u5185\u5bb9\uff1a</p> <pre><code>{\"request_id\":\"7e333ef7-60e7-ea5f-a892-d53dae0fd058\",\"lease_id\":\"\",\"renewable\":false,\"lease_duration\":0,\"data\":{\"hello\":\"world\"},\"wrap_info\":null,\"warnings\":null,\"auth\":null}\n</code></pre> <p>\u5982\u679c\u4f60\u8981\u6dfb\u52a0\u5b57\u6bb5\u53ef\u4ee5\u4ece\u63a7\u5236\u53f0\u4e2d\u6dfb\u52a0\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u66f4\u7b80\u5355\u7684\u4f7f\u7528\u63a5\u53e3\u8bf7\u6c42\u6765\u5b8c\u6210\u9700\u6c42</p> <pre><code>curl -X POST \\\n    --header \"X-Vault-Token: s.oaLMHNEBsW8KrmtDqxczfriI\" \\\n    --data '{\"versions\": [1, 2]}' \\\n    http://vault.lab.com/v1/cubbyhole/soulteary\n</code></pre> <p>\u6bd4\u5982\u4e0a\u9762\u7684\u8bf7\u6c42\u5c31\u4f1a\u5728\u63a5\u53e3\u5185\u5bb9\u4e2d\u6dfb\u52a0 version \u5b57\u6bb5\uff0c\u5982\u679c\u4f60\u4f7f\u7528 curl \u53bb\u9a8c\u8bc1\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5c06\u4f1a\u5305\u542b\u6211\u4eec\u521a\u521a\u6dfb\u52a0\u7684\u5185\u5bb9\uff1a</p> <pre><code>curl -X POST \\\n    --header \"X-Vault-Token: s.oaLMHNEBsW8KrmtDqxczfriI\" \\\n    --data '{\"versions\": [1, 2]}' \\\n    http://vault.lab.com/v1/cubbyhole/soultear\n\n</code></pre>"},{"location":"vault/9vault_docker/#_1","title":"\u53bb\u6389\u8bf7\u6c42\u4e2d\u7684\u79d8\u94a5\u4f20\u8f93","text":"<p>\u5982\u679c\u662f\u5c0f\u56e2\u961f\u3001\u4e2a\u4eba\u4f7f\u7528\uff0c\u63a5\u53e3\u8c03\u7528\u8fc7\u7a0b\u4e2d\u7684\u8ba4\u8bc1\u8981\u6c42\u9a8c\u8bc1\u5c31\u663e\u5f97\u4e0d\u662f\u5f88\u5fc5\u8981\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53cd\u5411\u4ee3\u7406\u6dfb\u52a0\u989d\u5916\u7684\u9a8c\u8bc1\u5934\u7684\u6a21\u5f0f\uff0c\u6765\u8ba9\u9a8c\u8bc1\u81ea\u52a8\u5b8c\u6210\uff0c\u7b80\u5316\u8c03\u7528\u8fc7\u7a0b\u3002</p> <p>\u4f7f\u7528 Traefik \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4f1a\u975e\u5e38\u7b80\u5355\uff0c\u5728 docker-compose.yml \u4e2d\u586b\u5199\u4e0b\u9762\u7684\u914d\u7f6e:</p> <pre><code>- \"traefik.frontend.headers.customRequestHeaders=X-Vault-Token:s.oaLMHNEBsW8KrmtDqxczfriI\"\n</code></pre> <p>\u91cd\u65b0\u542f\u52a8\u5e94\u7528\uff0c\u6bcf\u5f53\u5ba2\u6237\u7aef\u8bf7\u6c42\u63a5\u53e3\u5730\u5740\u7684\u65f6\u5019\uff0cTraefik \u4f1a\u81ea\u52a8\u5e26\u4e0a\u9a8c\u8bc1\u4fe1\u606f\uff0c\u4e4b\u524d\u7684\u8c03\u7528\u8bf7\u6c42\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a</p> <pre><code>curl -X POST \\\n    --data '{\"versions\": [1, 2]}' \\\n    http://vault.lab.com/v1/cubbyhole/soulteary\n</code></pre>"},{"location":"vault/9vault_docker/#kv-v20","title":"\u4f7f\u7528 KV v2.0 \u6a21\u5f0f","text":"<p>\u4e0d\u8bba\u662f\u4f7f\u7528\u9ed8\u8ba4\u7684  cubbyhole \u50a8\u5b58\u4ed3\u5e93\u3001\u8fd8\u662f\u4f7f\u7528\u6700\u5e38\u89c1\u7684 kv \u50a8\u5b58\u4ed3\u5e93\uff0c\u9ed8\u8ba4\u6570\u636e\u662f\u6ca1\u6709\u7248\u672c\u63a7\u5236\u7684\uff0c\u6362\u8a00\u4e4b\uff0c\u4e00\u65e6\u51fa\u73b0\u9519\u8bef\u7684\u66f4\u65b0\u6216\u8005\u5220\u9664\uff0c\u539f\u59cb\u6570\u636e\u906d\u5230\u4e86\u590d\u5199\uff0c\u95ee\u9898\u662f\u4e0d\u53ef\u9006\u7684\u3002</p> <p>\u6240\u4ee5 Vault \u8fd8\u63d0\u4f9b\u4e86 \u540d\u4e3a KV v2 \u7684\u50a8\u5b58\u4ed3\u5e93\uff0c\u5728\u8fd9\u4e2a\u6a21\u5f0f\u4e4b\u4e0b\uff0c\u6570\u636e\u50a8\u5b58\u662f\u6709\u7248\u672c\u63a7\u5236\u529f\u80fd\u7684\uff0c\u4f46\u662f\u4f7f\u7528\u8d77\u6765\u7a0d\u7a0d\u9ebb\u70e6\u4e00\u4e9b\uff0c\u63a5\u53e3\u6587\u6863\u4e5f\u4e0d\u662f\u5f88\u6e05\u6670\uff0c\u6240\u4ee5\u8fd9\u91cc\u5355\u72ec\u804a\u4e00\u4e0b\uff0c\u5982\u4f55\u4f7f\u7528 v2 \u7248\u672c\u7684 KV \u8fdb\u884c\u6570\u636e\u50a8\u5b58\u3002</p> <p></p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5728\u754c\u9762\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a kv \u7684\u201c\u50a8\u5b58\u4ed3\u5e93\u201d\u3002</p>"},{"location":"vault/9vault_docker/#_2","title":"\u521b\u5efa/\u66f4\u65b0\u6570\u636e","text":"<p>\u521b\u5efa\u6570\u636e\u9700\u8981\u4f7f\u7528 POST \u65b9\u5f0f\uff0c\u6570\u636e\u9700\u8981\u4f7f\u7528 JSON \u683c\u5f0f\u8fdb\u884c\u63d0\u4ea4\uff1a</p> <pre><code>curl -X POST \\\n    -d '{\"data\":{\"value\":\"bar\"}}' \\\n    http://vault.lab.com/v1/kv/data/soulteary.json\n</code></pre> <p>\u5982\u679c\u6267\u884c\u987a\u5229\uff0c\u4f60\u5c06\u5f97\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u7ed3\u679c\uff1a</p> <pre><code>{\"request_id\":\"269cd59b-51de-b8cf-1dd9-7b7db30aac37\",\"lease_id\":\"\",\"renewable\":false,\"lease_duration\":0,\"data\":{\"created_time\":\"2019-05-02T12:54:24.4109531Z\",\"deletion_time\":\"\",\"destroyed\":false,\"version\":1},\"wrap_info\":null,\"warnings\":null,\"auth\":null}\n</code></pre> <p>\u5982\u679c\u4f60\u8981\u521b\u5efa\u7684\u6570\u636e\u5df2\u7ecf\u5b58\u5728\uff0cvault \u9ed8\u8ba4\u4f1a\u5bf9\u540c\u6837\u5730\u5740\u7684\u63a5\u53e3\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7248\u672c\u3002</p>"},{"location":"vault/9vault_docker/#_3","title":"\u83b7\u53d6\u6570\u636e","text":"<p>\u83b7\u53d6\u6570\u636e\u4f7f\u7528 GET \u65b9\u5f0f\uff0c\u4e4b\u524d\u63d0\u5230 KV 2.0 \u652f\u6301\u591a\u4e2a\u7248\u672c\uff0c\u6240\u4ee5\u8bf7\u6c42\u7684\u65f6\u5019\u53ef\u4ee5\u9009\u62e9\u6027\u7684\u5e26\u4e0a\u7248\u672c\u53c2\u6570\u3002</p> <pre><code>curl -X GET http://vault.lab.com/v1/kv/data/soulteary.json\ncurl -X GET http://vault.lab.com/v1/kv/data/soulteary.json?version=1\n</code></pre> <p>\u5982\u679c\u6267\u884c\u987a\u5229\uff0c\u4f60\u5c06\u5f97\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u7ed3\u679c\uff1a</p>"},{"location":"vault/9vault_docker/#_4","title":"\u5220\u9664/\u505c\u7528\u6570\u636e","text":"<p>\u5220\u9664\u67d0\u4e2a\u7248\u672c\u7684\u6570\u636e\u53ef\u4ee5\u4f7f\u7528\u4e24\u79cd\u65b9\u5f0f\uff0c\u7b2c\u4e00\u79cd\u65b9\u5f0f\u662f\u8bf7\u6c42\u63a5\u53e3\u4e2d\u5305\u542b delete \u5173\u952e\u5b57\uff0c\u50cf\u662f\u8fd9\u6837\uff1a</p> <pre><code>curl -X POST \\\n    -d '{\"versions\": [1, 2]}' \\\n    http://vault.lab.com/v1/kv/delete/soulteary.json\n</code></pre> <p>\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5219\u66f4\u7b80\u6d01\u4e00\u4e9b\uff0c\u4f7f\u7528 DELETE \u65b9\u6cd5\u8fdb\u884c\u8bf7\u6c42\uff1a</p> <pre><code>curl -X DELETE http://vault.lab.com/v1/kv/data/soulteary.json\n</code></pre>"},{"location":"vault/9vault_docker/#_5","title":"\u6062\u590d\u6570\u636e","text":"<p>\u6062\u590d\u6570\u636e\u548c\u5220\u9664\u6570\u636e\u7c7b\u4f3c\uff0c\u628a\u5173\u952e\u5b57\u66ff\u6362\u4e3a <code>undelete</code> \u5c31\u53ef\u4ee5\u4e86\u3002</p> <pre><code>curl -X POST \\\n    -d '{\"versions\": [1, 2]}' \\\n    http://vault.lab.com/v1/kv/undelete/soulteary.json\n</code></pre>"},{"location":"vault1/0k8s_vault/","title":"L0 \u5728 Kubernetes \u4e0a\u90e8\u7f72 Vault","text":"<p>\u5f88\u591a\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u90fd\u662f\u76f4\u63a5\u5c06\u5e94\u7528\u7a0b\u5e8f\u7684\u5bc6\u7801\u6216\u8005 <code>API Token</code> \u4e4b\u7c7b\u7684\u79c1\u5bc6\u4fe1\u606f\u76f4\u63a5\u66b4\u9732\u5728\u6e90\u4ee3\u7801\u4e2d\u7684\uff0c\u663e\u7136\u76f4\u63a5\u66b4\u9732\u8fd9\u4e9b\u79c1\u5bc6\u4fe1\u606f\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u65b9\u5f0f\u3002\u5728 <code>Kubernetes</code> \u7cfb\u7edf\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a <code>Secret</code> \u5bf9\u8c61\u6765\u5b58\u50a8\u79c1\u5bc6\u7684\u6570\u636e\uff0c\u4f46\u662f\u4e5f\u53ea\u662f\u7b80\u5355\u7684\u505a\u4e86\u4e00\u6b21 <code>Base64</code> \u7f16\u7801\u800c\u5df2\uff0c\u867d\u7136\u6bd4\u76f4\u63a5\u66b4\u9732\u8981\u597d\u70b9\u4e86\uff0c\u4f46\u662f\u5982\u679c\u662f\u4e00\u4e9b\u5b89\u5168\u6027\u8981\u6c42\u975e\u5e38\u9ad8\u7684\u5e94\u7528\u76f4\u63a5\u7528 <code>Secret</code> \u663e\u7136\u4e5f\u8fd8\u662f\u4e0d\u591f\u7684\u3002\u672c\u6587\u5c31\u5c06\u6765\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 HashiCorp Vault \u5728 <code>Kubernetes</code> \u96c6\u7fa4\u4e2d\u8fdb\u884c\u79d8\u94a5\u7ba1\u7406\u3002</p>"},{"location":"vault1/0k8s_vault/#vault","title":"Vault \u4ecb\u7ecd","text":"<p>Vault \u662f\u7528\u4e8e\u5904\u7406\u548c\u52a0\u5bc6\u6574\u4e2a\u57fa\u7840\u67b6\u6784\u79d8\u94a5\u7684\u4e2d\u5fc3\u7ba1\u7406\u670d\u52a1\u3002<code>Vault</code> \u901a\u8fc7 <code>secret</code> \u5f15\u64ce\u7ba1\u7406\u6240\u6709\u7684\u79d8\u94a5\uff0c<code>Vault</code> \u6709\u4e00\u5957 <code>secret</code>\u5f15\u64ce\u53ef\u4ee5\u4f7f\u7528\uff0c\u4e00\u822c\u60c5\u51b5\u4e3a\u4e86\u4f7f\u7528\u7b80\u5355\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 <code>kv\uff08\u952e\u503c\uff09secret</code> \u5f15\u64ce\u6765\u8fdb\u884c\u7ba1\u7406\u3002</p> <p></p>"},{"location":"vault1/0k8s_vault/#vault_1","title":"\u4f7f\u7528 Vault \u6709\u5f88\u591a\u7684\u4f18\u70b9\uff1a","text":"<ul> <li>\u79d8\u94a5\u7ba1\u7406\u670d\u52a1\u7b80\u5355\u7684\u8bf4\uff0c\u53ef\u4ee5\u770b\u505a\u540e\u7aef\u9886\u57df\u7684 <code>Password</code>\u3002\u9996\u5148\u5b83\u4f1a\u4fdd\u8bc1\u79d8\u94a5\u5b58\u50a8\u5b89\u5168\uff0c\u4e0d\u7ba1\u8c01\u62ff\u5230\u79d8\u94a5\u7ba1\u7406\u670d\u52a1\u7684\u843d\u5730\u6570\u636e\u6587\u4ef6\uff0c\u5728\u6ca1\u6709\u79d8\u94a5\u7684\u60c5\u51b5\u4e0b\u8fd8\u662f\u4e0d\u80fd\u89e3\u5bc6\u7684\u3002</li> <li>\u4ece <code>Vault</code> \u83b7\u53d6\u4e4b\u524d\u914d\u7f6e\u7684\u5bc6\u7801\u3001\u79d8\u94a5\u7b49\u5173\u952e\u6570\u636e\uff0c\u4f1a\u9700\u8981\u7531\u7ba1\u7406\u5458\u5206\u914d <code>Token</code>\uff0c\u5bf9\u8fd9\u4e9b\u5206\u914d\u7684 <code>Token</code>\uff0c\u7ba1\u7406\u5458\u53ef\u4ee5\u5236\u5b9a\u5305\u62ec\u8fc7\u671f\u3001\u64a4\u9500\u3001\u66f4\u65b0\u548c\u6743\u9650\u7ba1\u7406\u7b49\u7b49\u5404\u79cd\u5b89\u5168\u7b56\u7565</li> <li><code>Vault</code> \u7684\u5b89\u5168\u7ea7\u522b\u53ef\u4ee5\u63d0\u4f9b\u9762\u5411\u516c\u7f51\u5f00\u653e\u7684\u670d\u52a1\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e3a\u5f00\u53d1\u73af\u5883\u63d0\u4f9b\u4e00\u4e2a\u5f00\u53d1\u4eba\u5458\u7684 <code>Vault</code> \uff0c\u5728\u5bb6\u6216\u8005\u5f02\u5730\u5f00\u53d1\u4e5f\u53ef\u4ee5\u5f88\u65b9\u4fbf</li> <li>\u7ba1\u7406\u5458\u53ef\u4ee5\u968f\u65f6\u901a\u8fc7 <code>Vault</code> \u66f4\u65b0\u5404\u4e2a\u6570\u636e\u670d\u52a1\u7684\u5b89\u5168\u5bc6\u7801\u6216\u5bc6\u94a5\uff0c\u4e5f\u53ef\u4ee5\u968f\u65f6\u6536\u56de\u6216\u4fee\u6539\u7279\u5b9a <code>Token</code> \u7684\u6743\u9650\u3002\u8fd9\u5728 <code>Rolling out</code> \u66f4\u65b0\u65f6\u5f88\u6709\u7528</li> <li>\u4f7f\u7528 <code>Vault</code> \u4f1a\u5f3a\u5236\u4ee3\u7801\u901a\u8fc7 <code>Vault</code> \u63a5\u53e3\u6765\u83b7\u53d6\u5404\u79cd\u6570\u636e\u8fde\u63a5\u5bc6\u7801\u6216\u79d8\u94a5\u3002\u907f\u514d\u5f00\u53d1\u4eba\u5458\u65e0\u610f\u83b7\u5f97\u548c\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u79d8\u94a5\u5bc6\u7801\u3002\u800c\u4e14\u56e0\u4e3a <code>Vaul</code>t \u7684\u7ba1\u7406\u65b9\u5f0f\u5141\u8bb8\uff0c\u867d\u7136\u4ee3\u7801\u53ea\u6709\u4e00\u4efd\uff0c\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u5c06\u4e0d\u540c\u5f00\u53d1\u9636\u6bb5\u7684 <code>Vault</code> \u5206\u522b\u7ba1\u7406\u3002\u751a\u81f3\u53ef\u4ee5\u505a\u5230\u751f\u4ea7\u73af\u5883\u4e2d\u53ea\u6709 <code>1</code>\u4eba\u6709 <code>Vault</code> \u7ba1\u7406\u6743\u9650\uff0c\u4e5f\u4e0d\u4f1a\u89c9\u5f97\u7ef4\u62a4\u8d77\u6765\u5f88\u5403\u529b</li> <li>\u6240\u6709\u79d8\u94a5\u5b58\u53d6\u548c\u4fee\u6539\u90fd\u6709\u65e5\u5fd7\u8bb0\u5f55\u3002\u53ef\u4ee5\u4f5c\u4e3a\u4e8b\u540e\u8bc1\u636e\u6210\u4e3a\u88ab\u5165\u4fb5\u7684\u7ebf\u7d22</li> <li>\u6570\u636e\u5e93\u548c <code>API</code>\u79d8\u94a5\u4e0d\u518d\u6563\u843d\u5728\u4ee3\u7801\u5404\u5904</li> </ul>"},{"location":"vault1/0k8s_vault/#_1","title":"\u5b89\u88c5","text":"<p>\u540c\u6837\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u8fd9\u91cc\u8fd8\u662f\u4f7f\u7528 <code>Helm3</code> \u5728 <code>Kubernetes</code> \u96c6\u7fa4\u4e0a\u5b89\u88c5 <code>Vault</code>\uff0c\u5bf9\u5e94\u7684\u73af\u5883\u7248\u672c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>$  helm version\nversion.BuildInfo{Version:\"v3.0.3\", GitCommit:\"ac925eb7279f4a6955df663a0128044a8a6b7593\", GitTreeState:\"clean\", GoVersion:\"go1.13.7\"}\n</code></pre> <pre><code>$ kubectl version  \nClient Version: version.Info{Major:\"1\", Minor:\"15\", GitVersion:\"v1.15.1\", GitCommit:\"4485c6f18cee9a5d3c3b4e523bd27972b1b53892\", GitTreeState:\"clean\", BuildDate:\"2019-07-18T09:18:22Z\", GoVersion:\"go1.12.5\", Compiler:\"gc\", Platform:\"darwin/amd64\"}\nServer Version: version.Info{Major:\"1\", Minor:\"15\", GitVersion:\"v1.15.5\", GitCommit:\"20c265fef0741dd71a66480e35bd69f18351daea\", GitTreeState:\"clean\", BuildDate:\"2019-10-15T19:07:57Z\", GoVersion:\"go1.12.10\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n</code></pre> <p>\u8fd9\u91cc\u76f4\u63a5\u4f7f\u7528 <code>Vault</code>\u5b98\u65b9\u63d0\u4f9b\u7684 chart \u5305\u5b89\u88c5\u5373\u53ef\uff1ahttps://github.com/hashicorp/vault-helm\uff0c\u6539\u5305\u6ca1\u6709\u4e0a\u4f20\u5230 <code>chart</code>\u4ed3\u5e93\u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5 <code>clone</code> \u4ee3\u7801\u5230 <code>Helm3</code> \u6240\u5728\u7684\u5ba2\u6237\u7aef\u76f4\u63a5\u5b89\u88c5\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u6307\u5b9a <code>Release</code> \u7684\u538b\u7f29\u5305\u4e5f\u53ef\u4ee5\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u5b89\u88c5\uff1a</p> <pre><code>$  wget https://github.com/hashicorp/vault-helm/archive/v0.3.3.tar.gz\n\n$ helm install vault --namespace kube-system --set \"server.dev.enabled=true\" v0.3.3.tar.gz\nNAME: vault\nLAST DEPLOYED: Wed Feb 19 16:03:02 2020\nNAMESPACE: kube-system\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES:\nThank you for installing HashiCorp Vault!\n\nNow that you have deployed Vault, you should look over the docs on using\nVault with Kubernetes available here:\n\nhttps://www.vaultproject.io/docs/\n\n\nYour release is named vault. To learn more about the release, try:\n\n  $ helm status vault\n  $ helm get vault\n</code></pre> <p>\u4e0a\u9762\u7684\u547d\u4ee4\u5c31\u4f1a\u5728 <code>kube-system</code> \u547d\u540d\u7a7a\u95f4\u4e0b\u9762\u5b89\u88c5\u4e00\u4e2a\u540d\u4e3a <code>vault</code> \u7684 <code>Helm release</code>\uff1a</p> <pre><code>$ helm ls -n kube-system | grep vault\nvault   kube-system     1               2020-02-19 16:03:02.951868 +0800 CST    deployed        vault-0.3.3 \n</code></pre> <pre><code>$ kubectl get pods -n kube-system | grep vault\nvault-0                                        1/1     Running   0          25m\nvault-agent-injector-5f8c857c9f-5szkv          1/1     Running   0          25m\n</code></pre> <p>\u770b\u5230\u4e0a\u9762\u7684\u4e24\u4e2a <code>Vault</code> \u76f8\u5173\u7684 <code>Pod</code> \u8fd0\u884c\u6210\u529f\u5219\u8bc1\u660e\u5df2\u7ecf\u5b89\u88c5\u6210\u529f\u4e86\uff0c\u6240\u4ee5\u5b89\u88c5\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u63a5\u4e0b\u6765\u91cd\u70b9\u770b\u4e0b\u5982\u4f55\u4f7f\u7528\u3002</p>"},{"location":"vault1/0k8s_vault/#_2","title":"\u4f7f\u7528","text":"<p>\u5047\u5982\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a\u9700\u6c42\u662f\u5e0c\u671b <code>Vault</code> \u5c06\u6570\u636e\u5e93\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u5b58\u50a8\u5728\u5e94\u7528\u7684 <code>internal/database/config</code> \u8def\u5f84\u4e0b\u9762\uff0c\u9996\u5148\u8981\u521b\u5efa <code>secret</code> \u9700\u8981\u7ebf\u5f00\u542f <code>kv secret</code> \u5f15\u64ce\uff0c\u5e76\u5c06\u7528\u6237\u540d\u548c\u5bc6\u7801\u653e\u5728\u6307\u5b9a\u7684\u8def\u5f84\u4e2d\u3002</p> <p>\u8fdb\u5165 <code>vault-0</code> \u5bb9\u5668\u7684\u547d\u4ee4\u884c\u4ea4\u4e92\u7ec8\u7aef\uff1a</p> <pre><code>$ kubectl exec -it vault-0 /bin/sh -n kube-system\n/ $\n</code></pre> <p>\u5728 <code>internal</code> \u8def\u5f84\u4e0b\u9762\u5f00\u542f <code>kv-v2 secrets</code> \u5f15\u64ce\uff1a</p> <pre><code>/ $ vault secrets enable -path=internal kv-v2\nSuccess! Enabled the kv-v2 secrets engine at: internal/\n</code></pre> <p>\u7136\u540e\u5728 <code>internal/exampleapp/config</code> \u8def\u5f84\u4e0b\u9762\u6dfb\u52a0\u4e00\u4e2a\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u79d8\u94a5\uff1a</p> <pre><code>/ $ vault kv put internal/database/config username=\"db-readonly-username\" password=\"db-secret-password\"\nKey              Value\n---              -----\ncreated_time     2020-02-19T12:11:39.8379346Z\ndeletion_time    n/a\ndestroyed        false\nversion          1\n</code></pre> <p>\u521b\u5efa\u5b8c\u6210\u540e\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6821\u9a8c\u4e0a\u9762\u521b\u5efa\u7684 <code>secret</code>\uff1a</p> <pre><code>/ $ vault kv get internal/database/config\n====== Metadata ======\nKey              Value\n---              -----\ncreated_time     2020-02-19T12:11:39.8379346Z\ndeletion_time    n/a\ndestroyed        false\nversion          1\n\n====== Data ======\nKey         Value\n---         -----\npassword    db-secret-password\nusername    db-readonly-username\n</code></pre> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u5c06\u7528\u6237\u540d\u548c\u5bc6\u7801\u4fe1\u606f\u5b58\u50a8\u5728\u4e86 <code>Vault</code> \u4e2d\uff0c<code>Vault</code>\u63d0\u4f9b\u4e86\u4e00\u4e2a <code>Kubernetes</code> \u8ba4\u8bc1\u7684\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u5ba2\u6237\u7aef\u901a\u8fc7\u4f7f\u7528 <code>Kubernetes ServiceAccount</code> \u8fdb\u884c\u8eab\u4efd\u8ba4\u8bc1\u3002</p> <p>\u5f00\u542f <code>Kubernetes</code> \u8ba4\u8bc1\u65b9\u5f0f\uff1a</p> <pre><code>/ $ vault auth enable kubernetes\nSuccess! Enabled kubernetes auth method at: kubernetes/\n</code></pre> <p><code>Vault</code>\u4f1a\u63a5\u53d7\u6765\u81ea\u4e8e <code>Kubernetes</code> \u96c6\u7fa4\u4e2d\u7684\u4efb\u4f55\u5ba2\u6237\u7aef\u7684\u670d\u52a1 <code>Token</code>\u3002</p> <p>\u5728\u8eab\u4efd\u9a8c\u8bc1\u7684\u65f6\u5019\uff0c<code>Vault</code> \u901a\u8fc7\u914d\u7f6e\u7684 <code>Kubernetes</code>\u5730\u5740\u6765\u9a8c\u8bc1 <code>ServiceAccount</code> \u7684 <code>Token</code> \u4fe1\u606f\u3002</p> <p>\u901a\u8fc7 <code>ServiceAccount</code> \u7684 <code>Token</code>\u3001<code>Kubernetes</code>\u5730\u5740\u548c <code>CA</code>\u8bc1\u4e66\u4fe1\u606f\u914d\u7f6e <code>Kubernetes</code> \u8ba4\u8bc1\u65b9\u5f0f\uff1a</p> <pre><code>$ vault write auth/kubernetes/config \\\n    token_reviewer_jx=\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" \\\n    kubernetes_host=\"https://$KUBERNETES_PORT_443_TCP_ADDR:443\" \\\n    kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n Success! Data written to: auth/kubernetes/config   \n</code></pre> <ul> <li>\u5176\u4e2d <code>token_reviewer_jx</code> \u548c <code>kubernetes_ca_cert</code> \u90fd\u662f <code>Kubernetes</code> \u9ed8\u8ba4\u6ce8\u5165\u5230 <code>Pod</code> \u4e2d\u7684\uff0c</li> <li>\u800c\u73af\u5883\u53d8\u91cf <code>KUBERNETES_PORT_443_TCP_ADDR</code> \u4e5f\u662f\u5185\u7f6e\u7684\u8868\u793a <code>Kubernetes APIServer</code>\u7684\u5185\u7f51\u5730\u5740\u3002</li> <li>\u4e3a\u4e86\u8ba9\u5ba2\u6237\u7aef\u8bfb\u53d6\u4e0a\u4e00\u6b65\u5b9a\u4e49\u5728 <code>internal/database/config</code> \u8def\u5f84\u4e0b\u9762\u7684 <code>secret</code> \u6570\u636e\uff0c\u8fd8\u9700\u8981\u4e3a\u8be5\u8def\u5f84\u6388\u4e88 <code>read</code> \u7684\u6743\u9650\u3002</li> </ul> <p>\u8fd9\u91cc\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>internal-app</code> \u7684\u7b56\u7565\u540d\u79f0\uff0c\u8be5\u7b56\u7565\u4f1a\u542f\u7528\u5bf9\u8def\u5f84 <code>internal/database/config</code> \u4e2d\u7684 <code>secret</code> \u7684\u8bfb\u53d6\u6743\u9650\uff1a</p> <pre><code>/ $ vault policy write internal-app - &lt;&lt;EOH\n    path \"internal/data/database/config\" {\n    capabilities = [\"read\"]\n }\nEOH\nSuccess! Uploaded policy: internal-app\n</code></pre> <p>\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>internal-app</code> \u7684 <code>Kubernetes</code>\u8ba4\u8bc1\u89d2\u8272\uff1a</p> <pre><code>/$ vault write auth/kubernetes/role/internal-app \\\n    bound_service_account_names=internal-app \\\n    bound_service_account_namespaces=default \\\n    policies=internal-app \\\n    ttl=72h\nSuccess! Data written to: auth/kubernetes/role/internal-app\n</code></pre> <p>\u8be5\u89d2\u8272\u5c06 <code>Kubernetes default</code> \u547d\u540d\u7a7a\u95f4\u4e0b\u9762\u7684\u540d\u4e3a <code>internal-app</code> \u7684 <code>ServiceAccount</code> \u4e0e <code>Vault</code> \u7684 <code>internal-app</code> \u7b56\u7565\u8fde\u63a5\u5728\u4e86\u4e00\u8d77\uff0c\u8ba4\u8bc1\u540e\u8fd4\u56de\u7684 <code>Token</code>\u6709 72\u5c0f\u65f6\u7684\u6709\u6548\u671f\u3002</p> <p>\u6700\u540e\u76f4\u63a5\u9000\u51fa <code>vault-0</code>\uff1a</p> <pre><code>/ $ exit\n</code></pre> <p>\u5230\u8fd9\u91cc <code>Vault</code> \u76f8\u5173\u7684\u51c6\u5907\u5de5\u4f5c\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u5982\u4f55\u5728 <code>Kubernetes</code> \u4e2d\u6765\u8bfb\u53d6\u4e0a\u9762\u6211\u4eec\u7684 <code>Secret</code> \u6570\u636e\u3002</p> <p>\u4e0a\u9762\u6211\u4eec\u5728 <code>default</code> \u547d\u540d\u7a7a\u95f4\u4e0b\u9762\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a <code>internal-app</code> \u7684 <code>ServiceAccount</code>\uff0c\u8be5\u5bf9\u8c61\u8fd8\u4e0d\u5b58\u5728\uff0c\u9996\u5148\u5148\u521b\u5efa\uff1a(<code>vault-sa.yaml</code>)</p> <pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: internal-app  # \u9700\u8981\u548c\u4e0a\u9762\u7684 bound_service_account_names \u4e00\u81f4\n  namespace: default  # \u9700\u8981\u548c\u4e0a\u9762\u7684 bound_service_account_namespaces \u4e00\u81f4\n</code></pre> <p>\u76f4\u63a5\u521b\u5efa\u5373\u53ef\uff1a</p> <pre><code>$ kubectl apply -f vault-sa.yaml\nserviceaccount/internal-app created\n</code></pre> <pre><code>$ kubectl get sa\nNAME           SECRETS   AGE\ninternal-app   1         174m\n</code></pre> <p>\u7136\u540e\u5728\u6211\u4eec\u7684\u5e94\u7528\u4e2d\u4f7f\u7528\u4e0a\u9762\u521b\u5efa\u7684 sa \u5bf9\u8c61\uff1a(<code>vault-demo.yaml</code>)</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: vault-demo\n  labels:\n    app: vault-demo\nspec:\n  selector:\n    matchLabels:\n      app: vault-demo\n  template:\n    metadata:\n      labels:\n        app: vault-demo\n    spec:\n      serviceAccountName: internal-app  # \u4f7f\u7528\u4e0a\u9762\u521b\u5efa\u7684 serviceaccount \u5bf9\u8c61\n      containers:\n        - name: vault\n          image: cnych/vault-demo:0.0.1\n</code></pre> <p>\u5176\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u5c31\u662f <code>spec.template.spec.serviceAccountName</code> \u5b57\u6bb5\u9700\u8981\u4f7f\u7528\u4e0a\u9762\u6211\u4eec\u521b\u5efa\u7684\u540d\u4e3a <code>internal-app</code> \u7684\u8fd9\u4e2a <code>ServiceAccount</code> \u8d44\u6e90\u5bf9\u8c61\uff0c\u540c\u6837\u4e5f\u662f\u76f4\u63a5\u521b\u5efa\u5373\u53ef\uff1a</p> <pre><code>$ kubectl apply -f vault-demo.yaml \ndeployment.apps/vault-demo created\n\n$ kubectl get pods | grep vault\nvault-demo-57f86557dd-9jn2s           1/1     Running     0          13m\n</code></pre> <p>\u6b63\u5e38\u7684\u60c5\u51b5\u662f\u6211\u4eec\u90e8\u7f72\u7684 <code>Vault</code> \u4e2d\u7684 <code>vault-agent-injector</code> \u8fd9\u4e2a\u7a0b\u5e8f\u4f1a\u53bb\u67e5\u627e <code>Kubernetes</code> \u96c6\u7fa4\u4e2d\u90e8\u7f72\u5e94\u7528\u7684 <code>annotations</code> \u5c5e\u6027\u8fdb\u884c\u5904\u7406\uff0c</p> <p>\u6211\u4eec\u5f53\u524d\u7684 <code>Deployment</code> \u4e2d\u6ca1\u6709\u914d\u7f6e\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u7684 <code>vault-demo-7fb8449d7b-x8bft</code> \u8fd9\u4e2a <code>Pod</code> \u4e2d\u662f\u83b7\u53d6\u4e0d\u5230\u4efb\u4f55 <code>secret</code> \u6570\u636e\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6240\u793a\u7684\u547d\u4ee4\u8fdb\u884c\u9a8c\u8bc1\uff1a</p> <pre><code>$ kubectl exec -it vault-demo-57f86557dd-9jn2s -- ls /vault/secrets\nls: /vault/secrets: No such file or directory\ncommand terminated with exit code 1\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u5728\u5bb9\u5668\u4e2d\u73b0\u5728\u6ca1\u6709\u5bf9\u5e94\u7684 <code>secret</code> \u6570\u636e\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u901a\u8fc7 <code>annotations</code> \u6765\u6dfb\u52a0\u4e00\u4e9b\u83b7\u53d6 <code>secret</code> \u6570\u636e\u7684\u4e00\u4e9b\u8bf4\u660e\uff1a(<code>vault-inject.yaml</code>)</p> <pre><code>spec:\n  template:\n    metadata:\n      annotations:\n        vault.hashicorp.com/agent-inject: \"true\"\n        vault.hashicorp.com/role: \"internal-app\"\n        vault.hashicorp.com/agent-inject-secret-database-config.txt: \"internal/data/database/config\"\n</code></pre> <p>\u4e0a\u9762\u7684 annotations \u5b9a\u4e49\u4e86\u90e8\u5206 <code>vault</code> \u76f8\u5173\u7684\u4fe1\u606f\uff0c\u90fd\u662f\u4ee5 <code>vault.hashicorp.com</code> \u4e3a\u524d\u7f00\u5f00\u5934\u7684\u4fe1\u606f\uff1a</p> <ul> <li><code>agent-inject</code> \u7528\u4e8e\u6807\u8bc6\u542f\u7528 <code>Vault Agent</code> \u6ce8\u5165\u670d\u52a1</li> <li><code>role</code> \u8868\u793a <code>Vault Kubernetes</code> \u8eab\u4efd\u9a8c\u8bc1\u7684\u89d2\u8272</li> <li><code>agent-inject-secret-FILEPATH</code>\u4e3a\u5199\u5165 <code>/vault/secrets</code> \u7684\u6587\u4ef6 <code>database-config.txt</code> \u7684\u8def\u5f84\u4e0a\u52a0\u4e0a\u524d\u7f00\uff0c\u5bf9\u5e94\u7684\u503c\u662f <code>Vault</code>\u4e2d\u5b9a\u4e49\u7684 <code>secret</code> \u6570\u636e\u5b58\u50a8\u8def\u5f84\u3002</li> </ul> <p>\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684 <code>annotations</code> \u6765\u7ed9\u4e0a\u9762\u7684 <code>Deployment</code> \u6253\u4e00\u4e2a\u8865\u4e01\uff1a</p> <pre><code>$ kubectl patch deployment vault-demo --patch \"$(cat vault-inject.yaml)\"\ndeployment.apps/vault-demo patched\n\n$ kubectl get pods | grep  vault\nvault-demo-84cc6585fd-nkxnz                          2/2     Running     0          9m37s\n</code></pre> <p>\u73b0\u5728\u65b0\u7684 <code>Pod</code> \u4e2d\u4f1a\u5305\u542b\u4e24\u4e2a\u5bb9\u5668\uff0c</p> <ul> <li>\u4e00\u4e2a\u662f\u6211\u4eec\u5b9a\u4e49\u7684 <code>vault-demo</code> \u5bb9\u5668\uff0c</li> <li>\u53e6\u4e00\u4e2a\u662f\u540d\u4e3a <code>vault-agent</code> \u7684 <code>Vault Agent</code>\u5bb9\u5668\u3002</li> </ul> <p>\u5728 <code>Pod</code> \u4e2d\u81ea\u52a8\u6dfb\u52a0\u4e00\u4e2a <code>vault-agent</code> \u7684 <code>Sidecar</code>\u5bb9\u5668\u5176\u5b9e\u4e5f\u662f\u5229\u7528\u4e86 <code>Mutating Admission Webhook</code> \u6765\u5b9e\u73b0\u7684\uff0c\u548c <code>Istio</code> \u5b9e\u73b0\u7684\u673a\u5236\u662f\u4e00\u6837\u7684\uff1a</p> <p></p> <p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u67e5\u770b <code>vault-agent</code>\u5bb9\u5668\u7684\u65e5\u5fd7\uff1a</p> <pre><code>$ kubectl logs -f vault-demo-84cc6585fd-nkxnz  -c vault-agent\n==&gt; Vault server started! Log data will stream in below:\n\n==&gt; Vault agent configuration:\n\n                     Cgo: disabled\n               Log Level: info\n                 Version: Vault v1.3.1\n\n2020-02-19T14:03:20.069Z [INFO]  sink.file: creating file sink\n2020-02-19T14:03:20.069Z [INFO]  sink.file: file sink configured: path=/home/vault/.token mode=-rw-r-----\n2020-02-19T14:03:20.069Z [INFO]  auth.handler: starting auth handler\n2020-02-19T14:03:20.069Z [INFO]  auth.handler: authenticating\n2020-02-19T14:03:20.070Z [INFO]  template.server: starting template server\n2020/02/19 14:03:20.070117 [INFO] (runner) creating new runner (dry: false, once: false)\n2020-02-19T14:03:20.070Z [INFO]  sink.server: starting sink server\n2020/02/19 14:03:20.070986 [INFO] (runner) creating watcher\n2020-02-19T14:03:20.081Z [INFO]  auth.handler: authentication successful, sending token to sinks\n2020-02-19T14:03:20.082Z [INFO]  auth.handler: starting renewal process\n2020-02-19T14:03:20.082Z [INFO]  template.server: template server received new token\n2020/02/19 14:03:20.082340 [INFO] (runner) stopping\n2020/02/19 14:03:20.082419 [INFO] (runner) creating new runner (dry: false, once: false)\n2020/02/19 14:03:20.082936 [INFO] (runner) creating watcher\n2020/02/19 14:03:20.083005 [INFO] (runner) starting\n2020-02-19T14:03:20.083Z [INFO]  sink.file: token written: path=/home/vault/.token\n2020-02-19T14:03:20.090Z [INFO]  auth.handler: renewed auth token\n</code></pre> <p><code>vault-agent</code> \u5bb9\u5668\u4f1a\u7ba1\u7406 <code>Token</code> \u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u548c <code>secret</code> \u6570\u636e\u68c0\u7d22\uff0c\u6211\u4eec\u5b9a\u4e49\u7684 <code>secret</code> \u6570\u636e\u4f1a\u88ab\u6dfb\u52a0\u5230\u5e94\u7528\u5bb9\u5668\u7684 <code>/vault/secrets/database-config.txt</code> \u8def\u5f84\u4e0b\u9762\uff1a</p> <pre><code>$ kubectl exec -it vault-demo-84cc6585fd-nkxnz -c vault -- cat /vault/secrets/database-config.txt\ndata: map[password:db-secret-password username:db-readonly-username]\nmetadata: map[created_time:2020-02-19T12:11:39.8379346Z deletion_time: destroyed:false version:1]\n</code></pre> <p>\u5230\u8fd9\u91cc <code>secret</code> \u6570\u636e\u5c31\u6210\u529f\u7684\u5b58\u50a8\u5728\u4e86\u6211\u4eec\u7684\u5e94\u7528\u5bb9\u5668\u4e2d\uff0c\u5f53\u7136\u5bf9\u4e8e\u5b9e\u9645\u7684\u5e94\u7528\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 <code>Vault</code> \u63d0\u4f9b\u7684 <code>SDK</code> \u76f4\u63a5\u53bb\u8bfb\u53d6\u5bf9\u5e94\u7684 <code>secret</code> \u6570\u636e\u3002\u6bd4\u5982\u4e0b\u9762\u5c31\u662f\u4e00\u6bb5\u901a\u8fc7 <code>Vault SDK</code> \u8bfb\u53d6\u52a8\u6001\u8ba4\u8bc1\u6570\u636e\u7684\u793a\u4f8b\uff1a</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n\n    vaultApi \"github.com/hashicorp/vault/api\"\n)\n\nvar (\n    vaultHost           string\n    vaultCAPath         string\n    vaultServiceAccount string\n    vaultJWTPath        string\n)\n\nfunc main() {\n    vaultJWTPath = \"/var/run/secrets/kubernetes.io/serviceaccount/token\"\n    vaultServiceAccount = \"internal-app\"\n\n    tlsConfig := &amp;vaultApi.TLSConfig{\n        CACert:   vaultCAPath,\n        Insecure: false,\n    }\n\n    config := vaultApi.DefaultConfig()\n    // todo\uff0c\u914d\u7f6e vault \u5730\u5740\n    config.Address = fmt.Sprintf(\"https://%s\", vaultHost)\n    config.ConfigureTLS(tlsConfig)\n\n    client, _ := vaultApi.NewClient(config)\n    buf, _ := ioutil.ReadFile(vaultJWTPath)\n    jwt := string(buf)\n\n    options := map[string]interface{}{\n        \"jwt\":  jwt,\n        \"role\": vaultServiceAccount,\n    }\n    loginSecret, _ := client.Logical().Write(\"auth/kubernetes/login\", options)\n    client.SetToken(loginSecret.Auth.ClientToken)\n\n    secret, _ := client.Logical().Read(\"internal/data/database/config\")\n    fmt.Println(secret)\n}\n</code></pre> <p>\u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f\u4e0a\u9762\u6211\u4eec\u5b9a\u4e49\u7684\u8ba4\u8bc1\u89d2\u8272\u53ea\u6709 <code>72</code>\u5c0f\u65f6\uff0c\u662f\u6709\u8fc7\u671f\u65f6\u95f4\u7684\uff0c\u5728\u5230\u671f\u524d\u53ef\u4ee5\u6267\u884c <code>renew</code> \u64cd\u4f5c\uff0c\u5982\u679c <code>token</code> \u6240\u5c5e\u7684 <code>policy</code> \u6709 <code>/auth/token/renew-self</code> \u76f8\u5e94\u7684\u6743\u9650\uff0c\u90a3\u4e48\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u4ee3\u7801\u4e2d\u81ea\u5df1 <code>renew</code> \u81ea\u5df1\u3002</p> <pre><code>vault token renew your-vault-token\n</code></pre> <p>\u66f4\u591a\u7684\u5173\u4e8e Vault \u548c Kubernetes \u7684\u7ed3\u5408\u4f7f\u7528\u53ef\u4ee5\u67e5\u770b\u5b98\u65b9\u6587\u6863 https://learn.hashicorp.com/vault/getting-started-k8s/k8s-intro \u4e86\u89e3\u66f4\u591a\u3002</p>"},{"location":"vault1/1Vault_basic/","title":"L1 Hashcorp Vault \u57fa\u7840\u4f7f\u7528\u6559\u7a0b","text":"<p>\u6211\u4eec\u5728\u5de5\u4f5c\u4e2d\u662f\u5982\u4f55\u7ba1\u7406\u5927\u91cf\u7684 Secret \u4fe1\u606f\u7684\uff1f\uff08\u6bd4\u5982\u7b14\u8005\u7684\u9879\u76ee\u4e2d\u4f1a\u6d89\u53ca\u5230\u5bf9 OpenSSH \u7684\u79d8\u94a5\u53ca\u53e3\u4ee4\u5b58\u50a8\u3001\u4ee5\u53ca\u5bf9\u6b64\u7684\u5b9a\u65f6\u8f6e\u8f6c\u53ca\u5916\u90e8\u8c03\u7528\uff09</p> <ul> <li>\u4ee5\u914d\u7f6e\u6587\u4ef6\u7684\u5f62\u5f0f\u56fa\u5316\uff0c\u5b58\u653e\u4e8e\u670d\u52a1\u5668\u6587\u4ef6\u6216\u8005 Database \u4e2d</li> <li>\u4ee5\u4ee3\u7801\u7684\u65b9\u5f0f\u5b58\u5728\u4e8e git \u79c1\u6709\u4ed3\u5e93\u4e0a\uff0c\u5e76\u4e25\u683c\u63a7\u5236\u6b64\u5e93\u7684\u8bbf\u95ee\u6743\u9650</li> <li>\u4ee5 KMS\uff08Key Management Service\uff0c\u4e91\u670d\u52a1\u5c45\u591a\uff09\u65b9\u5f0f\u6258\u7ba1\u5728\u516c\u6709\u4e91\u670d\u52a1\u4e0a</li> <li>\u6765\u81ea\u4e91\u4e0a\u7684\u6311\u6218\uff1aUnlocking the Cloud Operating Model(https://www.hashicorp.com/cloud-operating-model)</li> </ul> <p>\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u7684\u901a\u7528\u5bc6\u7801\u4ed3\u5e93\u9700\u8981\u6ee1\u8db3\u5982\u4e0b\u7279\u6027\uff1a</p> <ul> <li>\u5bc6\u6587\u5b58\u50a8\uff08\u517c\u987e\u590d\u6742\u6027\uff09</li> <li>\u901a\u7528\u6027\uff0c\u51cf\u5c11\u4eba\u5de5\u4fee\u6539 Secret \u7684\u5de5\u4f5c\u91cf\uff0c\u5373\u63d0\u4f9b RestfulAPI</li> <li>\u6743\u9650\u63a7\u5236</li> </ul> <p>\u672c\u6587\u8981\u4ecb\u7ecd Vault \u8fd9\u6b3e\u5f00\u6e90\u7684 Secret \u7ba1\u7406\u5de5\u5177\uff08\u53e3\u4ee4\u3001token\u3001\u79c1\u94a5\u53ca\u8bc1\u4e66\u7b49\u7b49\uff09\uff0c\u662f\u7ba1\u7406\u4ee3\u7801\u4e2d\u53e3\u4ee4\u3001\u79d8\u94a5\uff08\u9632\u6b62\u660e\u6587\u6cc4\u6f0f\uff09\u6781\u4f73\u7684\u5e94\u7528\u5b9e\u8df5\u3002</p> <p>\u6b64\u5916\uff0cKMS\uff08Key Management Service\uff0c\u4e91\u670d\u52a1\u5c45\u591a\uff09\u4e5f\u662f\u8f83\u597d\u7684 Secret \u7ba1\u7406\u5b9e\u8df5\u3002vault \u9879\u76ee\u6e90\u7801 \u5728\u6b64(https://github.com/hashicorp/vault)</p> <p>\u9488\u5bf9\u6b64\u7c7b\u4ea7\u54c1\uff0c\u9700\u8981\u7740\u91cd\u5173\u6ce8\u4ee5\u4e0b\u51e0\u70b9\uff1a</p> <ul> <li>Secret \u7684\u5b58\u50a8\u65b9\u5f0f\uff0c\u652f\u6301\u7684\u5b58\u50a8\u540e\u7aef</li> <li>Secret \u7684\u52a0\u5bc6\u65b9\u5f0f\u53ca\u7b97\u6cd5</li> <li>\u7cfb\u7edf\u7684\u6743\u9650\u63a7\u5236\u3001\u6743\u9650\u5206\u914d\uff08\u54ea\u4e9b\u4eba / \u5ba2\u6237\u7aef\u80fd\u8bbf\u95ee\u54ea\u4e9b\u673a\u5668\u7684 Secret\uff09</li> <li>\u7cfb\u7edf\u7684\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u5ba2\u6237\u7aef\u4f7f\u7528\u4ec0\u4e48\u65b9\u5f0f\u8bbf\u95ee RestfulAPI</li> <li>\u7cfb\u7edf\u7684 Secret \u5b58\u50a8\u65b9\u5f0f\u53ca\u8fc7\u671f\u673a\u5236</li> <li>\u7cfb\u7edf\u7684\u9ad8\u53ef\u7528\u6027\u5982\u4f55\u4fdd\u8bc1</li> <li>\u7cfb\u7edf\u5bf9\u5916\u63a5\u53e3\u7684 QPS \u53ca\u5e76\u53d1\u6027\u80fd</li> </ul>"},{"location":"vault1/1Vault_basic/#1-vault","title":"1 Vault \u57fa\u672c\u539f\u7406","text":"<p>\u5b98\u65b9\u6587\u6863(https://www.vaultproject.io/docs/internals/architecture)\u3002vault \u7684\u57fa\u7840\u5e94\u7528\u573a\u666f\u5982\u4e0b\uff1a</p> <p></p> <p>Vault \u7684\u4f7f\u7528\u573a\u666f\u4e00\u822c\u4e3a\uff1a</p> <ul> <li>\u7cfb\u7edf\u7528\u6237\uff08\u5982\u8fd0\u7ef4\u540c\u4e8b\uff09\u901a\u8fc7 <code>HTTP-Vault-API</code>\u3001Vault \u547d\u4ee4\u884c\u5de5\u5177\u7b49\u5c06 Secret data \u5199\u5165 Vault</li> <li>Vault \u518d\u5c06\u52a0\u5bc6\u7684\u6570\u636e\u5b58\u50a8\u5230\u540e\u7aef</li> <li>\u5916\u90e8\u7528\u6237\uff08\u5982\u5f00\u53d1\u4eba\u5458\uff0c\u5404\u7c7b\u811a\u672c\u6216\u8005\u5e94\u7528\u7a0b\u5e8f\uff09\u901a\u8fc7 <code>HTTP-Vault-API</code>\u3001Vault \u547d\u4ee4\u884c\u5de5\u5177\u7b49\u65b9\u5f0f\u6765\u83b7\u53d6\u5230\u4ec5\u4ec5\u4e0e\u81ea\u5df1\u8d26\u53f7\u76f8\u5173\u8054\u7684 Secret data\uff0c\u8fd9\u91cc\u5c31\u6d89\u53ca\u5230 Valut \u7684\u6743\u9650\u7ec6\u7c92\u5ea6\u7ba1\u7406</li> </ul> <p>vault \u7684\u67b6\u6784\u5982\u4e0b\uff1a</p> <p></p> <p>\u4ece\u67b6\u6784\u56fe\u53ef\u4ee5\u770b\u51fa\uff0cVault \u5206\u4e3a Storage Backend\u3001\u5b89\u5168\u5c4f\u969c\uff08Barrier\uff09 \u548c HTTP API \u4e09\u4e2a\u90e8\u5206\uff0c</p> <ul> <li>Storage Backend \u548c Vault \u4e4b\u95f4\u7684\u6240\u6709\u6570\u636e\u6d41\u52a8\u90fd\u9700\u8981\u7ecf\u8fc7 Barrier</li> <li>Barrier \u786e\u4fdd\u53ea\u6709\u52a0\u5bc6\u6570\u636e\u4f1a\u88ab\u5199\u5165 Storage Backend\uff0c</li> <li>\u52a0\u5bc6\u6570\u636e\u5728\u7ecf\u8fc7 Barrier \u88ab\u8bfb\u51fa\u7684\u8fc7\u7a0b\u4e2d\u88ab\u9a8c\u8bc1\u4e0e\u89e3\u5bc6\u3002</li> </ul> <p>\u5176\u4ed6\u4e3b\u8981\u7ec4\u4ef6\u7684\u529f\u80fd\u5982\u4e0b\uff1a</p> <ul> <li>HTTP(s) API:</li> <li>Storage backend\uff1a</li> <li>Token Store\uff1a</li> <li>Auth Method\uff1a</li> <li>Core\uff1a\u8d1f\u8d23\u5904\u7406\u5ba1\u6838\u4ee3\u7406\uff08Audit brok\uff09\u7684\u8bf7\u6c42\u53ca\u54cd\u5e94\u65e5\u5fd7\uff0c\u5c06\u8bf7\u6c42\u53d1\u9001\u5230\u6240\u6709\u5df2\u914d\u7f6e\u7684\u5ba1\u6838\u8bbe\u5907\uff08Audit devices\uff09</li> <li>Policy store\uff1a\u8d1f\u8d23\u7ba1\u7406\u548c\u5b58\u50a8 ACL Policies\uff0c\u7531 Core \u8fdb\u884c ACL Policy \u7684\u68c0\u67e5</li> </ul>"},{"location":"vault1/1Vault_basic/#vault","title":"Vault \u7684\u6570\u636e\u6d41","text":""},{"location":"vault1/1Vault_basic/#2-vault","title":"2 Vault \u7684\u4e3b\u8981\u8fd0\u884c\u6d41\u7a0b","text":""},{"location":"vault1/1Vault_basic/#step1","title":"Step1\uff1a\u6570\u636e\u5b58\u50a8\u53ca\u52a0\u5bc6\u89e3\u5bc6","text":"<p>\u4e86\u89e3\u51e0\u4e2a\u540d\u8bcd\uff1a1\u3001Storage Backend\uff08\u540e\u7aef\u5b58\u50a8\uff09: Vault \u81ea\u8eab\u4e0d\u5b58\u50a8\u6570\u636e\uff0c\u9700\u8981\u4e3a\u5176\u914d\u7f6e Storage Backend\u3002\u6ce8\u610f\uff01\uff01Storage Backend \u662f\u4e0d\u53d7\u4fe1\u4efb\u7684\uff0c\u53ea\u7528\u4e8e\u5b58\u50a8\u52a0\u5bc6\u6570\u636e</p> <p>2\u3001Initialaztion: Vault \u5728\u9996\u6b21\u542f\u52a8\u65f6\u9700\u8981\u521d\u59cb\u5316\uff0c\u8fd9\u4e00\u6b65\u751f\u6210\u4e00\u4e2a\u52a0\u5bc6\u5bc6\u94a5\uff08Encryption key\uff09\u7528\u4e8e\u52a0\u5bc6\u6570\u636e\uff0c\u52a0\u5bc6\u5b8c\u6210\u7684\u6570\u636e\u624d\u80fd\u88ab\u4fdd\u5b58\u5230 Storage Backend</p> <p>3\u3001Unseal\uff08\u89e3\u5c01\uff09: Vault \u542f\u52a8\u540e\uff0c\u56e0\u4e3a\u4e0d\u77e5\u9053\u52a0\u5bc6\u5bc6\u94a5\uff08Encryption Key\uff09\uff0c\u5b83\u4f1a\u8fdb\u5165\u5c01\u5370\uff08Sealed\uff09\u72b6\u6001\uff0c\u5728\u88ab\u89e3\u5c01\u524d\u65e0\u6cd5\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002</p> <p>Encryption Key \u88ab Master key \u4fdd\u62a4\uff0c\u5fc5\u987b\u63d0\u4f9b Master key \u624d\u80fd\u5b8c\u6210 Unseal \u64cd\u4f5c</p> <p>Master key \u548c Encryption Key \u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p>"},{"location":"vault1/1Vault_basic/#step2","title":"Step2\uff1a\u8ba4\u8bc1 &amp;&amp; \u6743\u9650\u7ba1\u7406","text":"<p>\u5728 Unseal\uff08\u89e3\u5c01\uff09 \u64cd\u4f5c\u5b8c\u6210\u540e\uff0cVault \u624d\u53ef\u4ee5\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u5ba2\u6237\u7aef\u9996\u6b21\u8fde\u63a5 Vault \u65f6\uff0c\u9700\u8981\u5148\u5b8c\u6210\u8eab\u4efd\u8ba4\u8bc1\u3002\u5ba2\u6237\u7aef\u7684\u8eab\u4efd\u8ba4\u8bc1\u65b9\u5f0f\u6709\uff1a</p> <ul> <li>\u9002\u5408\u7528\u6237\uff1a\u7528\u6237\u540d / \u5bc6\u7801\u3001LDAP \u8ba4\u8bc1\u7b49\uff0c\u540c\u65f6\u7528\u6237\u9700\u8981\u88ab\u6388\u4e88\u5408\u9002\u7684\u6743\u9650\u7528\u6765\u8bbf\u95ee Vault</li> <li>\u9002\u5408\u5e94\u7528\uff1aPublic/Private keys\u3001Tokens \u6216\u8005 Jwt Token \u7b49</li> </ul> <p>\u6b64\u4e00\u822c\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li>\u5ba2\u6237\u7aef\u53d1\u8d77\u8eab\u4efd\u9a8c\u8bc1\u8bf7\u6c42\uff0c\u8be5\u8bf7\u6c42\u6d41\u7ecf Core \u6a21\u5757\u5e76\u8fdb\u5165 Auth methods\uff0cAuth methods \u786e\u5b9a\u8bf7\u6c42\u662f\u5426\u6709\u6548\u5e76\u8fd4\u56de\u5173\u8054\u7b56\u7565\uff08Policies\uff09\u7684\u5217\u8868\u3002</li> <li>\u5728\u901a\u8fc7 Auth methods \u5b8c\u6210\u4e86\u8eab\u4efd\u8ba4\u8bc1\uff0c\u5e76\u4e14\u68c0\u67e5\u7684\u5173\u8054\u7b56\u7565\u4e5f\u7b26\u5408\u6388\u6743\u4e4b\u540e\uff0cToken Store \u5c06\u4f1a\u751f\u6210\u5e76\u7ba1\u7406\u4e00\u4e2a\u65b0\u7684 Token\uff0c \u8fd9\u4e2a Token \u4f1a\u88ab\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u8fdb\u884c\u540e\u7eed\u8bf7\u6c42\u3002</li> <li>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b64 token \u4e5f\u90fd\u5b58\u5728\u4e00\u4e2a Lease \u79df\u671f\uff08\u6709\u6548\u671f\uff09\uff0c\u540c\u65f6 Token \u5173\u8054\u4e86\u76f8\u5173\u7684\u7b56\u7565 Policies\uff0c\u8fd9\u4e9b\u7b56\u7565\u5c06\u88ab\u7528\u4e8e\u9a8c\u8bc1\u8bf7\u6c42\u7684\u6743\u9650\u3002</li> <li>\u8bf7\u6c42\u7ecf\u8fc7\u9a8c\u8bc1\u540e\uff0c\u5c06\u88ab\u8def\u7531\u5230 Secret engine \u6a21\u5757\u3002</li> <li>\u5982\u679c Secret engine \u8fd4\u56de\u4e86\u4e00\u4e2a Secret\uff08\u7531 Vault \u81ea\u52a8\u751f\u6210\u7684 Secret\uff09\uff0c Core \u4f1a\u5c06\u5176\u6ce8\u518c\u5230 Expiration manager\uff0c\u5e76\u7ed9\u5b83\u9644\u52a0\u4e00\u4e2a lease ID\u3002</li> <li>lease ID \u88ab\u5ba2\u6237\u7aef\u7528\u4e8e\u66f4\u65b0\uff08Renew\uff09\u6216\u540a\u9500\uff08Revoke\uff09\u5b83\u5f97\u5230\u7684 Secret\u3002</li> <li>\u5982\u679c\u5ba2\u6237\u7aef\u5141\u8bb8\u79df\u7ea6\uff08Lease\uff09\u5230\u671f\uff0cExpiration manager \u5c06\u81ea\u52a8\u540a\u9500\u8fd9\u4e2a Secret Token</li> </ol>"},{"location":"vault1/1Vault_basic/#step3secret-engine","title":"Step3\uff1aSecret Engine\uff08\u91cd\u8981\uff09","text":"<p>Secret Engine \u662f Vault \u7cfb\u7edf\u4fdd\u5b58\u3001\u751f\u6210\u6216\u8005\u52a0\u5bc6\u6570\u636e\u7684\u7ec4\u4ef6\u3002Secret Engine \u7c7b\u4f3c\u4e00\u4e2a\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u6709\u7684 read/write/delete/list \u64cd\u4f5c\u7b49\u90fd\u5728\u5b83\u4e0b\u9762\u8fdb\u884c\u7684\uff0c\u7136\u540e Secret Engine \u53ef\u4ee5\u81ea\u5df1\u51b3\u5b9a\u5982\u4f55\u6765\u54cd\u5e94\u8bf7\u6c42\u3002</p> <p>\u4ece\u4ee3\u7801\u8bbe\u8ba1\u89d2\u5ea6\u800c\u8a00\uff0cSecret Engine \u4e00\u79cd\u62bd\u8c61\uff0c\u5b83\u5bf9\u4e0a\u5c42\uff08\u8c03\u7528\u65b9\uff09\u63d0\u4f9b\u7edf\u4e00\u7684\u63a5\u53e3\uff0c\u5982\u7269\u7406\u6587\u4ef6\u7cfb\u7edf\u3001\u6570\u636e\u5e93\u7b49\u7b49\uff0c\u90fd\u53ef\u4ee5\u7edf\u4e00\u4f7f\u7528\u589e\u5220\u6539\u67e5\u8fd9\u4e9b\u64cd\u4f5c\u63a5\u53e3\u3002\u5e38\u7528\u7684 Engine \u6709\u5982\u4e0b\u51e0\u79cd\uff1a</p> <ul> <li>kv\uff1a\u952e\u503c\u5b58\u50a8\u3002\u53ef\u770b\u4f5c\u4e00\u4e2a\u52a0\u5bc6\u7684 Redis\uff0c\u53ea\u662f\u5355\u7eaf\u5730\u5b58\u50a8 / \u8bfb\u53d6\u4e00\u4e9b\u9759\u6001\u7684\u914d\u7f6e / \u6570\u636e</li> <li>Transit Secrets Engine\uff1a\u63d0\u4f9b\u52a0\u5bc6\u5373\u670d\u52a1\u7684\u529f\u80fd\uff0c\u53ea\u8d1f\u8d23\u52a0\u5bc6\u548c\u89e3\u5bc6\uff0c\u4e0d\u8d1f\u8d23\u5b58\u50a8\u3002\u4e3b\u8981\u5e94\u7528\u573a\u666f\u662f\u63d0\u4f9b App \u52a0\u89e3\u5bc6\u6570\u636e\uff0c\u4f46\u662f\u6570\u636e\u4ecd\u65e7\u5b58\u50a8\u5728 MySQL \u7b49\u6570\u636e\u5e93\u4e2d</li> <li>\u8bc1\u4e66\u7ba1\u7406\uff1a\u6700\u5e38\u89c1\u7684\u573a\u666f\u662f\u5c06\u6839\u8bc1\u4e66\uff08root\uff09\u5b58\u5165 Vault\uff0c\u4e1a\u52a1\u8bc1\u4e66\u901a\u8fc7\u6b64 Engine \u7b7e\u53d1</li> </ul> <p>\u53ef\u4ee5\u901a\u8fc7\u6307\u4ee4 vault secrets list \u67e5\u770b Vault \u4e2d\u5f53\u524d\u5f00\u542f\u4e86\u54ea\u4e9b Secret Engine\uff1a</p> <pre><code>[root@VM_120_245_centos ~/vault]# vault secrets enable -path=secret_bifrost kv\nSuccess! Enabled the kv secrets engine at: secret_bifrost/\n[root@VM_120_245_centos ~/vault]# vault secrets list\nPath               Type         Accessor              Description\n----               ----         --------              -----------\ncubbyhole/         cubbyhole    cubbyhole_e86bac2b    per-token private secret storage\nidentity/          identity     identity_19b16864     identity store\nkv/                kv           kv_988a3c7e           n/a\nsecret/            kv           kv_4a27cb62           n/a\nsecret_bifrost/    kv           kv_0b5b6ac3           n/a\nsys/               system       system_8d02021f       system endpoints used for control, policy and debugging\nvault/             kv           kv_e26a68a4           n/a\n</code></pre> <p>\u4ece\u6307\u4ee4\u8f93\u51fa\u53ef\u77e5\uff1a\u6709 4 \u4e2a\u7c7b\u578b\u4e3a kv\uff08\u952e\u503c\u5bf9\u52a0\u5bc6\u5b58\u50a8\uff09 \u7684\u5f15\u64ce\uff0c\u5206\u522b\u52a0\u8f7d\u5230\u4e86 <code>kv/</code>\u3001 <code>secret/</code>\u3001<code>secret_bifrost/</code> \u53ca <code>vault/</code> \u8def\u5f84\u4e0a\uff1b</p> <p>\u5176\u4ed6\u51e0\u4e2a Engine \u662f Vault \u5185\u90e8\u652f\u6491\u3002\u4e4b\u6240\u4ee5\u80fd\u591f\u5411\u6307\u5b9a\u7684\u8def\u5f84\u8fdb\u884c\u8bfb\u5199\uff0c\u662f\u56e0\u4e3a\u6709 Secret Engine \u7684\u652f\u6301\uff0c\u672a\u52a0\u8f7d\u7684\u8def\u5f84\u662f\u4e0d\u80fd\u8bbf\u95ee\u7684\uff08\u4f1a\u62a5\u9519\uff09\uff0c\u4e0d\u80fd\u540c\u65f6\u5f00\u542f\u76f8\u540c\u7684\u8def\u5f84\u3002</p> <p>\u6b64\u5916\uff0c\u540c\u4e00\u4e2a Secret Engine \u53ef\u4ee5\u88ab\u52a0\u8f7d\u5230\u4e0d\u540c\u7684\u8def\u5f84\u4e0b\uff08\u4e00\u4e2a Secret Engine \u7c7b\u7684\u591a\u4e2a\u5b9e\u4f8b\uff09\uff0c\u6bcf\u4e2a\u8def\u5f84\u4e0b\u7684\u6570\u636e\u90fd\u662f\u5f7c\u6b64\u72ec\u7acb\u7684\u3002</p> <p></p>"},{"location":"vault1/1Vault_basic/#3-vault-details","title":"3 Vault Details","text":""},{"location":"vault1/1Vault_basic/#shamir-shamir-secret-sharing","title":"Shamir \u5bc6\u94a5\u5206\u4eab\u7b97\u6cd5\uff08shamir secret sharing\uff09","text":"<p>Vault \u4e2d\u7ed9\u51fa\u4e86 Shamir \u7b97\u6cd5\u7684\u5b9e\u73b0\uff0c\u8be5\u5bc6\u94a5\u5206\u4eab\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u5206\u53d1\u8005\u901a\u8fc7\u79d8\u5bc6\u591a\u9879\u5f0f\uff0c\u5c06\u79d8\u5bc6 Secret \u5206\u89e3\u4e3a n \u4e2a\u79d8\u5bc6\u6301\u6709\u8005\uff0c\u5176\u4e2d\u4efb\u610f\u81f3\u5c11\u4e8e k \u4e2a\u79d8\u5bc6\u5747\u80fd\u6062\u590d\u5bc6\u6587\uff0c\u5373\u67d0\u4e00\u4e2a\u79d8\u5bc6\u901a\u5e38\u4e0d\u80fd\u7531\u5355\u4e2a\u6301\u6709\u8005\u4fdd\u5b58\uff0c\u5fc5\u987b\u5c06\u79d8\u5bc6\u5206\u7531\u591a\u4eba\u4fdd\u7ba1\u5e76\u4e14\u53ea\u6709\u5f53\u591a\u4eba\u540c\u65f6\u5728\u573a\u65f6\u79d8\u5bc6\u624d\u80fd\u5f97\u4ee5\u6062\u590d\u3002</p> <p></p>"},{"location":"vault1/1Vault_basic/#vault_1","title":"Vault \u8ba4\u8bc1\u65b9\u6cd5","text":"<p>Vault \u652f\u6301 \u5982\u4e0b \u7684\u8eab\u4efd\u8ba4\u8bc1\u673a\u5236\uff1a</p> <p>1\u3001Token \u65b9\u5f0f Token \u662f Vault \u5185\u7f6e\u7684\u9a8c\u8bc1\u65b9\u6cd5\uff0c\u542f\u52a8\u65f6\u5373\u88ab\u52a0\u8f7d\uff0c\u4e14\u4e0d\u80fd\u7981\u7528\u3002</p> <p>\u4f8b\u5982\uff0c\u670d\u52a1\u5668\u521d\u59cb\u5316\u65f6\u4f1a\u8f93\u51fa Root Token\uff0c\u4f7f\u7528 Root Token \u767b\u5f55\u7684\u7528\u6237\u5177\u6709\u7cfb\u7edf\u6700\u9ad8\u7684\u8bbf\u95ee\u6743\u9650\u3002\u5728 Vault \u4e2d\uff0cToken \u662f\u53ef\u7ee7\u627f\u7684\u6811\u578b\u7ed3\u6784\uff0c\u6b64 &lt;\u7ee7\u627f&gt; \u5305\u62ec\u4e24\u65b9\u9762\u7684\u542b\u4e49\uff1a</p> <ul> <li>\u6301\u6709 Token \u7684\u7528\u6237\u521b\u5efa\u65b0\u7684 Token\uff08Child Token\uff09\uff0c\u9ed8\u8ba4 Child Token \u6743\u9650\u548c\u7236 Token \u76f8\u540c\uff08\u5982\u9700\u7279\u522b\u6307\u5b9a\u6743\u9650\uff09</li> <li>\u5f53\u64a4\u9500\uff08Revoke\uff09\u67d0\u4e2a Token \u65f6\uff0c\u5176\u6240\u521b\u5efa\u7684 Child Token\uff0c\u4ee5\u53ca Child Token \u7684 Child Token\uff08\u7b49\u7b49\uff09 \u90fd\u4f1a\u88ab\u4e00\u5e76\u5220\u9664\uff0c\u4ece\u6811\u7684\u89d2\u5ea6\u4e0d\u96be\u7406\u89e3</li> </ul> <p>2\u3001AppRole \u65b9\u5f0fAppRole \u662f Vault \u4e3a App \u5e94\u7528\u63d0\u4f9b\u7684\u4e00\u79cd\u8f83\u4e3a\u5b89\u5168\u7684\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u63a8\u8350\u4f7f\u7528\u3002\u4f7f\u7528 AppRole \u7684\u4e00\u822c\u6d41\u7a0b\u4e3a\uff08From\u5b98\u7f51\uff09\uff1a</p> <pre><code>#1\u3001\u521b\u5efa\u53ea\u8bfb policy \u6587\u4ef6\u6a21\u677f readonly\n[root@VM_120_245_centos /vault]# cat readonly\n# Read-only permission on secrets stored at 'secret/data/mysql/webapp'\npath \"secret/data/mysql/webapp\" {\n  capabilities = [\"read\"]\n}\n#2\u3001\u52a0\u8f7d policy\n[root@VM_120_245_centos /vault]# vault policy write readonly readonly&lt;br&gt;\nSuccess! Uploaded policy: readonly\n#3\u3001\u521b\u5efa\u5e26 TTL \u7684 token\n[root@VM_120_245_centos /vault]# vault write auth/approle/role/readonly token_policies=\"readonly\" token_ttl=1h token_max_ttl=4h\nSuccess! Data written to: auth/approle/role/readonly\n\n#4\u3001\u67e5\u770b readonly \u7684\u8ba4\u8bc1\u4fe1\u606f\n[root@VM_120_245_centos /vault]#  vault read auth/approle/role/readonly\nKey                        Value\n---                        -----\nbind_secret_id             true local_secret_ids           false secret_id_bound_cidrs      &lt;nil&gt;\nsecret_id_num_uses         0\nsecret_id_ttl              0s\ntoken_bound_cidrs          []\ntoken_explicit_max_ttl     0s\ntoken_max_ttl              4h\ntoken_no_default_policy    false token_num_uses             0\ntoken_period               0s\ntoken_policies             [readonly]\ntoken_ttl                  1h\ntoken_type                 default\n\n#5\u3001\u67e5\u770b rold-id\uff0cvault read auth/approle/role/readonly/role-id\n[root@VM_120_245_centos /vault]# vault read auth/approle/role/readonly/role-id\nKey        Value\n---        -----\nrole_id    12afcbf7-33c9-d86f-e678-dc2beeb3fabd\n\n#6\u3001\u67e5\u770b secret-id\n[root@VM_120_245_centos /vault]# vault write -force auth/approle/role/readonly/secret-id\nKey                   Value\n---                   -----\nsecret_id             7c9e58d5-8af2-176b-8fbc-572db2f8c872\nsecret_id_accessor    ff5c6dca-7b5c-587d-41e2-adaae932a669\nsecret_id_ttl         0s\n\n#7\u3001\u6839\u636e role-id \u548c secret-id \u6362\u53d6 token\n[root@VM_120_245_centos /vault]#  vault write auth/approle/login role_id=\"12afcbf7-33c9-d86f-e678-dc2beeb3fabd\"   secret_id=\"7c9e58d5-8af2-176b-8fbc-572db2f8c872\"\nKey                     Value\n---                     -----\ntoken                   s.qIcsK6N6lm4TffWWcRIRfRSQ\ntoken_accessor          hDt3u9o9hjfHZwQ7Zisun7Vw\ntoken_duration          1h\ntoken_renewable         true token_policies          [\"default\" \"readonly\"]\nidentity_policies       []\npolicies                [\"default\" \"readonly\"]\ntoken_meta_role_name    readonly\n\n#8\u3001\u5e94\u7528\u65b0 token \u8bbf\u95ee\u96c6\u7fa4\n[root@VM_120_245_centos /vault]# export VAULT_TOKEN=s.qIcsK6N6lm4TffWWcRIRfRSQ\n[root@VM_120_245_centos ~/vault]# vault kv get secret/data/mysql/webapp\n== Data ==\nKey    Value\n---    -----\na      1\n\n#9\u3001\u8d8a\u6743\u8bbf\u95ee\u5931\u8d25\uff08\u65e0\u6cd5\u5199\u5165\uff09\n[root@VM_120_245_centos /vault]#  vault kv put secret/data/mysql/webapp key=abcd\nError making API request.\n\nURL: GET http://127.0.0.1:8200/v1/sys/internal/ui/mounts/secret/data/mysql/webapp\nCode: 403. Errors:\n\n* permission denied\n\n#9\u3001Token \u8fc7\u671f\u540e\u8bbf\u95ee\u5931\u8d25\n[root@VM_120_245_centos /vault]# vault kv get secret/data/mysql/webapp\nError making API request.\n\nURL: GET http://127.0.0.1:8200/v1/sys/internal/ui/mounts/secret/data/mysql/webapp\nCode: 403. Errors:\n\n* permission denied\n</code></pre> <p>\u4ece\u5b9e\u73b0\u4e0a\u770b\uff0crole-id \u4e0e secret-id \u76f8\u5f53\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u4e0d\u662f\u5982\u6b64\u3002Vault \u5e0c\u671b\u7528\u6b64\u8bbe\u8ba1\u6765\u89e3\u51b3 Secret Zero \u95ee\u9898\u3002</p> <p>3\u3001\u5404\u7c7b\u8ba4\u8bc1\u65b9\u5f0f\u6bd4\u8f83 Token \u65b9\u6cd5\u6bd4\u8f83\u7b80\u4fbf\u6613\u7528\uff0c\u4f46\u5176\u76ee\u7684\u662f\u4e3a\u4e86\u652f\u6301\u81ea\u8eab\u7684\u8fd0\u884c\uff0c\u5b89\u5168\u6027\u5e76\u4e0d\u9ad8\u3002\u5bf9\u4e8e\u771f\u6b63\u7684\u7528\u6237 / \u673a\u5668\u8ba4\u8bc1\u573a\u666f\uff0cVault \u5b98\u65b9\u63a8\u8350\u4f7f\u7528\u5176\u4ed6\u66f4\u52a0\u6210\u719f\u7684\u673a\u5236\uff0c\u4f8b\u5982 LDAP\uff0cGithub\uff0cAppRole \u8ba4\u8bc1\u65b9\u5f0f\u3002</p>"},{"location":"vault1/1Vault_basic/#vault_2","title":"Vault \u6388\u6743\u673a\u5236","text":"<p>Vault \u652f\u6301\u591a\u79cd\u5b58\u50a8\u540e\u7aef\uff1ahttps://github.com/hashicorp/vault/tree/master/plugins/database\uff0c\u751f\u4ea7\u67b6\u6784\u7684\u540e\u7aef\u5b58\u50a8\u4f7f\u7528 HA \u65b9\u5f0f\u8fdb\u884c\u90e8\u7f72\uff0c\u6bd4\u5982 consul/etcd/mysql \u96c6\u7fa4\u7b49\u3002</p> <p></p> <p>mysql\uff1ahttps://github.com/hashicorp/vault/blob/master/plugins/database/mysql/mysql.go</p>"},{"location":"vault1/1Vault_basic/#04-vault","title":"04 Vault \u57fa\u672c\u529f\u80fd\u4f7f\u7528","text":"<p>1\u3001\u914d\u7f6e Mysql \u4f5c\u4e3a\u5b58\u50a8\u540e\u7aef\uff0c\u542f\u52a8 Vault</p> <pre><code>[root@VM_120_245_centos ~/vault]# cat vault.hcl\ndisable_mlock  = true ui=true storage \"mysql\" {\n    address = \"127.0.0.1:3306\"\n    username = \"root\"\n    password = \"xxxxxx\"\n    database = \"vault\"\n    table = \"vault\"\n}\nlistener \"tcp\" {\n address     = \"127.0.0.1:8200\"\n tls_disable = 1\n}\n\n[root@VM_120_245_centos ~/vault]# vault server -config=vault.hcl\n</code></pre> <p>2\u3001\u521d\u59cb\u5316 vault\uff0c\u5f97\u5230 5 \u4e2a\u5b50\u79d8\u94a5\u53ca root Token</p> <pre><code>[root@VM_120_245_centos ~/vault]# vault operator init\n2021-08-20T21:34:41.973+0800 [INFO]  core: security barrier not initialized\n2021-08-20T21:34:42.002+0800 [INFO]  core: security barrier initialized: stored=1 shares=5 threshold=3\n2021-08-20T21:34:42.031+0800 [INFO]  core: post-unseal setup starting\n2021-08-20T21:34:42.060+0800 [INFO]  core: loaded wrapping token key\n2021-08-20T21:34:42.060+0800 [INFO]  core: successfully setup plugin catalog: plugin-directory=\"\"\n2021-08-20T21:34:42.060+0800 [INFO]  core: no mounts; adding default mount table\n2021-08-20T21:34:42.080+0800 [INFO]  core: successfully mounted backend: type=cubbyhole path=cubbyhole/\n2021-08-20T21:34:42.081+0800 [INFO]  core: successfully mounted backend: type=system path=sys/\n2021-08-20T21:34:42.081+0800 [INFO]  core: successfully mounted backend: type=identity path=identity/\n2021-08-20T21:34:42.136+0800 [INFO]  core: successfully enabled credential backend: type=token path=token/\n2021-08-20T21:34:42.137+0800 [INFO]  rollback: starting rollback manager\n2021-08-20T21:34:42.137+0800 [INFO]  core: restoring leases\n2021-08-20T21:34:42.138+0800 [INFO]  expiration: lease restore complete 2021-08-20T21:34:42.163+0800 [INFO]  identity: entities restored\n2021-08-20T21:34:42.164+0800 [INFO]  identity: groups restored\n2021-08-20T21:34:42.165+0800 [INFO]  core: usage gauge collection is disabled\n2021-08-20T21:34:42.174+0800 [INFO]  core: post-unseal setup complete 2021-08-20T21:34:42.200+0800 [INFO]  core: root token generated\n2021-08-20T21:34:42.200+0800 [INFO]  core: pre-seal teardown starting\n2021-08-20T21:34:42.200+0800 [INFO]  rollback: stopping rollback manager\n2021-08-20T21:34:42.200+0800 [INFO]  core: pre-seal teardown complete Unseal Key 1: xxx1\nUnseal Key 2: xxx2\nUnseal Key 3: xxx3\nUnseal Key 4: xxx4\nUnseal Key 5: xxx5\n\nInitial Root Token: xxx-root-token\n</code></pre> <p>3\u3001\u89e3\u5c01 vault\uff0c\u67e5\u770b\u89e3\u5c01\u72b6\u6001</p> <pre><code>[root@VM_120_245_centos ~/vault]# vault operator unseal xxx1\n[root@VM_120_245_centos ~/vault]# vault operator unseal xxx2\n[root@VM_120_245_centos ~/vault]# vault operator unseal xxx3\n\n[root@VM_120_245_centos ~/vault]# vault status\nKey                Value\n---                -----\nSeal Type          shamir\nInitialized        true Sealed             true Total Shares       5\nThreshold          3\nUnseal Progress    2/3\nUnseal Nonce       95ba53e7-63e2-c998-e1b8-4df4bba20ea3\nVersion            1.8.1\nStorage Type       mysql\nHA Enabled         false\n</code></pre> <p>4\u3001\u4f7f\u7528 root Token \u767b\u5f55\uff08\u9996\u6b21\uff09</p> <pre><code>[root@VM_120_245_centos ~/vault]# vault login root-token\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                xxx\ntoken_accessor       xxx\ntoken_duration       \u221e\ntoken_renewable      false token_policies       [\"root\"]\nidentity_policies    []\npolicies             [\"root\"]\n</code></pre> <p>5\u3001\u5f00\u542f vault \u7ec4\u4ef6\uff0c\u6d4b\u8bd5\u5199 / \u8bfb / token \u751f\u6210\u7b49\u64cd\u4f5c</p> <pre><code>[root@VM_120_245_centos ~/vault]# vault secrets enable kv\n2021-08-20T21:44:37.837+0800 [INFO]  core: successful mount: namespace=\"\" path=kv/ type=kv\n[root@VM_120_245_centos ~/vault]# vault kv put kv/test api_key=abc1234 api_secret=1a2b3c4d^C\n[root@VM_120_245_centos ~/vault]# vault kv get kv/test\n======= Data =======\nKey           Value\n---           -----\napi_key       abc1234\napi_secret    1a2b3c4d\n[root@VM_120_245_centos ~/vault]# vault token create -ttl 1h\nKey                  Value\n---                  -----\ntoken                s.6sfhKw2J2dFfNSMdIyWQGqiS\ntoken_accessor       o8MjM5SuLewdJk0WSZ0oPPrF\ntoken_duration       1h\ntoken_renewable      true token_policies       [\"root\"]\nidentity_policies    []\npolicies             [\"root\"]\n\n[root@VM_120_245_centos ~/vault]# export VAULT_TOKEN=s.6sfhKw2J2dFfNSMdIyWQGqiS\n[root@VM_120_245_centos ~/vault]# vault kv get kv/test\n======= Data =======\nKey           Value\n---           -----\napi_key       abc1234\napi_secret    1a2b3c4d\n</code></pre> <p>6\u3001\u6839\u636e\u7b56\u7565\u6a21\u677f\u521b\u5efa token \u521b\u5efa kv/test \u8def\u5f84\u4e0b\u53ea\u8bfb\u7684\u7b56\u7565 test-read-policy\uff1a</p> <pre><code>[root@VM_120_245_centos ~/vault]# cat limit-token.hcl\npath \"kv/test\"{\ncapabilities = [\"read\"]\n}\n\n\n[root@VM_120_245_centos ~/vault]# vault policy write test-read-policy ./limit-token.hcl\nSuccess! Uploaded policy: test-read-policy\n</code></pre> <p>\u6839\u636e\u7b56\u7565\u521b\u5efa token:</p> <pre><code>[root@VM_120_245_centos ~/vault]# vault token create -policy=test-read-policy\nKey                  Value\n---                  -----\ntoken                s.NMD47aWmzSUWC1bAqalQCWYw\ntoken_accessor       gi6WVfxwJnGqMXhDVoJXI5AU\ntoken_duration       768h\ntoken_renewable      true token_policies       [\"default\" \"test-read-policy\"]\nidentity_policies    []\npolicies             [\"default\" \"test-read-policy\"]\n</code></pre> <p>\u6d4b\u8bd5 token \u7684\u64cd\u4f5c\u60c5\u51b5\uff0c\u53ea\u8bfb\uff0c\u5199\u62a5\u9519\uff0c\u7b26\u5408\u65e2\u5b9a\u7b56\u7565\uff1a</p> <pre><code>[root@VM_120_245_centos ~/vault]# export VAULT_TOKEN=s.NMD47aWmzSUWC1bAqalQCWYw\n[root@VM_120_245_centos ~/vault]# vault kv get kv/test\n======= Data =======\nKey           Value\n---           -----\napi_key       abc1234\napi_secret    1a2b3c4d5e6f\n[root@VM_120_245_centos ~/vault]# vault kv put  kv/test api_key=foo api_secret=bar\nError writing data to kv/test: Error making API request.\n\nURL: PUT http://127.0.0.1:8200/v1/kv/test\nCode: 403. Errors:\n\n* 1 error occurred:\n        * permission denied\n</code></pre> <p>7\u3001\u67e5\u770b\u548c\u5173\u95ed Secret engine</p> <pre><code>[root@VM_120_245_centos ~/vault]# vault secrets list\nPath          Type         Accessor              Description\n----          ----         --------              -----------\ncubbyhole/    cubbyhole    cubbyhole_e86bac2b    per-token private secret storage\nidentity/     identity     identity_19b16864     identity store\nkv/           kv           kv_988a3c7e           n/a\nsecret/       kv           kv_a1c65202           n/a\nsys/          system       system_8d02021f       system endpoints used for control, policy and debugging\n\n[root@VM_120_245_centos ~/vault]# vault secrets disable secret/ #\u5173\u95ed secret/\nSuccess! Disabled the secrets engine (if it existed) at: secret/\n\n\n[root@VM_120_245_centos ~/vault]# vault secrets list\nPath          Type         Accessor              Description\n----          ----         --------              -----------\ncubbyhole/    cubbyhole    cubbyhole_e86bac2b    per-token private secret storage\nidentity/     identity     identity_19b16864     identity store\nkv/           kv           kv_988a3c7e           n/a\nsys/          system       system_8d02021f       system endpoints used for control, policy and debugging\n</code></pre> <p>8\u3001\u5f00\u542fV2\u7684Secret Engine</p> <pre><code>[root@VM_120_245_centos ~]# vault secrets enable -path=secretv2 -version=2 kv\nSuccess! Enabled the kv secrets engine at: secretv2/\n[root@VM_120_245_centos ~]# vault secrets list\nPath               Type         Accessor              Description\n----               ----         --------              -----------\nbifrost_vault/     kv           kv_962069cd           n/a\ncubbyhole/         cubbyhole    cubbyhole_e86bac2b    per-token private secret storage\nidentity/          identity     identity_19b16864     identity store\nkv/                kv           kv_988a3c7e           n/a\nsecret/            kv           kv_4a27cb62           n/a\nsecret_bifrost/    kv           kv_0b5b6ac3           n/a\nsecretv2/          kv           kv_6e9e3b5b           n/a\nsys/               system       system_8d02021f       system endpoints used for control, policy and debugging\nvault/             kv           kv_e26a68a4           n/a\n</code></pre> <p>\u66f4\u591a\u7684\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1ahttps://learn.hashicorp.com \u4e86\u89e3\u66f4\u591a\u3002</p>"},{"location":"vault1/2vault_k8s/","title":"L2 \u5728 Kubernetes \u8bfb\u53d6 Vault \u4e2d\u7684\u673a\u5bc6\u4fe1\u606f","text":"<p>\u5728 Kubernetes \u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u4f7f\u7528 Secret \u5bf9\u8c61\u6765\u4fdd\u5b58\u5bc6\u7801\u3001\u8bc1\u4e66\u7b49\u673a\u5bc6\u5185\u5bb9\uff0c\u7136\u800c kubeadm \u7f3a\u7701\u90e8\u7f72\u7684\u60c5\u51b5\u4e0b\uff0cSecret \u5185\u5bb9\u662f\u7528\u660e\u6587\u65b9\u5f0f\u5b58\u50a8\u5728 ETCD \u6570\u636e\u5e93\u4e2d\u7684\u3002</p> <p>\u80fd\u591f\u8f7b\u677e\u7684\u7528 <code>etcdctl</code>\u5de5\u5177\u83b7\u53d6\u5230 <code>Secret</code> \u7684\u5185\u5bb9\u3002</p> <p>\u901a\u8fc7\u4fee\u6539 <code>--encryption-provider-config</code> \u53c2\u6570\u53ef\u4ee5\u4f7f\u7528\u9759\u6001\u52a0\u5bc6\u6216\u8005 KMS Server \u7684\u65b9\u5f0f\u63d0\u9ad8 Secret \u6570\u636e\u7684\u5b89\u5168\u6027\uff0c\u8fd9\u79cd\u65b9\u5f0f\u8981\u6c42\u4fee\u6539 API Server \u7684\u53c2\u6570\uff0c\u5728\u6258\u7ba1\u73af\u5883\u4e0b\u53ef\u80fd\u6ca1\u6709\u90a3\u4e48\u65b9\u4fbf\uff0cHashicorp Vault \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53d8\u901a\u7684\u65b9\u5f0f\uff0c\u7528 Sidecar \u628a Vault \u4e2d\u7684\u5185\u5bb9\u52a0\u8f7d\u6210\u4e3a\u4e1a\u52a1\u5bb9\u5668\u4e2d\u7684\u6587\u4ef6</p>"},{"location":"vault1/2vault_k8s/#vault","title":"\u5b89\u88c5\u548c\u542f\u52a8 Vault","text":"<p>\u5b98\u7f51\u63d0\u4f9b\u4e86\u5404\u79cd\u7cfb\u7edf\u4e2d\u7684\u5b89\u88c5\u6307\u5bfc\uff0c\u4f8b\u5982 CentOS \u4e2d\u53ef\u4ee5\u7528\u5305\u7ba1\u7406\u5668\u6765\u5b89\u88c5\uff1a</p> <pre><code>$ yum install -y yum-utils\n$ yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n$ yum -y install vault\n...\n</code></pre> <p>\u5b89\u88c5\u7ed3\u675f\u540e\uff0c\u5c31\u53ef\u4ee5\u542f\u52a8\u4e00\u4e2a\u5f00\u53d1\u670d\u52a1\u5668\u4e86\uff1a</p> <pre><code>$ vault server -dev -dev-root-token-id root -dev-listen-address [\u4e3b\u673a\u5730\u5740]:8200\n...\nWARNING! dev mode is enabled! In this mode, Vault runs entirely in-memory\n...\nYou may need to set the following environment variable:\n\n    $ export VAULT_ADDR='http://9.134.14.252:8200'\n\nThe unseal key and root token are displayed below in case you want to\nseal/unseal the Vault or re-authenticate.\n\nUnseal Key: rpn1ad4t3B4OeUFRAJWUjcmsCmCcEJFaPFjWLbs0IFM=\nRoot Token: root\n...\n</code></pre> <p>\u4e0a\u9762\u7684\u547d\u4ee4\u4e2d\uff0c\u6307\u5b9a\u4e86\u767b\u5f55 Token \u4e3a root\uff0c\u76d1\u542c\u5730\u5740\u4e3a [\u4e3b\u673a\u5730\u5740]:8200\uff0c\u8fd4\u56de\u4fe1\u606f\u4e2d\u4e5f\u6709\u63d0\u793a\uff0c\u5f00\u53d1\u670d\u52a1\u7684\u5185\u5bb9\u662f\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u7684\uff0c\u65e0\u6cd5\u9002\u5e94\u751f\u4ea7\u73af\u5883\u7684\u5e94\u7528</p>"},{"location":"vault1/2vault_k8s/#_1","title":"\u5199\u5165\u6d4b\u8bd5\u6570\u636e","text":"<p>\u9996\u5148\u767b\u9646 Vault\uff1a</p> <pre><code>$ vault login root\nSuccess! You are now authenticated. The token information displayed below\n...\n</code></pre> <p>\u7136\u540e\u521b\u5efa\u6d4b\u8bd5\u6570\u636e\uff1a</p> <pre><code>vault kv put secret/devwebapp/config username='giraffe' password='salsa'\nKey              Value\n---              -----\ncreated_time     2020-08-11T16:59:42.076636Z\ndeletion_time    n/a\ndestroyed        false\nversion          1\n</code></pre>"},{"location":"vault1/2vault_k8s/#kubernetes-vault","title":"\u5728 Kubernetes \u4e2d\u5f15\u5165 Vault \u670d\u52a1","text":"<p>\u5728 Kubernetes \u4e2d\u53ef\u4ee5\u4e3a Vault \u521b\u5efa Endpoint \u548c Service\uff0c\u7528\u4e8e\u4e3a\u96c6\u7fa4\u5185\u63d0\u4f9b\u670d\u52a1\uff1a</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: external-vault\n  namespace: default\nspec:\n  ports:\n  - protocol: TCP\n    port: 8200\n---\napiVersion: v1\nkind: Endpoints\nmetadata:\n  name: external-vault\nsubsets:\n  - addresses:\n      - ip: [\u4e3b\u673a\u5730\u5740]\n    ports:\n      - port: 8200\n</code></pre> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u7ed9\u5916\u90e8\u7684 Vault \u670d\u52a1\u521b\u5efa\u4e86\u4e00\u4e2a\u96c6\u7fa4\u5185\u7684\u670d\u52a1\u7aef\u70b9\u3002\u63a5\u4e0b\u6765\u521b\u5efa\u4e00\u4e2a Deployment \u6765\u6d4b\u8bd5\u8bfb\u53d6\u6570\u636e\uff1a</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: devwebapp-through-service\n  labels:\n    app: devwebapp-through-service\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: devwebapp-through-service\n  template:\n    metadata:\n      labels:\n        app: devwebapp-through-service\n    spec:\n      containers:\n      - name: app\n        image: burtlo/devwebapp-ruby:k8s\n        imagePullPolicy: Always\n        env:\n        - name: SERVICE_PORT\n          value: \"8080\"\n        - name: VAULT_ADDR\n          value: \"http://external-vault:8200\"\n</code></pre> <p>\u8fd9\u4e2a\u955c\u50cf\u4e2d\u4f1a\u4f7f\u7528\u6211\u4eec\u9884\u5148\u8bbe\u7f6e\u7684\u5f00\u53d1 Token \u6765\u8bbf\u95ee Vault \u670d\u52a1\uff0c\u4f8b\u5982\uff1a</p> <pre><code>$ kubectl exec \\\n    $(kubectl get pod --selector='app=devwebapp-through-service' --output='jsonpath={.items[0].metadata.name}') \\\n    -- curl -s localhost:8080 ; echo\n{\"password\"=&gt;\"salsa\", \"username\"=&gt;\"giraffe\"}\n</code></pre>"},{"location":"vault1/2vault_k8s/#vault_1","title":"\u5b89\u88c5 Vault \u6ce8\u5165\u5668","text":"<p>\u4f7f\u7528 Helm \u8fdb\u884c\u5b89\u88c5\uff1a</p> <pre><code>$ helm repo add hashicorp https://helm.releases.hashicorp.com\n\"hashicorp\" has been added to your repositories\n$ helm install vault hashicorp/vault \\\n    --set \"injector.externalVaultAddr=http://external-vault:8200\"\n</code></pre> <p>\u8fd9\u4e2a\u5b89\u88c5\u5668\u4f1a\u521b\u5efa RBAC \u76f8\u5173\u5185\u5bb9\uff0cMutatingWebhook \u4ee5\u53ca\u7528\u4e8e\u6267\u884c\u6ce8\u5165\u7684 Deployment \u548c Service\u3002</p>"},{"location":"vault1/2vault_k8s/#kubernetes","title":"\u5bf9\u63a5 Kubernetes \u8ba4\u8bc1","text":"<p>\u63a5\u4e0b\u6765\u8981\u8ba9 Vault \u63a5\u6536\u5e76\u8bb8\u53ef\u6765\u81ea Kubernetes \u7684\u8bf7\u6c42\uff1a</p> <pre><code># \u83b7\u53d6 ServiceAccount \u7684 Token\n$ VAULT_HELM_SECRET_NAME=$(kubectl get secrets --output=json | jq -r '.items[].metadata | select(.name|startswith(\"vault-token-\")).name')\n\n# \u542f\u7528\u8ba4\u8bc1\u65b9\u5f0f\n$ vault auth enable kubernetes\nSuccess! Enabled kubernetes auth method at: kubernetes/\n\n# \u83b7\u53d6 Token \u5185\u5bb9\n$ TOKEN_REVIEW_JWT=$(kubectl get secret $VAULT_HELM_SECRET_NAME --output='go-template={{ .data.token }}' | base64 --decode)\n\n# \u83b7\u53d6 Kubectl \u7684 CA \u8bc1\u4e66\n$ KUBE_CA_CERT=$(kubectl config view --raw --minify --flatten --output='jsonpath={.clusters[].cluster.certificate-authority-data}' | base64 --decode)\n\n# \u83b7\u53d6 API Server \u7684\u5730\u5740\n$ KUBE_HOST=$(kubectl config view --raw --minify --flatten --output='jsonpath={.clusters[].cluster.server}')\n</code></pre> <p>\u51c6\u5907\u5de5\u4f5c\u5b8c\u6210\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8ba4\u8bc1\u914d\u7f6e\u5199\u5165 Vault\uff1a</p> <pre><code>$ vault write auth/kubernetes/config \\\n        token_reviewer_jwt=\"$TOKEN_REVIEW_JWT\" \\\n        kubernetes_host=\"$KUBE_HOST\" \\\n        kubernetes_ca_cert=\"$KUBE_CA_CERT\"\n...\n</code></pre> <p>\u7f16\u5199\u8bfb\u53d6\u7b56\u7565\uff1a</p> <pre><code>$ vault policy write devwebapp - &lt;&lt;EOF\npath \"secret/data/devwebapp/config\" {\n  capabilities = [\"read\"]\n}\nEOF\n</code></pre> <p>\u4e3a Kubernetes \u521b\u5efa\u6388\u6743\u89d2\u8272\uff1a</p> <pre><code>$ vault write auth/kubernetes/role/devweb-app \\\n        bound_service_account_names=internal-app \\\n        bound_service_account_namespaces=default \\\n        policies=devwebapp \\\n        ttl=24h\n</code></pre>"},{"location":"vault1/2vault_k8s/#sidecar","title":"\u6ce8\u5165 Sidecar","text":"<p>\u5728\u6d4b\u8bd5 Deployment \u4e2d\u52a0\u5165\u6ce8\u89e3\uff1a</p> <pre><code>...\nspec:\n  template:\n    metadata:\n      annotations:\n        vault.hashicorp.com/agent-inject: \"true\"\n        vault.hashicorp.com/role: \"devweb-app\"\n        vault.hashicorp.com/agent-inject-secret-credentials.txt: \"secret/data/devwebapp/config\"\n...\n</code></pre> <p>\u4e0a\u9762\u7684\u6ce8\u89e3\u8868\u660e\uff0c\u4f7f\u7528 <code>devweb-app</code> \u89d2\u8272\uff0c\u8bfb\u53d6 <code>secret/data/devwebapp/config</code> \u4e2d\u7684\u6570\u636e\uff0c\u4fdd\u5b58\u5230 <code>/vault/secrets</code> \u76ee\u5f55\u7684 <code>credentials.txt</code> \u6587\u4ef6\u4e4b\u4e2d\u3002</p> <p>\u4fee\u6539\u4e4b\u540e\uff0c\u7b49\u65b0\u7684 Pod \u542f\u52a8\u6210\u529f\u3002\u9a8c\u8bc1\u4e00\u4e0b\uff1a</p> <pre><code>$ kubectl exec -it \\\n    $(kubectl get pod --selector='app=devwebapp' --output='jsonpath={.items[0].metadata.name}') \\\n    -c app -- cat /vault/secrets/credentials.txt\ndata: map[password:salsa username:giraffe]\nmetadata: map[created_time:2019-12-20T18:17:50.930264759Z deletion_time: destroyed:false version:2]\n</code></pre>"},{"location":"vault1/3vault_rotate/","title":"L3 \u900f\u8fc7 Vault \u5b9a\u671f rotate credentials","text":"<p>\u5efa\u7acb\u4e00\u4e2a\u8f6f\u4ef6\u670d\u52a1\u65f6\uff0c\u521a\u5f00\u59cb\u901a\u5e38\u90fd\u4f1a\u628a <code>API Key</code>\u3001\u8fde\u63a5\u8d44\u6599\u5e93\u6216 <code>AWS</code> \u7684\u5e10\u53f7\u5bc6\u7801\u50a8\u5b58\u5728\u5404\u5f0f\u5404\u6837\u7684\u5730\u65b9\uff0c\u6863\u6848\u3001\u73af\u5883\u53d8\u6570\u3001\u751a\u81f3\u4e00\u4e2a\u4e0d\u5c0f\u5fc3\u5c31\u50a8\u5b58\u5230 <code>git</code> \u88e1\u9762\u3002</p> <p></p> <p>\u968f\u610f\u50a8\u5b58\u56fa\u7136\u65b9\u4fbf\u7b80\u5355\uff0c\u4f46\u662f\u4f34\u968f\u5b89\u5168\u9690\u5fe7\u3002\u968f\u7740\u670d\u52a1\u6108\u6765\u6108\u91cd\u8981\uff0c\u5f00\u53d1\u8005\u4f1a\u5f00\u59cb\u66f4\u52a0\u5b89\u5168\u7684\u50a8\u5b58\u8fd9\u4e9b\u91cd\u8981\u7684\u8d44\u8baf\uff0c\u4f8b\u5982\u5c06\u8fd9\u4e9b <code>credential</code> \u96c6\u4e2d\u50a8\u5b58\u5728\u540c\u4e00\u4e2a\u5730\u65b9\u3002\u9664\u6b64\u4e4b\u5916\u901a\u5e38\u4e5f\u4f1a\u4ece\u591a\u4e2a\u9762\u5411\u6765\u63d0\u6607\u5b89\u5168\u6027\uff0c\u50cf\u662f\u7f29\u9650\u6bcf\u4e2a <code>credential</code> \u7684\u5b58\u53d6\u8303\u56f4\uff0c\u6216\u662f\u8fc7\u4e00\u6bb5\u65f6\u95f4\u5c31\u66f4\u6362\u4e00\u6b21 <code>credential</code> \u7b49\u7b49\u3002</p> <p>\u53ef\u662f\u8981\u5b9a\u671f\u66f4\u6362 <code>credential</code> \u662f\u4e00\u4ef6\u591a\u4e48\u75db\u82e6\u7684\u4e8b\u60c5\uff0c\u5047\u5982\u8bf4\u670d\u52a1\u4e2d\u6709\u5341\u4e2a <code>instance</code> \uff0c\u8981\u89c4\u5212\u5b89\u5168\u53c8\u4e0d\u4e2d\u65ad\u670d\u52a1\u7684\u65b9\u5f0f\u66f4\u6362\u6240\u6709 <code>instance</code> \u7684\u8d44\u6599\u5e93\u5e10\u53f7\u5bc6\u7801\u4f1a\u662f\u4e2a\u5f88\u5927\u7684\u6311\u6218\u3002</p> <p>\u5f53\u4f7f\u7528\u7684 <code>credential</code> \u6570\u91cf\u4e0e\u79cd\u7c7b\u589e\u52a0\uff0c\u75db\u82e6\u6307\u6570\u5c31\u4f1a\u5feb\u901f\u4e0a\u5347\u3002</p> <p>\u4eca\u5929\u60f3\u6765\u4ecb\u7ecd <code>Vault</code>\uff0c\u7528\u5b83\u6765\u52a8\u6001\u7684\u4ea7\u751f <code>credential</code> \u53ef\u4ee5\u75db\u82e6\u6307\u6570\u964d\u4f4e\u4e00\u4e9b\u3002</p>"},{"location":"vault1/3vault_rotate/#vault","title":"Vault \u4ecb\u7ecd","text":"<p>https://www.vaultproject.io/</p> <p><code>Vault</code> \u662f\u4e00\u5957\u7531 <code>HashiCorp</code> \u4e3b\u5bfc\u5f00\u53d1\u7528\u4e8e\u7ba1\u7406\u673a\u5bc6\u8d44\u6599\u7684\u5f00\u6e90\u4e13\u6848\u3002\u6240\u6709\u50a8\u5b58\u5728 <code>vault</code> \u5185\u7684\u8d44\u6599\u90fd\u4f1a\u7ecf\u8fc7\u52a0\u5bc6\uff0c\u7ba1\u7406\u8005\u53ef\u4ee5\u900f\u8fc7\u5f00\u8bbe\u4e0d\u540c\u7684\u5e10\u53f7\u6216 <code>token</code> \u6765\u9650\u5236\u4e0d\u540c\u7684\u5b58\u53d6\u8303\u56f4\uff0c\u540c\u65f6 <code>token</code> \u7684\u5b58\u53d6\u7eaa\u5f55\u90fd\u4f1a\u900f\u8fc7 <code>audit</code> \u6a21\u7ec4\u8bb0\u5f55\u4e0b\u6765\uff0c\u65b9\u4fbf\u4e4b\u540e\u67e5\u6838\u7528\u9014\u3002</p> <p>\u4f46\u662f\u5b89\u5168\u7684\u5b58\u653e\u673a\u5bc6\u8d44\u6599\u5e76\u4e0d\u662f <code>vault</code> \u6700\u5b9e\u7528\u7684\u5730\u65b9\uff0c<code>Vault</code> \u65b9\u4fbf\u4e4b\u5904\u5728\u4e8e\u5b83\u53ef\u4ee5\u5e2e\u4f60\u52a8\u6001\u7684\u4ea7\u751f <code>credential</code> \u5e76\u4e14\u8bbe\u5b9a\u8fc7\u671f\u7684\u671f\u9650\uff0c\u7b49\u671f\u9650\u5230\u4e86 <code>Vault</code> \u4f1a\u5e2e\u4f60\u64a4\u9500\u8be5 <code>credential</code>\u3002</p> <p></p> <p>\u800c\u56e0\u4e3a <code>credential</code> \u4f1a\u52a8\u6001\u7684\u4ea7\u751f\uff0c\u6240\u4ee5\u6bcf\u4e00\u4e2a\u5143\u4ef6\u90fd\u4f1a\u62ff\u5230\u4e0d\u4e00\u6837\u7684 <code>credential</code>\u3002</p> <p>\u5982\u679c\u53d1\u73b0\u5df2\u7ecf\u6d29\u6f0f\uff0c\u4e5f\u53ef\u4ee5\u900f\u8fc7 <code>audit</code> \u6a21\u7ec4\u77e5\u9053\u662f\u54ea\u4e2a\u5143\u4ef6\u4f7f\u7528\u7684 <code>credential</code> \u6d29\u9732\u4e86\uff0c\u63a5\u8457\u7528 <code>vault</code> \u64a4\u9500\u51ed\u8bc1\u7684\u529f\u80fd\u628a\u7279\u5b9a\u7684 <code>credential</code> \u64a4\u9500\u3002\u8ddf\u6240\u6709\u7684\u5143\u4ef6\u90fd\u91c7\u7528\u540c\u4e00\u4e2a <code>credential</code> \u76f8\u6bd4\uff0c\u5f71\u54cd\u7684\u8303\u56f4\u4f1a\u66f4\u5c0f\uff0c\u4f1a\u9700\u8981\u5904\u7406\u7684\u5de5\u4f5c\u4e5f\u4f1a\u66f4\u5c11\u3002</p>"},{"location":"vault1/3vault_rotate/#_1","title":"\u8303\u4f8b","text":"<p>\u8fd9\u8fb9\u7528 <code>node.js</code> \u5c55\u793a\u4e00\u4e0b <code>vault</code> \u7684\u4f7f\u7528\u65b9\u6cd5\u3002</p> <p>\u9700\u6c42\u5982\u4e0b\uff1a<code>demo.js</code> \u662f\u4e00\u4e2a\u9700\u8981\u5b58\u53d6 <code>MySQL</code> \u7684 <code>command line</code> \u5de5\u5177\uff0c\u6211\u4eec\u5e0c\u671b\u5b9a\u671f\u53d8\u66f4 <code>demo.js</code> \u4f7f\u7528\u7684 <code>MySQL</code> \u5e10\u53f7\u5bc6\u7801\u6765\u589e\u52a0\u5b89\u5168\u7a0b\u5ea6\u3002\u5728\u8303\u4f8b\u4e2d\u6211\u4eec\u628a <code>credential</code> \u671f\u9650\u8bbe\u5b9a\u6210\u5341\u79d2\uff0c\u4e0d\u8fc7\u4e00\u822c\u6765\u8bf4\u7ebf\u4e0a\u4f7f\u7528\u65f6\u671f\u9650\u53ef\u80fd\u4f1a\u662f\u4e8c\u9031\u6216\u4e00\u4e2a\u6708\u7b49\u3002</p> <p>\u8fd9\u4e2a\u8303\u4f8b\u53ef\u4ee5\u5728 <code>github</code> \u4e0a\u9762\u627e\u5230\u5b8c\u6574\u7684\u6e90\u7801\u3002</p> <p>\u4e00\u822c\u6765\u8bf4\u5b58\u53d6\u8d44\u6599\u5e93\u5927\u591a\u90fd\u4f1a\u5230\u7279\u5b9a\u8d44\u6599\u8868\u8bfb\u53d6\u4e0e\u5199\u5165\u8d44\u6599\uff0c\u4e0d\u8fc7\u5728\u8fd9\u4e2a\u4f8b\u5b50\u88e1\u9762\u6211\u4eec\u7b80\u5316 demo.js \u5b58\u53d6 <code>MySQL</code> \u62ff\u5230\u7684\u8d44\u6599\u662f\u6bcf\u79d2\u53bb\u8ddf <code>MySQL</code> \u95ee\u81ea\u5df1\u76ee\u524d\u7528\u54ea\u4e2a <code>User</code> \u5efa\u7acb\u8fde\u7ebf\uff1a <code>SELECT USER();</code>\uff0c\u8fd9\u6837\u8303\u4f8b\u88e1\u9762\u6211\u624d\u4e0d\u7528\u989d\u5916\u9700\u8981\u65b0\u589e\u8868\u683c :-)</p> <p><code>demo.js</code> \u4f1a\u5728\u51e0\u4e2a\u65f6\u673a\u8ddf <code>vault/mysql</code> \u6c9f\u901a\uff1a</p> <ol> <li>\u521d\u59cb\u65f6\u4f1a\u8ddf <code>vault</code> \u52a8\u6001\u7684\u7d22\u53d6\u4e00\u7ec4 <code>credential</code>\uff0c\u6b64\u65f6 <code>Vault</code> \u8fde\u7ed3 <code>MySQL</code> \u5e2e\u4f60\u52a8\u6001\u751f\u6210\u4e00\u7ec4\u5e10\u53f7\u5bc6\u7801\uff0c\u5e76\u4e14\u5728\u671f\u9650\u540e\u5e2e\u4f60\u5220\u9664\u3002</li> <li>\u6bcf\u79d2\u4f1a\u7528\u6b64 <code>credential</code> \u8bfb\u53d6 <code>MySQL</code> \u5185\u7684\u8d44\u8baf</li> <li>\u5230\u8fbe\u8fc7\u671f\u65f6\u95f4\u7684\u4e00\u534a\uff08\u4e94\u79d2\uff09\u65f6\uff0c\u8ddf <code>vault</code> \u62ff\u4e00\u7ec4\u65b0\u7684 <code>credential</code></li> <li>\u9047\u5230\u65e0\u6cd5\u5b58\u53d6\u8d44\u6599\u7684\u9519\u8bef\u65f6\uff0c\u8ddf <code>vault</code> \u62ff\u4e00\u7ec4\u65b0\u7684 <code>credential</code></li> <li>\u7ed3\u675f\u65f6\u4f1a\u628a\u6b63\u5728\u7528\u7684 <code>credential</code> \u6ce8\u9500</li> </ol> <p></p>"},{"location":"vault1/3vault_rotate/#_2","title":"\u8bbe\u5b9a\u73af\u5883","text":"<p>\u9996\u5148\u6211\u4eec\u4f1a\u9700\u8981 <code>MySQL</code> \u8ddf <code>Vault</code> \u7684\u670d\u52a1\uff0c\u5229\u7528 <code>docker-compose</code> \u53ef\u4ee5\u5f88\u7b80\u5355\u5730\u628a\u9700\u8981\u7684\u73af\u5883\u5efa\u7acb\u5b8c\u6210\u3002\u6211\u4eec\u5728 <code>docker-compose</code> \u91cc\u9762\u8d77\u4e86\u4e00\u53f0 <code>MySQL</code> \u4e0e\u4e00\u53f0 <code>vault</code>\uff1a</p> <p><code>docker-compose.yml</code></p> <pre><code>version: '3'\nservices:\n  vault:\n    image: vault:0.11.4\n    cap_add:\n      - IPC_LOCK\n    environment:\n      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN}\n    ports:\n      - 8200:8200\n  mysql:\n    image: mysql:5.7\n    environment:\n      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n    ports:\n      - 3306:3306\n</code></pre> <p>\u900f\u8fc7 <code>docker-compose up</code> \u5c31\u53ef\u4ee5\u5c06 <code>mysql</code> \u8ddf <code>vault</code> \u670d\u52a1\u542f\u52a8\u3002</p> <p>\u63a5\u4e0b\u6765\u5219\u8981\u8bbe\u5b9a <code>Vault</code> \u8ba9\u5b83\u77e5\u9053\u8981\u600e\u4e48\u52a8\u6001\u53d1\u51fa <code>credential</code>\uff0c\u6253\u5f00\u53e6\u5916\u4e00\u4e2a\u7ec8\u7aef\u673a\u5206\u9875\uff0c\u4f7f\u7528 <code>bash shell script</code> \u6765\u505a\u521d\u59cb\u5316\u3002\u8fd9\u4e2a\u547d\u4ee4\u4f7f\u7528\u4e86 <code>vault</code> \u7684 <code>command line</code>\uff0c<code>macOS</code> \u53ef\u4ee5\u5229\u7528 <code>homebrew</code>\u5b89\u88c5 <code>vault</code>\u3002</p> <pre><code>$ brew install vault\n</code></pre> <p><code>init.sh</code></p> <pre><code>#!/bin/bash\nset -x\n\n# Load .env variables\nexport $(egrep -v '^#' .env | xargs)\n\nvault secrets enable database\n\nvault write database/config/my-database \\\n    plugin_name=mysql-database-plugin \\\n    connection_url=\"{{username}}:{{password}}@tcp(mysql:3306)/\" \\\n    allowed_roles=my-role username=${MYSQL_ROOT_USERNAME} password=${MYSQL_ROOT_PASSWORD}\n\nvault write database/roles/my-role \\\n    db_name=my-database \\\n    creation_statements=\"CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}';GRANT SELECT ON *.* TO '{{name}}'@'%';\" \\\n    default_ttl=\"10s\" \\\n    max_ttl=\"20s\"\n</code></pre> <p>\u8fd9\u8fb9\u6709\u51e0\u4e2a\u540d\u8bcd\u5148\u89e3\u91ca\u4e00\u4e0b\uff1a</p> <ul> <li><code>secret engine:</code> \u7528\u6765\u8fde\u63a5\u4e0d\u540c\u670d\u52a1\u5e76\u4e14\u52a8\u6001\u4ea7\u751f <code>credential</code> \u7684\u5143\u4ef6\uff0c\u6bd4\u5982\u8bf4 <code>database secret engine</code> \u53ef\u4ee5\u7528\u6765\u4ea7\u751f\u8d44\u6599\u5e93\u7684\u52a8\u6001\u5e10\u53f7\u5bc6\u7801\uff0c<code>AWS secret engine</code> \u5219\u662f\u7528\u6765\u52a8\u6001\u4ea7\u751f <code>AWS IAM user</code></li> <li><code>database</code> \u7ec4\u6001\u8bbe\u5b9a\uff1a\u7528\u6765\u544a\u8bc9 <code>vault</code> \u8981\u600e\u9ebd\u8fde\u63a5\u4f60\u7684\u8d44\u6599\u5e93\uff0c\u8fd9\u8fb9\u4f1a\u9700\u8981\u7ed9\u4ed6\u8db3\u591f\u5927\u6743\u9650\u7684 <code>root credential</code> \u8ba9\u5b83\u53ef\u4ee5\u5e2e\u4f60\u6839\u636e\u4e0d\u540c\u7684 <code>role</code> \u5efa\u7acb\u4e0d\u540c\u6743\u9650\u8303\u56f4\u7684\u4f7f\u7528\u8005</li> <li><code>role</code>\uff1a\u56e0\u4e3a\u8d44\u6599\u5e93\u91cc\u9762\u53ef\u80fd\u6709\u5f88\u591a\u4e0d\u540c\u7684\u8d44\u6599\u8868\uff0c\u7528\u591a\u7ec4 <code>role</code> \u5c31\u53ef\u4ee5\u8bbe\u5b9a\u4e0d\u540c\u6743\u9650\u8303\u56f4\u7684\u4f7f\u7528\u8005</li> </ul> <p>\u5728 <code>init.sh</code> \u88e1\u9762\uff0c\u7b2c <code>7</code> \u884c <code>vault secrets enable database</code> \u7684\u7528\u9014\u662f\u542f\u7528 database secret engine\uff0c\u8fd9\u4e2a\u5f15\u64ce\u652f\u63f4\u591a\u79cd\u8d44\u6599\u5e93\uff0c\u53ef\u4ee5\u8ba9 <code>MySQL, PostgreSQL</code> \u7b49\u8d44\u6599\u5e93\u53ef\u4ee5\u52a8\u6001\u6d3e\u9001 <code>credential</code>\u3002\u9664\u6b64\u4e4b\u5916\u4e5f\u6709\u8bb8\u591a\u4e0d\u540c\u7684 <code>secret engine</code> \u5982 <code>AWS, Azure, Google Cloud, LDAP, SSH</code> \u7b49\u7b49\uff0c\u53ef\u4ee5\u652f\u63f4\u7684\u670d\u52a1\u975e\u5e38\u591a\u5143\u3002</p> <p>\u7b2c <code>9</code> \u884c\u5219\u662f\u544a\u8bc9 <code>vault</code> \u8be5\u8d44\u6599\u5e93\u7684 <code>root credential</code> \u7528\u6765\u5efa\u7acb\u4ee5\u53ca\u5220\u9664\u8d44\u6599\u5e93\u4f7f\u7528\u8005\uff0c\u8fd9\u884c\u6307\u4ee4\u9664\u4e86\u628a <code>root credential</code> \u4f20\u7ed9 <code>vault</code> \u5916\u8fd8\u6709\u6307\u5b9a\u6211\u4eec\u8981\u8fde\u63a5\u7684\u8d44\u6599\u5e93\u7684 <code>plugin</code> \u662f <code>mysql-database-plugin</code>\uff0c\u53e6\u5916\u4e5f\u7528 <code>allowed_roles</code> \u6307\u5b9a\u8fd9\u4e2a\u8d44\u6599\u5e93\u8bbe\u5b9a\u53ea\u7ed9 <code>my_role</code> \u8fd9\u4e2a\u89d2\u8272\u4f7f\u7528\uff0c\u5176\u4ed6 <code>role</code>\u5219\u4e0d\u80fd\u5b58\u53d6\u8fd9\u4e2a\u8d44\u6599\u5e93\u8bbe\u5b9a\u3002</p> <p>\u7b2c <code>14</code> \u884c\u662f\u5efa\u7acb <code>my_role</code> \u8fd9\u4e2a\u89d2\u8272\uff0c\u5176\u4e2d <code>creation_statements</code> \u7528\u6765\u6307\u5b9a\u5efa\u7acb\u8be5\u4f7f\u7528\u8005\u65f6\u7684 <code>SQL</code> \u8bed\u6cd5\uff0c\u5728\u8fd9\u8fb9\u4e5f\u53ef\u4ee5\u8bbe\u5b9a\u8fd9\u4e2a\u4f7f\u7528\u8005\u5bf9\u8d44\u6599\u8868\u7684\u5b58\u53d6\u6743\u9650\u3002\u53e6\u5916\u8fd9\u8fb9\u6211\u4eec\u8bbe\u5b9a <code>default_ttl</code> \u662f\u5341\u79d2\u949f\uff0c\u4ee3\u8868\u900f\u8fc7\u8fd9\u4e2a <code>role</code> \u4ea7\u751f\u7684 <code>credential</code> \u5efa\u7acb\u540e\u5341\u79d2\u949f\u540e\u4f1a\u8fc7\u671f\uff0c <code>max_ttl</code> \u4e3a <code>20</code> \u79d2\u5219\u662f\u56e0\u4e3a <code>vault</code> \u652f\u63f4 <code>credential</code> \u5ef6\u957f\u7684\u529f\u80fd\uff0c\u6700\u591a\u53ef\u4ee5\u5ef6\u957f\u5230 <code>20</code> \u79d2\u3002</p> <p>\u5f53\u6267\u884c <code>init.sh</code> \u540e <code>vault</code> \u7684\u8bbe\u5b9a\u5c31\u5b8c\u6210\u4e86\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u5229\u7528 <code>vault</code> \u6765\u5c1d\u8bd5\u53d1\u51fa\u52a8\u6001\u7684 <code>credential</code></p> <pre><code># \u8bfb\u53d6 `.env` \u88e1\u9762\u7684\u73af\u5883\u53d8\u6570\n$ export $(egrep -v '^#' .env | xargs)\n$ vault read database/creds/my-role\nKey                Value\n---                -----\nlease_id           database/creds/my-role/1nZSP653ppdsrCMwDM7qDtob\nlease_duration     10s\nlease_renewable    true\npassword           A1a-4I90sOuUFcYKgeK9\nusername           v-token-my-role-4iDqk7sRI4m6Gocm\n</code></pre> <p>\u5982\u679c\u4f60\u624b\u901f\u591f\u5feb\u7684\u8bdd\uff0c\u53ef\u4ee5\u9a6c\u4e0a\u5229\u7528\u8fd9\u7ec4\u5e10\u53f7\u5bc6\u7801\u767b\u5165 <code>MySQL</code>\uff0c\u8fd9\u7ec4\u5e10\u53f7\u5bc6\u7801\u4f1a\u5728\u5341\u79d2\u540e\u5220\u9664\u3002</p> <p>\u5230\u8fd9\u8fb9\u5c31\u8bbe\u5b9a\u5b8c\u6210\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u4e00\u4e0b <code>demo.js</code> \u7684\u51fd\u5f0f\uff1a</p> <ul> <li><code>issueCredential():</code> \u5229\u7528 <code>node-vault</code> \u6765\u8ddf <code>vault</code> \u7d22\u53d6 <code>credential</code>\uff0c\u540c\u65f6\u8bbe\u5b9a\u5f53\u65f6\u9650\u8fc7\u4e86\u4e00\u534a\u540e <code>rotate</code> \u76ee\u524d\u6b63\u5728\u7528\u7684 <code>credentia</code>l\u3002</li> <li><code>gracefulShutdown():</code> \u5f53\u6536\u5230 <code>SIGTERM</code> \u4e5f\u5c31\u662f\u7a0b\u5e8f\u7528<code>kill</code>\u6307\u4ee4\u780d\u6389\u65f6\uff0c\u4f1a\u5c06\u76ee\u524d\u6b63\u5728\u4f7f\u7528\u7684 <code>credential</code> \u64a4\u9500\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u8fd9\u4e2a <code>credential</code> \u6ca1\u5728\u4f7f\u7528\u540e\u5c31\u7acb\u5373\u5220\u9664\u589e\u52a0\u5b89\u5168\u6027\u3002</li> <li><code>loop(): demo script</code> \u4e2d\u7684\u65e0\u9650\u5faa\u73af\uff0c\u4f1a\u4e0d\u505c\u7684\u8ddf <code>MySQL</code> \u67e5\u8be2\u76ee\u524d\u7528\u4ec0\u9ebd\u4f7f\u7528\u8005\u767b\u5165\uff0c\u5982\u679c\u53d1\u73b0 <code>SQL</code> \u767b\u5165\u9519\u8bef\u5219\u91cd\u65b0\u8ddf <code>vault</code> \u8981\u4e00\u7ec4\u65b0\u7684\u5e10\u53f7\u5bc6\u7801\u3002</li> </ul> <p><code>demo.js</code></p> <pre><code>process.env.DEBUG = \"node-vault\"; // switch on debug mode\n\nrequire(\"dotenv\").config();\nconst mysql = require(\"promise-mysql\");\nconst Vault = require(\"node-vault\");\n\nconst { VAULT_TOKEN } = process.env;\nconst vault = Vault({ token: VAULT_TOKEN });\n\nlet credential;\n\nasync function issueCredential() {\n  credential = await vault.read(\"database/creds/my-role\");\n  const { username, password } = credential.data;\n  const leaseDuration = credential.lease_duration;\n  lease_id = credential.lease_id;\n\n  const info = [\n    `Got new credential!`,\n    `  username: ${username}`,\n    `  password: ${password}`,\n    `  lease duration: ${leaseDuration}`\n  ];\n  console.log(info.join(\"\\n\"));\n\n  global.setTimeout(() =&gt; {\n    console.log(`Credential will expire in ${leaseDuration / 2} seconds, rotate it.`);\n    issueCredential();\n  }, (leaseDuration * 1000) / 2);\n}\n\nasync function gracefulShutdown() {\n  console.info(\"SIGTERM signal received.\");\n  await vault.revoke({ lease_id: credential.lease_id });\n  process.exit(0);\n}\n\nasync function loop() {\n  try {\n    const { username, password } = credential.data;\n    const conn = await mysql.createConnection({\n      host: \"localhost\",\n      user: username,\n      password: password\n    });\n    const result = await conn.query(\"SELECT USER()\");\n    console.log(`Current user: ${result[0][\"USER()\"].split(\"@\")[0]}`);\n    conn.end();\n  } catch (e) {\n    console.error(e.sqlMessage);\n    issueCredential();\n  }\n}\n\nfunction main() {\n  issueCredential();\n  global.setInterval(loop, 1000);\n  process.on(\"SIGTERM\", gracefulShutdown);\n}\n\nif (require.main === module) {\n  main();\n}\n</code></pre> <p>\u6267\u884c <code>demo.js</code> \u65f6\uff0c\u9996\u5148\u4f1a\u770b\u5230 <code>demo.js</code> \u5148\u8ddf <code>vault</code> \u8981\u5230\u4e86\u4e00\u7ec4\u5e10\u53f7\u5bc6\u7801\uff0c\u63a5\u4e0b\u6765\u5219\u4f1a\u6bcf\u79d2\u949f\u90fd\u8ddf\u8d44\u6599\u5e93\u67e5\u8be2\u76ee\u524d\u7684\u4f7f\u7528\u8005\uff1a</p> <pre><code>Current user: v-token-my-role-2VWVbr1eWALVKLAB\n</code></pre> <p>\u8fc7\u4e86\u4e94\u79d2\u540e\u56e0\u4e3a\u8ddd\u79bb\u5e10\u53f7\u5bc6\u7801\u8fc7\u671f\u7684\u671f\u9650\u53ea\u5269\u4e0b\u4e00\u534a\uff0c\u6b64\u65f6\u6211\u4eec\u4f1a\u518d\u8ddf <code>vault</code> \u8981\u4e00\u7ec4\u65b0\u7684\u5e10\u53f7\u5bc6\u7801\uff0c\u63a5\u4e0b\u6765\u7684\u8d44\u6599\u5e93\u7684\u4f7f\u7528\u8005\u5219\u53d8\u4e3a\uff1a</p> <pre><code>Current user: v-token-my-role-6rC0cBjcttqCUEyf\n</code></pre> <p>\u8fd9\u4e24\u7ec4\u5e10\u53f7\u5bc6\u7801\u90fd\u662f\u7531 <code>vault</code> \u52a8\u6001\u5efa\u7acb\uff0c\u5e76\u4e14\u4f1a\u5728\u5efa\u7acb\u540e\u5341\u79d2\u949f\u540e\u5220\u9664\u3002</p> <p></p> <p>\u6700\u540e\u5f53\u6211\u4eec\u7528 <code>kill</code> \u6307\u4ee4\u505c\u6b62 <code>demo.js</code> \u7a0b\u5e8f\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u6709\u76d1\u542c <code>SIGTERM</code> \u4fe1\u53f7\u7684\u7f18\u6545\uff0c\u6b64\u65f6\u9664\u4e86\u5173\u95ed\u7a0b\u5f0f\u6211\u4eec\u8fd8\u4f1a\u5c06\u6700\u8fd1\u6b63\u5728\u4f7f\u7528\u7684\u5e10\u53f7\u5bc6\u7801\u64a4\u9500\u4ee5\u589e\u52a0\u5b89\u5168\u6027\uff0c\u907f\u514d\u6b64\u5e10\u53f7\u5bc6\u7801\u4e4b\u540e\u8fd8\u88ab\u5176\u4ed6\u4eba\u4f7f\u7528</p>"},{"location":"vault1/3vault_rotate/#_3","title":"\u8e29\u96f7\u533a","text":"<p>\u5176\u5b9e\u4e0a\u9762\u7684 <code>demo.js</code> \u6700\u91cd\u8981\u7684\u5730\u65b9\u5c31\u5728\u4e8e <code>graceful shutdown</code> \u65f6\u8981\u628a\u76ee\u524d\u4f7f\u7528\u7684 <code>credential</code> \u7ed9\u64a4\u9500\u6389\u3002</p> <p>\u4f60\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u4e2a <code>credential</code> \u653e\u8457\u4e5f\u8fd8\u597d\uff0c\u53cd\u6b63\u65f6\u5019\u5230\u4e86\u5c31\u4f1a\u8fc7\u671f\uff0c\u4e0d\u4f1a\u6709\u592a\u591a\u5f71\u54cd\u3002BUT!! \u5047\u5982\u4f60\u8ddf\u6211\u4eec\u4e00\u6837 <code>dev</code> \u73af\u5883\u662f\u6bcf\u4e2a <code>commit</code> \u90fd\u4f1a <code>deploy</code>\uff0c\u800c\u4e14 <code>credential</code> \u7684\u8fc7\u671f\u65e5\u671f\u8bbe\u5b9a\u7684\u6bd4\u8f83\u957f\uff0c\u6bd4\u5982\u8bf4\u4e00\u4e2a\u6708\u7684\u8bdd\uff0c\u6bcf\u5929\u5341\u4e2a <code>commit</code>\uff0c<code>kubernetes</code> \u88e1\u9762\u6709\u5341\u4e2a <code>pod</code>\uff0c\u6bcf\u4e2a <code>pod</code>\u53ef\u80fd\u4f1a\u7528\u5230\u4e24\u4e09\u4e2a\u7531 <code>Vault</code> \u7ba1\u7406\u7684\u52a8\u6001\u51ed\u8bc1\u7684\u8bdd\uff0c\u4f60\u5728\u8d44\u6599\u5e93\u6216<code>IAM User</code> \u4f1a\u81a8\u80c0\u7684\u5f88\u5feb\uff0c\u5f88\u5feb\u5730\u4f60\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e9b\u4e3a\u6570\u4f17\u591a\u7684 credentials \u7ba1\u7406\u4e0a\u4f1a\u9020\u6210\u56f0\u96be\uff0c\u751a\u81f3\u62d6\u7d2f\u6574\u4e2a\u5f00\u53d1\u73af\u5883\u3002</p> <p>\u50cf\u6700\u8fd1\u6211\u7a81\u7136\u77e5\u9053\u539f\u6765 <code>AWS IAM User</code> \u7684\u9884\u8bbe\u4e0a\u9650\u662f <code>5000</code> \u4eba\u2026\u3002</p> <p>\u5f53\u4f60\u6709\u5f88\u591a <code>IAM User</code> \u7684\u65f6\u5019\uff0c\u867d\u7136\u53ef\u4ee5\u900f\u8fc7\u6307\u4ee4\u4e00\u6b21\u628a\u6240\u6709\u7531 <code>Vault</code> \u7ba1\u7406\u7684 <code>IAM User</code> \u64a4\u9500\uff0c\u4f46\u662f\u5c31\u6211\u4eec\u7684\u7ecf\u9a8c\u6765\u8bf4\u5927\u91cf <code>revoke IAM User</code> \u7684\u65f6\u5019\uff0c<code>vault</code>\u5927\u591a\u90fd\u4f1a <code>timeout</code> (\u4e5f\u6709\u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u4eec dev \u73af\u5883\u5f00\u7684\u8d44\u6e90\u592a\u5c11)\uff0c\u6240\u4ee5\u8981\u6267\u884c\u5f88\u591a\u6b21\u624d\u80fd\u628a\u6240\u6709\u4f7f\u7528\u8005\u5220\u9664\uff0c\u5176\u4e2d\u8fd8\u6709\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8d44\u6e90\u592a\u5c11\u5bfc\u81f4 <code>Vault crash</code> \u7684\u72b6\u51b5\uff0c\u5728<code>production</code> \u7684\u72b6\u51b5 <code>vault</code> \u91cd\u542f\u4f1a\u9700\u8981 <code>unseal</code>\uff0c\u6b64\u65f6\u5c31\u4f1a\u4f34\u968f\u8bb8\u591a\u75db\u82e6\uff0c\u751a\u81f3 <code>vault</code> \u4f1a\u88ab\u4e0d\u505c\u5730\u6253\u6302\uff0c\u5230\u6700\u540e\u53ea\u597d\u5230 <code>backend storage</code> \u8ddf <code>AWS console</code> \u88e1\u9762\u624b\u52a8\u5220\u9664\u8fd9\u4e9b\u8d44\u6599\u3002</p> <p>\u603b\u4e4b\u8bf7\u5927\u5bb6\u522b\u5fd8\u4e86\u5728\u670d\u52a1\u88e1\u9762\u52a0\u4e0a <code>graceful shutdown</code> \u65f6\u540c\u65f6\u4e5f\u53bb\u64a4\u9500 <code>vault</code> \u88e1\u9762\u7684 <code>credential</code>\uff0c\u91c7\u7528\u514d\u5f97\u539f\u672c<code>Vault</code>\u662f\u8981\u964d\u4f4e\u75db\u82e6\u5374\u9002\u5f97\u5176\u53cd\uff0c\u8ba9\u75db\u82e6\u592a\u591a\uff0c\u6536\u83b7\u592a\u5c11\u3002</p>"},{"location":"vault1/4vault_int_k8s/","title":"L4 Vault \u4e0e Kubernetes \u7684\u6df1\u5ea6\u6574\u5408","text":"<p>\u672c\u7bc7\u6587\u7ae0\u5219\u66f4\u8fdb\u4e00\u6b65\u7684\u89e3\u91ca\u8981\u5982\u4f55\u900f\u8fc7 <code>Kubernetes</code> \u7684 <code>Service Account</code> \u6574\u5408\u767b\u5165\u9a8c\u8bc1\uff0c\u5e76\u4e14\u9488\u5bf9\u4e0d\u540c <code>Account</code> \u7ba1\u7406\u6743\u9650\u8303\u56f4\u8ba9\u7279\u5b9a <code>deployment</code> \u4ec5\u80fd\u5b58\u53d6\u7279\u5b9a <code>credentials</code>\u3002</p>"},{"location":"vault1/4vault_int_k8s/#_1","title":"\u4f7f\u7528\u60c5\u5883\u4e0e\u95ee\u9898","text":"<p>\u524d\u7bc7\u6587\u7ae0\u6211\u4eec\u4ecb\u7ecd\u4e86\u8981\u5982\u4f55\u7528 <code>vault</code> \u53d1\u51fa <code>dynamic credential</code> \u589e\u5f3a\u5b89\u5168\u6027\uff0c\u800c\u5f53\u670d\u52a1\u53d8\u590d\u6742\u65f6\uff0c\u6bcf\u4e2a\u670d\u52a1\u90fd\u4f1a\u6709\u9488\u5bf9\u4e0d\u540c <code>credentials</code> \u6709\u4e0d\u540c\u7684\u5b58\u53d6\u6743\u9650\u7684\u9700\u6c42\u3002\u6b64\u65f6\u5728 <code>vault</code>\u7ba1\u7406\u65f6\u5c31\u4f1a\u9700\u8981\u7528\u4e0d\u540c\u7684 <code>policy</code> \u6765\u7ba1\u7406\u4e0d\u540c\u8303\u56f4\u7684\u6743\u9650\u3002</p> <p>\u800c\u5982\u679c\u670d\u52a1\u662f\u67b6\u8bbe\u5728 <code>Kubernetes</code> \u65f6\uff0c\u53c8\u8981\u5982\u4f55\u7ba1\u7406\u5462\uff1f</p> <p>\u5176\u4e2d\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u4f9d\u7167 <code>deployment</code> \u7684\u6743\u9650\u8303\u56f4\u5c06\u76f8\u4f3c\u6743\u9650\u7684\u653e\u5728\u540c\u4e00\u4e2a <code>namespace</code> \u4e2d\u3002\u5e76\u4e14\u5728\u6bcf\u4e2a <code>namespace</code> \u5e95\u4e0b\u653e\u5165\u4e00\u4e2a\u5185\u5bb9\u4e3a <code>vault token</code> \u7684 <code>secret</code>\uff0c\u5e76\u4e14\u5728 <code>vault</code> \u5f53\u4e2d\u8bbe\u5b9a\u6b64 <code>token</code> \u7684\u5b58\u53d6\u6743\u9650\u3002\u6211\u4eec\u5728 <code>deployment</code> \u4e2d\u5219\u900f\u8fc7 <code>Kubernetes</code> \u7684\u73af\u5883\u53d8\u6570\u6307\u5411\u6b64 <code>secret</code>\uff0c\u5982\u6b64\u4e00\u6765\u5728\u7a0b\u5f0f\u4e2d\u5229\u7528 <code>Vault SDK</code> \u5c31\u53ef\u4ee5\u53d6\u5f97 <code>Dynamic Credential</code>\u3002</p> <p></p> <p>\u56e0\u4e3a <code>namespace</code> \u7684\u5207\u5206\u53ef\u4ee5\u8ba9\u4e0d\u540c <code>namespace</code> \u4e4b\u95f4\u6ca1\u6709\u529e\u6cd5\u8bfb\u53d6\u5176\u4ed6 <code>namespace</code> \u7684 <code>secret</code>\uff0c\u4ee5\u8fbe\u5230\u6743\u9650\u5206\u7fa4\u7684\u6548\u679c\u3002\u4f46\u662f\u8fd9\u6837\u7684\u8bbe\u5b9a\u53ea\u8981\u7a0d\u7a0d\u590d\u6742\u7684\u60c5\u5883\u5c31\u53d8\u5f97\u4e0d\u600e\u4e48\u597d\u7528\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u8981\u5f00\u53d1\u4e00\u5957\u7b80\u6613\u94f6\u884c\u8f6c\u5e10\u7684 <code>API</code> \u7cfb\u7edf\uff0c\u5207\u5206\u6210\u4e09\u4e2a\u5143\u4ef6\uff1a</p> <ul> <li><code>explorer</code>: \u767b\u5165\u4f7f\u7528\u8005\u540e\u53ef\u8bfb\u53d6\u4ea4\u6613\u8d44\u6599</li> <li><code>tx</code>: \u767b\u5165\u4f7f\u7528\u8005\u540e\u5199\u5165\u4ea4\u6613\u8d44\u6599</li> <li><code>account</code>: \u521b\u5efa\u4f7f\u7528\u8005</li> </ul> <p>\u800c\u7cfb\u7edf\u88e1\u6709\u4e24\u4e2a\u8d44\u6599\u5e93\uff1a</p> <ul> <li><code>txdb</code>: \u5b58\u653e\u4ea4\u6613\u8d44\u6599</li> <li><code>accountdb</code>: \u5b58\u653e\u4f7f\u7528\u8005\u5e10\u6237</li> </ul> <p>\u4f9d\u7167\u6743\u9650\u5212\u5206\u51fa\u5143\u4ef6\u4e0e\u8d44\u6599\u5e93\u7684\u5173\u7cfb\u5982\u4e0b\uff1a</p> <p></p> <p>\u6b64\u65f6\u7528\u4e0a\u8ff0\u7684 <code>namespace</code> \u5207\u5206\u6cd5\u5c31\u663e\u5f97\u7a92\u788d\u96be\u884c\uff0c\u6bcf\u4e2a\u5143\u4ef6\u7684\u6743\u9650\u8303\u56f4\u90fd\u4e0d\u540c\uff0c\u51e0\u4e4e\u6bcf\u4e2a <code>deployment</code> \u5c31\u8981\u653e\u5728\u4e00\u4e2a <code>namespace</code> \uff0c\u672c\u4f8b\u4ec5\u6709\u4e09\u4e2a\u5143\u4ef6\uff0c\u4f46\u662f\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684\u7cfb\u7edf\u90fd\u4f1a\u8d85\u8fc7\u8fd9\u4e2a\u6570\u91cf\uff0c\u539f\u672c\u7684\u7ba1\u7406\u65b9\u6cd5\u5c31\u53d8\u5f97\u4e0d\u5408\u9002\u3002</p> <p>\u5728\u8fd9\u6837\u7684\u72b6\u51b5\u4e0b <code>vault</code> \u6709\u63d0\u4f9b\u66f4\u8fdb\u4e00\u6b65\u7684\u529f\u80fd\u53ef\u4ee5\u900f\u8fc7 <code>Kubernetes</code> \u7684 <code>Service Account</code>\u6765\u767b\u5165 <code>vault</code>\uff0c\u5e76\u4e14\u53d6\u5f97\u8be5 <code>service account</code> \u7684\u7279\u5b9a\u6743\u9650\u3002</p>"},{"location":"vault1/4vault_int_k8s/#vault-kubernetes-auth","title":"Vault Kubernetes Auth","text":"<p><code>Kubernetes</code>\u5f53\u4e2d\u6709\u4e24\u4e2a <code>account</code>\u7c7b\u578b\uff1a<code>User Account</code> \u8ddf <code>Service Account</code>\uff0c\u5206\u522b\u662f\u7ed9\u4e00\u822c\u4f7f\u7528\u8005\u4e0e <code>Service</code> \u4f7f\u7528\uff0c\u800c <code>Service Account</code> \u5927\u591a\u7528\u6765\u89c4\u8303 <code>Service</code> \u53ef\u4ee5\u5b58\u53d6 <code>Kubernetes API</code> \u7684\u6743\u9650\u3002</p> <p>\u5728\u6211\u4eec\u7684\u4f7f\u7528\u60c5\u5883\u5f53\u4e2d\uff0c\u6211\u4eec\u5e76\u4e0d\u7528\u5b83\u6765\u89c4\u8303 <code>Kubernetes API</code> \u5b58\u53d6\u8303\u56f4\uff0c\u800c\u662f\u7528\u6765\u767b\u5165 <code>Vault</code> \u5e76\u4e14\u53d6\u5f97\u7531<code>Vault</code> \u7ba1\u7406\u7684 <code>Dynamic Credentials</code>\uff0c\u5e76\u4e14\u900f\u8fc7\u6bcf\u4e2a <code>account</code> \u8bbe\u5b9a\u4e00\u7ec4\u7279\u5b9a\u7684 <code>policy</code> \u6765\u533a\u5206\u5b58\u53d6 <code>credential</code> \u7684\u6743\u9650\u3002</p> <p></p> <p><code>vault</code> \u6574\u5408 <code>kubernetes service account</code> \u7684\u65b9\u5f0f\u662f\u8bbe\u5b9a\u4e00\u7ec4 <code>token reviewer</code> \u7684 <code>service account</code>\uff0c\u6b64\u5e10\u53f7\u9700\u8981\u6709 <code>kubernetes</code> \u7684 <code>system:auth-delegator</code> \u6743\u9650\uff0c\u53e6\u5916\u4e5f\u4f1a\u4e3a\u6bcf\u4e2a <code>component</code>\u90fd\u5efa\u7acb\u4e00\u7ec4 <code>role</code>\uff0c\u6bcf\u7ec4 <code>role</code> \u90fd\u4f1a\u5bf9\u5e94\u4e00\u7ec4 <code>policy</code> \u660e\u5b9a\u53ef\u4ee5\u5b58\u53d6\u7684 <code>credentials</code>\u3002</p> <p>\u63a5\u4e0b\u6765\u6bcf\u4e00\u4e2a <code>component</code> \u90fd\u4f1a\u5efa\u7acb\u4e00\u7ec4\u4e13\u7528\u7684 <code>service account</code>\uff0c\u5e76\u4e14\u5728 <code>deployment</code> \u4e2d\u6307\u5b9a <code>service account</code>\u3002</p> <p>\u90e8\u7f72\u4e0a<code>kubernetes</code> \u540e\uff0c\u6bcf\u4e2a <code>pod</code> \u4f1a\u7ed1\u5b9a\u4e00\u4e2a <code>service account</code> \u5e76\u4e14\u5c06\u76f8\u5173\u8d44\u8baf\u653e\u5728 <code>secret</code> \u5f53\u4e2d\uff0c\u5176\u4e2d\u6709\u4e24\u7c7b\u578b\u7684\u8d44\u6599\u662f\u6211\u4eec\u4f1a\u4f7f\u7528\u5230\u7684\uff1a</p> <ul> <li><code>service account name</code>(\u540e\u9762\u7b80\u79f0 <code>sa name</code>): <code>service account</code> \u7684\u540d\u5b57\uff0c\u901a\u5e38\u53ef\u4ee5\u8ba2\u4e3a\u8ddf <code>deployment</code> \u4e00\u6837\u7684\u540d\u5b57</li> <li><code>token: service account</code> \u7684 <code>JWT Token</code>\uff0c\u53ef\u4ee5\u7528\u6765\u9a8c\u8bc1\u6b64 <code>Service Account</code> \u662f\u5426\u4e3a\u5408\u6cd5\u7684\u5e10\u53f7\u3002</li> </ul> <p>\u5f53\u4e00\u4e2a <code>pod</code> \u542f\u52a8\u540e\u4f1a\u6709\u4ee5\u4e0b\u7684\u51e0\u4e2a\u6b65\u9aa4\uff1a</p> <ol> <li>\u4ece <code>pod</code> \u5f53\u4e2d\u53d6\u51fa <code>sa name</code> \u4e0e <code>JWT token</code> \u5e76\u4e14\u5c1d\u8bd5\u767b\u5165 <code>vault</code></li> <li><code>vault</code> \u4f1a\u5c06 <code>sa name</code>\u4e0e <code>JWT token</code> \u900f\u8fc7 <code>token reviewer</code> \u8ddf <code>Kubernetes Cluster</code> \u786e\u8ba4\u6b64\u5e10\u53f7\u662f\u5426\u5408\u6cd5</li> <li>\u82e5\u4e3a\u5408\u6cd5\u5e10\u53f7\uff0c\u5219\u56de\u4f20 <code>client token</code>\uff0c\u6b64 <code>token</code> \u53ef\u4ee5\u5b58\u53d6\u7279\u5b9a\u7684 <code>Dynamic Credentials</code></li> <li><code>pod</code> \u53d6\u5f97 <code>Dynamic Credentials</code> \u5e76\u4e14\u5b58\u53d6\u8d44\u6599\u5e93\u3002</li> </ol> <p>\u6bcf\u4e2a <code>service account</code> \u5bf9\u5e94\u5230 <code>vault</code> \u7684 <code>role</code> \u90fd\u4f1a\u6709\u4e00\u7ec4\u81ea\u5df1\u7684 <code>policy</code>\uff0c\u5982\u6b64\u4e00\u6765\u5c31\u53ef\u4ee5\u5229\u7528 <code>service account</code> \u6765\u5207\u5206\u4e0d\u540c\u7684\u6743\u9650\u3002</p>"},{"location":"vault1/4vault_int_k8s/#service-account","title":"\u5efa\u7acb service account","text":"<p>\u8fd9\u8fb9\u4f1a\u6709\u4e24\u79cd <code>service account</code> \u9700\u8981\u5efa\u7acb\uff1a<code>token reviewer</code> \u8ddf\u7ed9 <code>deployment</code> \u7528\u7684 <code>service account</code>\u3002<code>token reviewer</code>\u9700\u8981\u4e24\u79cd <code>resources: ServiceAccount</code> \u8ddf<code>ClusterRoleBinding</code>\uff0c\u540e\u8005\u7528\u6765\u7ed1\u5b9a <code>system:auth-delegator</code>\u6743\u9650\u3002</p> <pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: vault-auth-service-account\n  namespace: default\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: vault-auth-role-binding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: vault-auth-service-account\n  namespace: default\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\n</code></pre> <p>\u81f3\u4e8e <code>deployment</code> \u6240\u4f7f\u7528\u7684 <code>Service Account</code> \u4e0d\u9700\u8981\u4efb\u4f55\u989d\u5916\u7684\u6743\u9650\uff0c\u53ea\u9700\u8981\u5728 <code>deployment</code> \u7ed1\u4e0a\u76f8\u5bf9\u5e94\u7684 <code>service account</code>\u3002</p> <p>\u4ee5\u4e0b\u7684\u8303\u4f8b\u4e2d\u7b2c\u4e00\u4e2a <code>resource</code> \u662f <code>ServiceAccount</code> \u540d\u5b57\u662f <code>tx</code>\uff0c\u800c\u7b2c\u4e8c\u4e2a <code>resource</code> \u662f <code>Deployment</code>\uff0c\u5e76\u4e14\u8bbe\u5b9a <code>serviceAccountName</code> \u4e3a <code>tx</code>\u3002</p>"},{"location":"vault1/4vault_int_k8s/#service-account-sak8s-secret-name","title":"\u53d6\u5f97 <code>service account (SA)</code>\u5b58\u5728<code>k8s</code> \u7684 <code>secret name</code>","text":"<pre><code>$ export VAULT_SA_NAME=$(kubectl get sa vault-auth -o jsonpath=\"{.secrets[*]['name']}\")\n</code></pre>"},{"location":"vault1/4vault_int_k8s/#token-reviewer-jwt-token","title":"\u5c07 <code>Token Reviewer</code> \u7684 <code>JWT token</code> \u53d6\u51fa","text":"<pre><code>$ export SA_JWT_TOKEN=$(kubectl get secret $VAULT_SA_NAME -o jsonpath=\"{.data.token}\" | base64 --decode; echo)\n</code></pre>"},{"location":"vault1/4vault_int_k8s/#kubernetes-ca","title":"Kubernetes \u7684 CA","text":"<pre><code>$ export SA_CA_CRT=$(kubectl get secret $VAULT_SA_NAME -o jsonpath=\"{.data['ca\\.crt']}\" | base64 --decode; echo)\n</code></pre>"},{"location":"vault1/4vault_int_k8s/#cluster-hostip-kubeconfig","title":"<code>cluster</code> \u7684 <code>host/ip</code>\uff0c\u6b63\u5f0f\u74b0\u5883\u53ef\u4ee5\u5f9e <code>kubeconfig</code> \u88e1\u9762\u53d6\u5f97","text":"<pre><code>$ export K8S_HOST=$(minikube ip)\n</code></pre> <p>\u63a5\u8457\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u5373\u53ef\u542f\u7528 <code>vault</code> \u7684 <code>kubernetes auth</code>\uff1a</p> <pre><code>$ vault auth enable kubernetes\n</code></pre> <p>\u542f\u7528\u540e\u5c31\u53ef\u4ee5\u8bbe\u5b9a <code>token reviewer</code> \u7684\u76f8\u5173\u8d44\u8baf\uff1a</p> <pre><code>vault write auth/kubernetes/config \\\n  token_reviewer_jwt=\"${SA_JWT_TOKEN}\" \\\n  kubernetes_host=\"${K8S_HOST}\" \\\n  kubernetes_ca_cert=\"${SA_CA_CRT}\"\n</code></pre> <p>\u4ee5\u4e0a\u8bbe\u5b9a\u53ef\u4ee5\u8ba9 <code>vault</code> \u53ef\u4ee5\u4f7f\u7528<code>token reviewer</code> \u7684\u89d2\u8272\u9a8c\u8bc1\u63a5\u4e0b\u6765\u7684 <code>service account</code> \u662f\u5426\u5408\u683c\uff0c\u63a5\u4e0b\u6765\u5219\u662f\u8bbe\u5b9a\u6bcf\u4e2a<code>service account</code> \u5bf9\u5e94\u7684 <code>vault role</code>\u3002\u4e0b\u9762\u7684\u8bbe\u5b9a\u4e2d\u63a1\u7528\u4e86<code>kubernetes-tx</code>\u8fd9\u4e2a <code>policy</code>\uff0c\u6b64\u65f6\u6211\u4eec\u8fd8\u6ca1\u5efa\u7acb\uff0c\u4e0b\u4e00\u4e2a\u6b65\u9aa4\u4f1a\u5efa\u7acb\u8be5 <code>policy</code>\u3002</p> <pre><code>vault write auth/kubernetes/role/tx \\\n    bound_service_account_names=tx \\\n    bound_service_account_namespaces=default \\\n    policies=kubernetes-tx \\\n    ttl=336h\n</code></pre> <p>\u4ee5\u4e0a\u662f <code>tx role</code>\uff0c\u4ee5\u6211\u4eec\u4e3e\u4f8b\u7684\u7b80\u6613\u94f6\u884c <code>API</code> \u7cfb\u7edf\uff0c</p> <ul> <li>\u6211\u4eec\u8fd8\u8981\u65b0\u589e <code>explorer</code> \u4e0e <code>account role</code>\u3002</li> <li>\u65b0\u589e\u5b8c\u6bd5\u540e\u4e0b\u4e00\u6b65\u662f\u65b0\u589e\u5bf9\u5e94\u7684 <code>policy</code> \u4e0e\u6307\u5b9a\u7ed9\u7279\u5b9a\u7684 <code>role</code>\u3002</li> <li>\u9996\u5148\u4f1a\u9700\u8981\u65b0\u589e\u4e00\u4e2a <code>hcl</code> \u6863\u6848\uff0c\u6bd4\u5982\u8bf4 <code>tx</code> \u4f1a\u9700\u8981\u5982\u4e0b\u7684 <code>policy</code>\uff1a</li> </ul> <pre><code>path \"database/creds/tx {\n  capabilities = [\"read\"]\n}\npath \"database/creds/account-readonly {\n  capabilities = [\"read\"]\n}\n</code></pre> <p>\u5e76\u4e14\u7528 <code>write policy</code> \u5199\u5165 <code>vault</code> \u8bbe\u5b9a\uff1a</p> <pre><code>vault policy write kubernetes-tx tx.hcl\n</code></pre> <p>\u4e0a\u9762\u8981\u8bbe\u5b9a\u7684\u4e8b\u60c5\u6ee1\u7e41\u7410\u7684\uff0c\u6211\u4eec\u662f\u4f7f\u7528\u4e00\u4e2a <code>python script</code> \u8bfb\u53d6\u81ea\u8ba2\u7684\u8bbe\u5b9a\u6863\u6848\u628a\u8fd9\u4e00\u8fde\u4e32\u7e41\u7410\u7684\u4e8b\u60c5\u7528 <code>script</code> \u8bbe\u5b9a\u3002</p> <p>\u7a0b\u5e8f\u90e8\u5206\u5b9e\u4f5c\uff1a</p> <p>\u8981\u5b58\u53d6 <code>vault</code> \u5f97\u5230 <code>Dynamic Credentials</code>\u6709\u51e0\u79cd\u65b9\u5f0f\uff0c</p> <ul> <li>\u50cf <code>Vault Agent with Kubernetes</code> \u6587\u7ae0\u4e2d\u63d0\u5230\u7684\u662f\u5229\u7528\u4e00\u4e2a <code>vault agent</code> \u653e\u5728<code>initContainer</code> \u88e1\u9762\u628a <code>secret</code> \u8bfb\u53d6\u51fa\u6765\u3002</li> <li>\u53e6\u5916\u4e00\u4e2a\u65b9\u5f0f\u662f\u5728\u7a0b\u5f0f\u4e2d\u5229\u7528 <code>Vault SDK</code> \u767b\u5165\u4e0e\u53d6\u5f97 <code>Dynamic Credentials</code>\u3002</li> </ul> <p>\u4ee5\u4e0b\u662f\u900f\u8fc7 <code>Vault SDK</code> \u5b58\u53d6 <code>Dynamic Credentials</code> \u7684\u8303\u4f8b\uff1a</p> <p><code>vault-k8s-auth.go</code></p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n\n    vaultApi \"github.com/hashicorp/vault/api\"\n)\n\nvar (\n    vaultHost           string\n    vaultCAPath         string\n    vaultServiceAccount string\n    vaultJWTPath        string\n)\n\nfunc main() {\n    vaultJWTPath = \"/var/run/secrets/kubernetes.io/serviceaccount/token\"\n    vaultServiceAccount = \"tx\"\n\n    tlsConfig := &amp;vaultApi.TLSConfig{\n        CACert:   vaultCAPath,\n        Insecure: false,\n    }\n\n    config := vaultApi.DefaultConfig()\n    config.Address = fmt.Sprintf(\"https://%s\", vaultHost)\n    config.ConfigureTLS(tlsConfig)\n\n    client, _ := vaultApi.NewClient(config)\n    buf, _ := ioutil.ReadFile(vaultJWTPath)\n    jwt := string(buf)\n\n    options := map[string]interface{}{\n        \"jwt\":  jwt,\n        \"role\": vaultServiceAccount,\n    }\n    loginSecret, _ := client.Logical().Write(\"auth/kubernetes/login\", options)\n    client.SetToken(loginSecret.Auth.ClientToken)\n\n    secret, _ := client.Logical().Read(\"database/creds/tx\")\n    fmt.Println(secret)\n}\n</code></pre> <p>\u8fd9\u8fb9\u8981\u6ce8\u610f\u7684\u662f <code>kubernetes</code>\u4f1a\u5c06 <code>JWT token</code> \u6302\u8f7d\u5728 <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code>\uff0c\u6240\u4ee5\u4f1a\u9700\u8981\u4ece\u6b64\u8def\u5f84\u53d6\u5f97 <code>token</code>\uff0c\u53d6\u5f97 <code>client token</code> \u4e4b\u540e\u5c31\u53ef\u4ee5\u5229\u7528\u6b64 <code>token</code> \u5b58\u53d6\u6743\u9650\u8303\u56f4\u5185\u7684 <code>credential</code> \u4e86\uff0c\u5728\u8fd9\u4e2a\u8303\u4f8b\u8bfb\u53d6\u4e86 <code>database/creds/tx</code> \u8def\u5f84\u5e95\u4e0b\u7684\u5e10\u53f7\u5bc6\u7801\uff0c<code>secret.Data</code> \u5185\u4f1a\u5305\u542b <code>username</code> \u4e0e <code>password</code>\u3002</p>"},{"location":"vault2/1vaba_intro/","title":"L1 Vault Associate: Introduction","text":""},{"location":"vault2/1vaba_intro/#ovewview","title":"Ovewview","text":"<ul> <li>Compare authentication methods</li> <li>Create Vault policies</li> <li>Assess Vault tokens</li> <li>Manage Vault leases</li> <li>Compare and configure Vault secrets engines</li> <li>Utilize Vault CLI</li> <li>Utilize Vault UI</li> <li>Be aware of the Vault API</li> <li>Explain Vault architecture</li> <li>Explain encryption as a service</li> </ul>"},{"location":"vault2/1vaba_intro/#hashicorp-vault","title":"HashiCorp Vault","text":"<ul> <li>Secrets lifecycle manager</li> <li>Written in Go</li> <li>Multiple operating systems</li> <li>Same binary for client/server</li> </ul>"},{"location":"vault2/1vaba_intro/#vault-concepts","title":"Vault Concepts","text":""},{"location":"vault2/1vaba_intro/#authentication","title":"Authentication","text":"<p>It has one or more authentication methods. Those authentication methods could rely on an internal system like userpass or an external system like LDAP.</p>"},{"location":"vault2/1vaba_intro/#policy","title":"Policy","text":"<p>policies govern what you can do on the Vault system. Once you have successfully authenticated to Vault and received the proper policies,</p>"},{"location":"vault2/1vaba_intro/#secrets","title":"Secrets","text":"<p>Those secrets are surfaced through secrets engines also called plugins.</p>"},{"location":"vault2/1vaba_intro/#audit","title":"Audit","text":"<p>Now one thing that's often overlooked in Vault is its audit system. Because you're interacting with secrets, which are extremely important and sensitive, want to audit everything that's going on with your Vault system</p>"},{"location":"vault2/1vaba_intro/#who-is-accessing-vault","title":"Who is accessing Vault","text":"<ul> <li>A direct end user who's interacting with Vault.</li> <li>Application that has some Vault code written into it to interact with the API.</li> <li>Virtual machine or a physical machine that's running some process to talk to Vault.</li> </ul> <p>They all end up interacting with the same thing, which is the API that sits in front of Vault. And it is the one and only way to interact with all the things on the back end of Vault.</p> <p>To interact with authentication,policy, secrets, all of those things, you have to go through the API.</p> <p>All of that interaction is going to involve a token that is granted by Vault to you. And you use that token with each of your requests that you send to Vault.</p>"},{"location":"vault2/1vaba_intro/#interacting-with-vault","title":"Interacting with Vault","text":""},{"location":"vault2/1vaba_intro/#install-binary-vault","title":"Install Binary Vault","text":"<p>https://developer.hashicorp.com/vault/tutorials/getting-started/getting-started-install</p> <pre><code># Windows - use Chocolatey\nchoco install vault\n\n# Mac - use Homebrew\nbrew tap hashicorp/tap\nbrew install hashicorp/tap/vault\n$ brew upgrade hashicorp/tap/vault\nWarning: hashicorp/tap/vault 1.12.1 already installed\n\n\n# Linux - use your package manager\ncurl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\n\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\n\nsudo apt-get update &amp;&amp; sudo apt-get install vault\n</code></pre> <pre><code>$ cat /etc/redhat-release\nCentOS Linux release 7.9.2009 (Core)\n\n$ sudo yum install -y yum-utils\n\n$ sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n$ sudo yum -y install vault\n</code></pre> <pre><code>$ vault version\nVault v1.12.1 (e34f8a14fb7a88af4640b09f3ddbb5646b946d9c), built 2022-10-27T12:32:05Z\n</code></pre>"},{"location":"vault2/1vaba_intro/#vault-cli","title":"Vault CLI","text":"<pre><code># Basic vault command structure\nvault &lt;command&gt; &lt;subcommand&gt; [options] [ARGUMENTS]\n\n# Getting help with vault\nvault \u00abcommand&gt; -help\nvault path-help PATH\n</code></pre>"},{"location":"vault2/1vaba_intro/#development-mode","title":"Development mode","text":"<ul> <li>Running on localhost without SSL</li> <li>In-memory storage</li> <li>Starts unsealed</li> <li>UI enabled</li> <li>Key/Value secrets engine enabled</li> </ul> <p>Starting the Dev Server</p> <pre><code>Usage: vault server [options]\n\n  This command starts a Vault server that responds to API requests. By default,\n  Vault will start in a \"sealed\" state. The Vault cluster must be initialized\n  before use, usually by the \"vault operator init\" command. Each Vault server must\n  also be unsealed using the \"vault operator unseal\" command or the API before the\n  server can respond to requests.\n\n  Start a server with a configuration file:\n\n      $ vault server -config=/etc/vault/config.hcl\n\n  Run in \"dev\" mode:\n\n      $ vault server -dev -dev-root-token-id=\"root\"\n\n  For a full list of examples, please see the documentation.\n...\n</code></pre> <pre><code># Launch Vault in development mode\nvault server -dev\n</code></pre> <pre><code> vault server -dev\n==&gt; Vault server configuration:\n\n             Api Address: http://127.0.0.1:8200\n                     Cgo: disabled\n         Cluster Address: https://127.0.0.1:8201\n              Go Version: go1.19.2\n              Listener 1: tcp (addr: \"127.0.0.1:8200\", cluster address: \"127.0.0.1:8201\", max_request_duration: \"1m30s\", max_request_size: \"33554432\", tls: \"disabled\")\n               Log Level: info\n                   Mlock: supported: true, enabled: false\n           Recovery Mode: false\n                 Storage: inmem\n                 Version: Vault v1.12.1, built 2022-10-27T12:32:05Z\n             Version Sha: e34f8a14fb7a88af4640b09f3ddbb5646b946d9c\n\n==&gt; Vault server started! Log data will stream in below:\n...\nWARNING! dev mode is enabled! In this mode, Vault runs entirely in-memory\nand starts unsealed with a single unseal key. The root token is already\nauthenticated to the CLI, so you can immediately begin using Vault.\n\nYou may need to set the following environment variables:\n\n    $ export VAULT_ADDR='http://127.0.0.1:8200'\n\nThe unseal key and root token are displayed below in case you want to\nseal/unseal the Vault or re-authenticate.\n\nUnseal Key: iHzoi88Bvod09TEfvI+lNYnXEnxb3Ph22oOHMpXKGYg=\nRoot Token: hvs.v9xurOdtve57iuHBFUbs2f3w\n\nDevelopment mode should NOT be used in production installations!\n</code></pre> <pre><code>Unseal Key: iHzoi88Bvod09TEfvI+lNYnXEnxb3Ph22oOHMpXKGYg=\nRoot Token: hvs.v9xurOdtve57iuHBFUbs2f3w\n</code></pre> <pre><code>export root_token=hvs.v9xurOdtve57iuHBFUbs2f3w\nvault login -address=\"http://127.0.0.1:8200\" $root_token\n\n vault login -address=\"http://127.0.0.1:8200\" $root_token\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                hvs.v9xurOdtve57iuHBFUbs2f3w\ntoken_accessor       DwTOLrYyE2YDIT9Xw10NB7CJ\ntoken_duration       \u221e\ntoken_renewable      false\ntoken_policies       [\"root\"]\nidentity_policies    []\npolicies             [\"root\"]\n</code></pre> <pre><code># Store Vault server address in environment variable\n#Linux and macOS\nexport VAULT_ADDR=http://127.0.0.1:8200\n# Windows PowerShell\nSenv:VAULT_ADDR=\"htto://127.0.0.1:8200'\n# Log into Vault\n</code></pre> <pre><code>export VAULT_ADDR='http://127.0.0.1:8200'\n</code></pre> <pre><code>$ curl http://localhost:8200\n&lt;a href=\"/ui/\"&gt;Temporary Redirect&lt;/a&gt;.\n</code></pre>"},{"location":"vault2/1vaba_intro/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>VAULT_ADDR</code> - Address of the Vault server</li> <li><code>VAULT_TOKEN</code> - Token value for requests</li> <li><code>VAULT_SKIP_VERIFY</code> -  No verify TLS cert</li> <li><code>VAULT_FORMAT</code> - Specify output format</li> </ul> <pre><code>$ vault status\nKey             Value\n---             -----\nSeal Type       shamir\nInitialized     true\nSealed          false\nTotal Shares    1\nThreshold       1\nVersion         1.12.1\nBuild Date      2022-10-27T12:32:05Z\nStorage Type    inmem\nCluster Name    vault-cluster-9f4e0e41\nCluster ID      9a900a0e-9a53-2793-c1c9-8d9c9aed2b16\nHA Enabled      false\n</code></pre> <p><code>http://127.0.0.1:8201/ui</code></p> <p></p>"},{"location":"vault2/1vaba_intro/#vault-api","title":"Vault API","text":"<ul> <li>RESTful</li> <li>Used by Ul and CLI</li> <li>Only way to interact with Vault</li> <li>curl with X-Vault-Token header</li> </ul> <p>we are asking for host-info about the host running our Vault, server, so this is going to be a GET type request.</p> <pre><code>export VAULT_ADDR='http://127.0.0.1:8200'\n\nexport root_token=hvs.VtsTEZn9wbP34P63WybIZMhv\n\ncurl --header \"X-Vault-Token: $root_token\" --request GET  $VAULT_ADDR/v1/sys/host-info | jq\n\n\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  3515    0  3515    0     0  74470      0 --:--:-- --:--:-- --:--:-- 92500\n{\n  \"request_id\": \"809df17b-5d94-e068-3078-cd400a328788\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"cpu\": [\n      {\n        \"cpu\": 0,\n        \"vendorId\": \"GenuineIntel\",\n        \"family\": \"6\",\n        \"model\": \"70\",\n        \"stepping\": 1,\n        \"physicalId\": \"\",\n        \"coreId\": \"\",\n        \"cores\": 4,\n        \"modelName\": \"Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz\",\n        \"mhz\": 2800,\n        \"cacheSize\": 256,\n        \"flags\": [\n          \"fpu\",\n          \"vme\",\n          \"de\",\n          \"pse\",\n   ...\n    },\n    \"timestamp\": \"2022-11-04T06:34:38.380146Z\"\n  },\n  \"wrap_info\": null,\n  \"warnings\": [\n    \"cpu_times: not implemented yet\"\n  ],\n  \"auth\": null\n}\n</code></pre>"},{"location":"vault2/1vaba_intro/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Vault is a single binary for client and server</li> <li>Vault can be started in dev mode for local testing</li> <li>All Vault communication goes through the API</li> <li>You can interact with Vault using the CLI, UI, or API</li> <li>Use <code>VAULT_ADDR</code> and <code>VAULT_TOKEN</code> with the CLI</li> </ul>"},{"location":"vault2/2vaba_auth_poly/","title":"L2 Authentication and Policies","text":""},{"location":"vault2/2vaba_auth_poly/#1-authenticating-to-vault","title":"1 Authenticating to Vault","text":""},{"location":"vault2/2vaba_auth_poly/#overview","title":"Overview","text":"<ul> <li>Authentication methods</li> <li>Selecting the right method</li> <li>Configuring an auth method</li> <li>Using an auth method</li> </ul>"},{"location":"vault2/2vaba_auth_poly/#authentication-methods","title":"Authentication Methods","text":"<ul> <li>Provided by plug-ins</li> </ul> <p>There are built-in plugins in Vault for AWS, Azure, GCP, as well as some of the other public cloud providers,so you can use any of those as an authentication target for your identities.</p> <ul> <li>Multiple methods allowed</li> </ul> <p>There are also cloud native type authentications like Kubernetes,Cloud Foundry, GitHub, or even JSON web tokens.</p> <ul> <li>Reference external sources<ul> <li>LDAP, GitHub, AWS IAM, etc. </li> </ul> </li> </ul> <p>There are also traditional methods like LDAP, Radius, or even Kerberos, </p> <ul> <li>Userpass and AppRole are internal</li> <li>Token method is enabled by default</li> <li>Mounted on the path /auth</li> <li>Used to obtain a token</li> </ul>"},{"location":"vault2/2vaba_auth_poly/#username-password","title":"Username &amp; Password","text":"<ul> <li>Meant for human operators</li> <li>Composed of a username and password</li> </ul>"},{"location":"vault2/2vaba_auth_poly/#approle-method","title":"AppRole Method","text":"<ul> <li>Used for machines and applications</li> <li>Consists of RolelD and SecretID</li> <li>Push or pull for SecretID</li> </ul> <p>It is used primarily for machines and applications. It's more programmatic. can have the client pull that SecretID when it boots up with some information</p> <p>You can either have Vault server push the SecretID down to the client, or you can have the client pull that SecretID when it boots up with some information that's already preconfigured on that client.</p>"},{"location":"vault2/2vaba_auth_poly/#real-world-sample","title":"Real-world Sample","text":"<p>Use Case</p> <ul> <li>Developers need to access secrets for AWS</li> <li>Globomantics has Active Directory for all internal users</li> <li>All developers have GitHub accounts</li> <li>Contract developers do not have AD accounts</li> </ul> <p>Solution</p> <ul> <li>Enable the GitHub authentication method</li> <li>Have developers generate a personal authentication token</li> </ul>"},{"location":"vault2/2vaba_auth_poly/#globomantics-scenario","title":"Globomantics Scenario","text":"<p>Use Case</p> <ul> <li>Servers running on-prem need to access secrets</li> <li>Servers are not members of the AD domain</li> <li>Authentication must not require prompts</li> <li>All servers are on the same IP address subnet</li> </ul> <p>Solution</p> <ul> <li>Enable the AppRole authentication method</li> <li>Generate a RolelD for each group of servers</li> <li>Constrain the SecretID by CID address</li> </ul>"},{"location":"vault2/2vaba_auth_poly/#configuring-an-auth-method","title":"Configuring an Auth Method","text":"<ul> <li>All methods are enabled on <code>/sys/auth</code></li> <li>Methods are enabled on a path<ul> <li>Defaults to method name</li> </ul> </li> <li>Methods cannot be moved</li> <li>Methods can be tuned and configured<ul> <li>Tuning settings are common for all methods</li> <li>Configuration settings are specific to a method   </li> </ul> </li> </ul> <p>Auth methods are all using the auth path, but in reality, it's actually the <code>/sys/auth</code> path.</p> <p>If you want to add a new authentication method, you need access to this path. All authentication methods are enabled on a path.</p> <p>You don't specify a path for that method. it will use the default path, which defaults to the method name. </p> <p>So if you're enabling userpass and you don't specify a path, then it will set the path to auth/userpass methods</p> <p>You could disable the method and then re-enable it on the new path. But disabling a method also deletes all the information stored about that method</p> <p>Methods, once they are enabled, can be tuned and configured. So if you are enabling the AWS method,</p> <pre><code># List existing auth methods\nvault auth list\n</code></pre> <pre><code>$ vault auth list\nPath      Type     Accessor               Description                Version\n----      ----     --------               -----------                -------\ntoken/    token    auth_token_3429adfc    token based credentials    n/a\n</code></pre> <pre><code># Enable an auth method\nvault auth enable [options] TYPE\nvault auth enable -path=globopass userpass\n\n# Tune an auth method\nvault auth tune [options] PATH\n\nvault auth tune -description=\"First userpass\" alobopass/\n\n# Disable an auth method \nvault auth disable [options] PATH\n\nvault auth disable globopass/\n</code></pre>"},{"location":"vault2/2vaba_auth_poly/#enabling-the-userpass-method","title":"Enabling the Userpass Method","text":"<p><code>Root Token: hvs.VtsTEZn9wbP34P63WybIZMhv</code></p> <p><code>hvs.VtsTEZn9wbP34P63WybIZMhv</code></p> <pre><code>$ vault login \nToken (will be hidden): \nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                hvs.VtsTEZn9wbP34P63WybIZMhv\ntoken_accessor       aONrVciIIfKgvuvbeSrcXV4u\ntoken_duration       \u221e\ntoken_renewable      false\ntoken_policies       [\"root\"]\nidentity_policies    []\npolicies             [\"root\"]\n</code></pre> <pre><code>$ vault auth list\nPath      Type     Accessor               Description                Version\n----      ----     --------               -----------                -------\ntoken/    token    auth_token_3429adfc    token based credentials    n/a\n</code></pre> <p>Enable our auth method using userpass</p> <pre><code>$ vault auth enable userpass\nSuccess! Enabled userpass auth method at: userpass/\n\n\n$ vault auth list\nPath         Type        Accessor                  Description                Version\n----         ----        --------                  -----------                -------\ntoken/       token       auth_token_3429adfc       token based credentials    n/a\nuserpass/    userpass    auth_userpass_eee6a625    n/a                        n/a\n</code></pre> <pre><code>vault auth tune -description=\"DevTest UserPass\" userpass/\n</code></pre> <pre><code>$ vault auth tune -description=\"DevTest UserPass\" userpass/\nSuccess! Tuned the auth method at: userpass/\n</code></pre> <p></p>"},{"location":"vault2/2vaba_auth_poly/#enabling-the-approle-method","title":"Enabling the AppRole Method","text":"<pre><code>$ vault auth tune -description=\"DevTest AppRole\" DevAppRole/\n\nSuccess! Tuned the auth method at: DevAppRole/\n</code></pre> <pre><code> vault auth list\nPath           Type        Accessor                  Description                Version\n----           ----        --------                  -----------                -------\nDevAppRole/    approle     auth_approle_af5d22d2     DevTest AppRole            n/a\ntoken/         token       auth_token_3429adfc       token based credentials    n/a\nuserpass/      userpass    auth_userpass_eee6a625    DevTest UserPass           n/a\n</code></pre>"},{"location":"vault2/2vaba_auth_poly/#configuring-the-userpass-method","title":"Configuring the Userpass Method","text":"<pre><code>$ vault path-help auth/userpass/\n## DESCRIPTION\n\nThe \"userpass\" credential provider allows authentication using\na combination of a username and password. No additional factors\nare supported.\n\nThe username/password combination is configured using the \"users/\"\nendpoints by a user with root access. Authentication is then done\nby supplying the two fields for \"login\".\n\n## PATHS\n...\n</code></pre> <pre><code># Looks like we do that through the users path\n\nvault path-help auth/userpass/users\n\nvault path-help auth/userpass/users/something\n</code></pre> <p>Let's write some data to create a new user</p> <pre><code>vault write auth/userpass/users/dev password=ops\n</code></pre> <p>We can also add a user through the UI</p> <p></p> <p></p> <p></p>"},{"location":"vault2/2vaba_auth_poly/#configuring-the-approle-method","title":"Configuring the AppRole Method","text":"<pre><code>vault path-help auth/DevAppRole\n\n# Looks like we need to configure a role\n\nvault path-help auth/DevAppRole/role/something\n</code></pre> <pre><code> vault path-help auth/DevAppRole\n## DESCRIPTION\n\nAny registered Role can authenticate itself with Vault. The credentials\ndepends on the constraints that are set on the Role. One common required\ncredential is the 'role_id' which is a unique identifier of the Role.\nIt can be retrieved from the 'role/&lt;appname&gt;/role-id' endpoint.\n...\n</code></pre> <p>Example</p> <pre><code>vault write auth/DevAppRole/role/webapp role_name=\"webapp\" secret_id_num_uses=1 secret_id_ttl=2h\n</code></pre> <ul> <li>The role can be used once</li> <li>the time to live is 2 hours</li> </ul> <pre><code>Success! Data written to: auth/DevAppRole/role/webapp\n</code></pre>"},{"location":"vault2/2vaba_auth_poly/#using-an-auth-method","title":"Using an auth method","text":"<pre><code># Login using a token\nvault login\n\n# Login with an auth method\nvault login [options] [AUTH K= V...]\nvault login -method=userpass username=dev\n\n# Write with an auth method\nvault write [options] PATH [DATA K=V.]\nvault write auth/userpass/login/dev password=ops\n</code></pre> <pre><code>$ vault login -method=userpass username=dev\nPassword (will be hidden): \nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIL76Rb9RDZknoWrjncige50zoIV_gEGOvmqe6e7U8ks6Gh4KHGh2cy5ObjUxSE5vVFdOUHUzZFRzb1J1cE45WjI\ntoken_accessor         zvliJU3rkXeZOZCqv8xcjZ27\ntoken_duration         768h\ntoken_renewable        true\ntoken_policies         [\"default\"]\nidentity_policies      []\npolicies               [\"default\"]\ntoken_meta_username    dev\n</code></pre>"},{"location":"vault2/2vaba_auth_poly/#using-the-approle-method","title":"Using the AppRole Method","text":"<pre><code>vault path-help auth/DevAppRole/login \n</code></pre> <pre><code>$ vault path-help auth/DevAppRole/login \nRequest:        login\nMatching Route: ^login$\n\nIssue a token based on the credentials supplied\n\n## PARAMETERS\n\n    role_id (string)\n\n        Unique identifier of the Role. Required to be supplied when the 'bind_secret_id' constraint is set.\n\n    secret_id (string)\n\n        SecretID belong to the App role\n</code></pre>"},{"location":"vault2/2vaba_auth_poly/#using-approle-with-the-api","title":"Using AppRole with the API","text":"<pre><code>$ vault login \nToken (will be hidden):   hvs.VtsTEZn9wbP34P63WybIZMhv`\n</code></pre> <p>so we need the <code>role_id</code> and <code>secret_id</code></p> <pre><code>vault read auth/DevAppRole/role/webapp/role-id\n</code></pre> <pre><code>$ vault read auth/DevAppRole/role/webapp/role-id\nKey        Value\n---        -----\nrole_id    aa8f2859-0c4a-ecf3-6243-78220b448896\n\nexport roleId=aa8f2859-0c4a-ecf3-6243-78220b448896\n</code></pre> <p>Get the <code>secret_id</code>, since we're generating data we need to use the write command instead</p> <pre><code>vault write -force auth/DevAppRole/role/webapp/secret-id\n</code></pre> <pre><code>$ vault write -force auth/DevAppRole/role/webapp/secret-id\nKey                   Value\n---                   -----\nsecret_id             30ceb130-fe1b-1c49-c057-42ddcba94900\nsecret_id_accessor    080d17c4-6a1f-f65e-0544-0a83eaee91b3\nsecret_id_num_uses    1\nsecret_id_ttl         2h\n</code></pre> <pre><code>export secretId=30ceb130-fe1b-1c49-c057-42ddcba94900\n</code></pre> <p>now we can log in! This also uses the write command</p> <pre><code>vault write auth/DevAppRole/login role_id=$roleId secret_id=$secretId\n\n$ vault write auth/DevAppRole/login role_id=$roleId secret_id=$secretId\nKey                     Value\n---                     -----\ntoken                   hvs.CAESIHteId3d4H7T6eaARDKYfTk_0Lh4Hcb05id6VuWmnTmcGh4KHGh2cy5veHRjUnJPMzdSYzc5eHBDNG9nZTk3UWk\ntoken_accessor          U52iST6zSKQtnbZtUREZlfkh\ntoken_duration          60h\ntoken_renewable         true\ntoken_policies          [\"default\"]\nidentity_policies       []\npolicies                [\"default\"]\ntoken_meta_role_name    webapp\n</code></pre> <p>Let's try logging in using the API with AppRole instead</p> <pre><code>$ curl --request POST \\\n&gt;   --data \"{\\\"role_id\\\": \\\"$roleId\\\",\\\"secret_id\\\": \\\"$secretId\\\"}\" \\\n&gt;   $VAULT_ADDR/v1/auth/DevAppRole/login | jq\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   136  100    33  100   103   3112   9715 --:--:-- --:--:-- --:--:--  132k\n{\n  \"errors\": [\n    \"invalid secret id\"\n  ]\n}\n</code></pre>"},{"location":"vault2/2vaba_auth_poly/#dsiabling-an-auth-method","title":"Dsiabling an Auth Method","text":"<p>we are going to retire the AppRole for the moment</p> <pre><code>vault auth disable DevAppRole/\n\nvault auth list\n</code></pre>"},{"location":"vault2/2vaba_auth_poly/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Auth methods use internal or external sources for authentication to Vault</li> <li>Multiple instances of the same method can be enabled on different</li> <li>paths, and the default path is the method's name</li> <li>Pick an authentication method that suits the client and environment</li> <li>Auth methods are managed using the <code>vault auth</code> command</li> <li>Auth methods are used with the <code>vault login</code> or <code>vault write</code> commands</li> </ul>"},{"location":"vault2/2vaba_auth_poly/#vault-policy","title":"Vault Policy","text":""},{"location":"vault2/2vaba_auth_poly/#vault-policy-overview","title":"Vault Policy Overview","text":"<ul> <li> <p>Policies define permissions in Vault</p> </li> <li> <p>Multiple options for assignment</p> <ul> <li>Token, identity, auth methods</li> </ul> </li> <li> <p>Most specific wins</p> </li> <li>No versioning</li> <li>Default policy</li> <li>Root policy</li> </ul> <p>So if you have two different policy statements.  You can edit the default policy, but you cannot delete the default policy. The other special policy is the root policy.</p> <p>This is the policy that's automatically associated with root tokens, The root policy has full control over everything in the Vault server,</p>"},{"location":"vault2/2vaba_auth_poly/#defaulthcl","title":"<code>default.hcl</code>","text":"<pre><code># Allow tokens to look up their own properties\npath \"auth/token/lookup-self\" { ...\n\n# Allow tokens to renew themselves\npath \"auth/token/renew-self\" { ...\n\n# Allow tokens to revoke themselves\npath \"auth/token/revoke-self\" { ...\n\n# Allow a token to look up its own capabilities on a path\npath \"sys/capabilities-self\" { ...\n\n# Allow a token to look up its own entitv bv id or name\npath \"identity/entity/id/({identity.entity.id}}\"  { ...\n</code></pre>"},{"location":"vault2/2vaba_auth_poly/#policy-syntax","title":"Policy Syntax","text":"<ul> <li>HCL or JSON</li> <li>Path</li> <li>Capabilities</li> </ul> <p>The prefered format is HCI just because it's easier for humans to read and understand. There are two basic elements of a policy rule.</p>"},{"location":"vault2/2vaba_auth_poly/#exploring-path-examples","title":"Exploring Path Examples","text":"<pre><code># Basic path expression\npath \"somepath/in/vault\"\n\n# Using the glob '*'\n# Match \"secrets/globo/web1/\" and \"secrets/globo/webapp/apikeys\"\n\npath \"secrets/globo/web*\"\n\n# Using the path segment match '+'\n# Match \"secrets/globo/webapp1/apikeys\" and \"secrets/globo/webapp2/apikeys\"\n\npath \"secrets/globo/+/apikeys\"\n\n# Using a parameter\n# Resolve to the name of the entity\npath \"identity/entity/id/{{identitv.entitv.id}}\" { ...\n\npath \"identity/entity/name/((identity.entity.name}}\" { ...\n</code></pre>"},{"location":"vault2/2vaba_auth_poly/#capabilities-overview","title":"Capabilities Overview","text":"<p>Standard CRUD capabilities</p> <ul> <li>Create - create a new key</li> <li>Read - read data from a key</li> <li>Update - alter data for a key</li> <li> <p>Delete - remove a key</p> </li> <li> <p>List - enumerate keys</p> <ul> <li>No access to key data</li> <li>Not implied by the read</li> </ul> </li> <li> <p>Sudo - special permissions</p> <ul> <li>Root-protected paths</li> <li>Do not imply other actions</li> </ul> </li> <li> <p>Deny - disable access</p> <ul> <li>Overrides all other actions</li> <li>Denies the full path</li> </ul> </li> </ul> <pre><code># Allow read access to an apikey\npath \"secrets/globo/webapp/apikey\" {\n    capabilities = [\"read\"]\n}\n\n# Allow read and list access to webapp path\npath \"secrets/globo/webapp/*\" {\n    capabilities = [\"read\",\"list\"]\n}\n\n# Allow full access to apikey in dev paths\npath \"secrets/dev/+/apikey\" {\n    capabilities = [\"create\",\"read\",\"update\",\"delete\"]\n}\n\n# Deny access to the dev privileged path\npath \"secrets/dev/webapp/*\" {\n    capabilities = [\"create\",\"read\",\"list\",\"update\",\"delete\"]\n}\n\npath \"secrets/globo/webapp/privileged*\" {\n    capabilities = [\"deny\"]\n}\n</code></pre>"},{"location":"vault2/2vaba_auth_poly/#dev-scenario","title":"Dev Scenario","text":"<p>Use Case 1</p> <ul> <li>Junior administrators need to manage secrets engines</li> <li>Follow the principle of least privileged access</li> <li>No access to contents of secrets engines</li> </ul> <p>Solution 1</p> <ul> <li>Create a secrets engine management policy</li> <li>Assign the policy to junior administrators</li> </ul> <p>Use Case 2</p> <ul> <li>Grant access to the accounting secrets engine</li> <li>Deny access to privileged information for regular accountants</li> <li>Allow management of metadata</li> </ul> <p>Solution 2</p> <ul> <li>Create an accounting policy</li> <li>Add a deny rule for privileged path</li> <li>Add access to the metadata path</li> </ul>"},{"location":"vault2/2vaba_auth_poly/#policy-creation-and-assignment","title":"Policy Creation and Assignment","text":"<p>Policy Assignment</p> <ul> <li>Directly on token when created</li> <li>Applied through an authentication method</li> <li>Assigned to an entity through the identity secrets engine</li> </ul> <p>Assigned to an entity through the identity secrets engine</p> <pre><code># List existing policies\nvault policy list\n\n# Read the contents of a policy\nvault policy read [options] NAME\nvault policy read secrets-mgmt\n\n# Write a new policy or update an existing policy\nvault policy write [options] NAME PATH | &lt;stdin&gt;\nvault policy write secrets-mgmt secrets-mgmt.hcl\n\n# Delete a policy\nvault policy delete [options] NAME\nvault policy delete secrets-mgmt\n\n# Format a policy per HCL guideline\nvault policy fmt [options] PATH\nvault policy fmt secrets-mgmt.hcl\n</code></pre>"},{"location":"vault2/2vaba_auth_poly/#create-a-policy-with-the-cli","title":"Create a policy with THE CLI","text":"<pre><code># First of all we are going to start Vault in development mode\nvault server -dev\n\n\n# Now set your Vault address environment variable\nexport VAULT_ADDR=http://127.0.0.1:8200\n\n# And log into Vault using the root token\nvault login \n\nhvs.VtsTEZn9wbP34P63WybIZMhv\n</code></pre> <pre><code># Now we can check and see what policies exist right now\nvault policy list \n\ndefault\nroot\n\n# Before we create the policies, let's get a few things set up\n# You can skip this if you still have it running from last time\n\n# Enable userpass auth method\nvault auth enable userpass\n\n# Add a user\nvault write auth/userpass/users/ned password=tacos\n</code></pre> <p>Tasks:</p> <ul> <li>Create two policies</li> <li>Generate a token with a policy</li> <li>Update a policy</li> <li>Delete a policy</li> </ul> <pre><code>vault policy list \n\n# Now we'll create a policy for secrets management\nvault policy write secrets-mgmt secrets-mgmt.hcl\n</code></pre> <p><code>secrets-mgmt.hcl</code></p> <pre><code># Manage secrets engines\npath \"sys/mounts/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# List existing secrets engines.\npath \"sys/mounts\"\n{\n  capabilities = [\"read\"]\n}\n</code></pre> <ul> <li>The first is for the path <code>sys/mounts/*</code>. <code>Sys/mounts</code> is the path that Vault uses to mount any secrets engines. </li> <li>For capabilities, I've got create, read, update, delete, list, and sudo because it's important to write understand that this is a root protected path.</li> </ul> <pre><code># Now we'll create a policy for secrets management\nvault policy write secrets-mgmt secrets-mgmt.hcl\n\n$ vault policy write secrets-mgmt secrets-mgmt.hcl\nSuccess! Uploaded policy: secrets-mgmt\n</code></pre> <pre><code>$ vault policy list\ndefault\nsecrets-mgmt\nroot\n</code></pre> <pre><code>$ vault policy read secrets-mgmt\n# Manage secrets engines\npath \"sys/mounts/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# List existing secrets engines.\npath \"sys/mounts\"\n{\n  capabilities = [\"read\"]\n}\n</code></pre>"},{"location":"vault2/2vaba_auth_poly/#creating-a-policy-with-ui","title":"Creating a policy with UI","text":"<p>we'll create a policy for the accounting secrets engine</p> <pre><code># First we'll enable the secrets engine\nvault secrets enable -path=accounting -version=2 kv\n\nSuccess! Enabled the kv secrets engine at: accounting/\n</code></pre> <p>we'll add some secrets to the engine</p> <pre><code>$ vault kv put accounting/apitokens/d101 token=1234567890\n\n\n========= Secret Path =========\naccounting/data/apitokens/d101\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-11-08T13:53:23.286196Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n\n$ vault kv put accounting/apitokens/d102 token=1234567890\n\n========= Secret Path =========\naccounting/data/apitokens/d102\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-11-08T13:53:41.906207Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\nvault kv put accounting/apitokens/d103 token=1234567890\n\n========= Secret Path =========\naccounting/data/apitokens/d103\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-11-08T13:54:51.674633Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n</code></pre> <ul> <li>Now we can craft a policy allowing access to the regular tokens</li> <li>And denying access to the priveleged tokens</li> <li>We will add the policy through the UI</li> </ul> <p><code>hvs.VtsTEZn9wbP34P63WybIZMhv</code></p> <p>Create ACL policies</p> <ul> <li>Name: accounting</li> <li>accounting-fixed.hcl</li> </ul> <pre><code># Allow access to all accounting data\npath \"accounting/data/*\" {\n    capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\n\n# Allow access to metadata for kv2\npath \"accounting/metadata/*\" {\n    capabilities = [\"list\"]\n}\n\n# Deny access to privileged accounting data\npath \"accounting/data/apitokens/privleged*\" {\n    capabilities = [\"deny\"]\n}\n\npath \"accounting/metadata/apitokens/privileged*\" {\n    capabilities = [\"deny\"]\n}\n</code></pre> <p></p>"},{"location":"vault2/2vaba_auth_poly/#policy-assignment-commands","title":"Policy assignment commands","text":"<pre><code># Associate directly with a token\nvault token create -policy=\"secrets-mgmt\"\n\n# Assign to a user in userpass\nvault write auth/userpass/users/dev token_policies=\"secrets-mgmt\"\n\n# Assign to an entity in identity\nvault write identity/entity/name/dev policies-\"secrets-mgmt\"\n</code></pre> <p>Let's try out our accounting policy be associating a policy directly with a token</p> <pre><code>vault token create -policy=accounting\n</code></pre> <pre><code>Key                  Value\n---                  -----\ntoken                hvs.CAESIFyMWuqsnuU2a1OCBIvl2dpAf9oufW7ZFcIwOiAtmTD5Gh4KHGh2cy5UYkpJMGZZU2NVWnc5MXJhQjVENGtMVnE\ntoken_accessor       QKH5VA18riW7rGZHqYojZU72\ntoken_duration       768h\ntoken_renewable      true\ntoken_policies       [\"accounting\" \"default\"]\nidentity_policies    []\npolicies             [\"accounting\" \"default\"]\n</code></pre> <p>Now log in with that token</p> <p><code>hvs.CAESIFyMWuqsnuU2a1OCBIvl2dpAf9oufW7ZFcIwOiAtmTD5Gh4KHGh2cy5UYkpJMGZZU2NVWnc5MXJhQjVENGtMVnE</code></p> <pre><code>vault login\n\nToken (will be hidden): \nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                hvs.CAESIFyMWuqsnuU2a1OCBIvl2dpAf9oufW7ZFcIwOiAtmTD5Gh4KHGh2cy5UYkpJMGZZU2NVWnc5MXJhQjVENGtMVnE\ntoken_accessor       QKH5VA18riW7rGZHqYojZU72\ntoken_duration       767h57m52s\ntoken_renewable      true\ntoken_policies       [\"accounting\" \"default\"]\nidentity_policies    []\npolicies             [\"accounting\" \"default\"]\n</code></pre> <p>listing out info in the accounting secrets engine</p> <pre><code>$ vault kv list accounting/\n\nKeys\n----\napitokens/\n\n$ vault kv list accounting/apitokens/\n\nKeys\n----\nd101\nd102\nd103\n\n\n$ vault kv list accounting/apitokens/privileged\n\nError listing accounting/metadata/apitokens/privileged: Error making API request.\n\nURL: GET http://127.0.0.1:8200/v1/accounting/metadata/apitokens/privileged?list=true\nCode: 403. Errors:\n\n* 1 error occurred:\n        * permission denied\n</code></pre> <p>Seems to work for listing, let's try reading some secrets</p> <pre><code> $ vault kv get accounting/apitokens/d101\n========= Secret Path =========\naccounting/data/apitokens/d101\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-11-08T13:53:23.286196Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n==== Data ====\nKey      Value\n---      -----\ntoken    1234567890\n ```\n\n</code></pre> <p>$ vault kv get accounting/apitokens/privileged/p101 Error reading accounting/data/apitokens/privileged/p101: Error making API request.</p> <p>URL: GET http://127.0.0.1:8200/v1/accounting/data/apitokens/privileged/p101 Code: 403. Errors:</p> <ul> <li>1 error occurred:         * permission denied</li> </ul> <pre><code>\n### Updating the policy with \n\nWe can do that through the UI or with this command (You'll need to log back in as root)\n\n</code></pre> <p>$ vault login Token (will be hidden):  Success! You are now authenticated. The token information displayed below is already stored in the token helper. You do NOT need to run \"vault login\" again. Future Vault requests will automatically use this token.</p> <p>Key                  Value ---                  ----- token                hvs.VtsTEZn9wbP34P63WybIZMhv token_accessor       aONrVciIIfKgvuvbeSrcXV4u token_duration       \u221e token_renewable      false token_policies       [\"root\"] identity_policies    [] policies             [\"root\"]</p> <pre><code>\n**`accounting-fixed.hcl`**\n\n</code></pre> <p>vault policy write accounting accounting-fixed.hcl</p> <pre><code>\n</code></pre> <p>$ vault policy write accounting accounting-fixed.hcl Success! Uploaded policy: accounting</p> <pre><code>\n</code></pre> <p>$ vault token create -policy=accounting Key                  Value ---                  ----- token                hvs.CAESIKxpTBRO4lcRlX0nYU4eRTH8y19HdrXefmuwMbzmmGjvGh4KHGh2cy42b2RuYlFRMjVJYkJMbjZhOTBFb0M4RHU token_accessor       bbYdbUDIaKqF7bSi6a2ral4a token_duration       768h token_renewable      true token_policies       [\"accounting\" \"default\"] identity_policies    [] policies             [\"accounting\" \"default\"]</p> <pre><code>\n</code></pre> <p>$ vault login Token (will be hidden):  Success! You are now authenticated. The token information displayed below is already stored in the token helper. You do NOT need to run \"vault login\" again. Future Vault requests will automatically use this token.</p> <p>Key                  Value ---                  ----- token                hvs.CAESIKxpTBRO4lcRlX0nYU4eRTH8y19HdrXefmuwMbzmmGjvGh4KHGh2cy42b2RuYlFRMjVJYkJMbjZhOTBFb0M4RHU token_accessor       bbYdbUDIaKqF7bSi6a2ral4a token_duration       767h59m6s token_renewable      true token_policies       [\"accounting\" \"default\"] identity_policies    [] policies             [\"accounting\" \"default\"]</p> <pre><code>\n</code></pre> <p>$ vault kv get accounting/apitokens/privileged/p101 Error reading accounting/data/apitokens/privileged/p101: Error making API request.</p> <p>URL: GET http://127.0.0.1:8200/v1/accounting/data/apitokens/privileged/p101 Code: 403. Errors:</p> <ul> <li>1 error occurred:         * permission denied</li> </ul> <pre><code>\n### Assign policy withg auth method\n\n\n**Log back as root**\n\n</code></pre> <p>$ vault login Token (will be hidden):  Success! You are now authenticated. The token information displayed below is already stored in the token helper. You do NOT need to run \"vault login\" again. Future Vault requests will automatically use this token.</p> <p>Key                  Value ---                  ----- token                hvs.VtsTEZn9wbP34P63WybIZMhv token_accessor       aONrVciIIfKgvuvbeSrcXV4u token_duration       \u221e token_renewable      false token_policies       [\"root\"] identity_policies    [] policies             [\"root\"]</p> <pre><code>\n</code></pre> <p>$ vault path-help auth/userpass/users/dev</p>"},{"location":"vault2/2vaba_auth_poly/#looks-like-token_policies-should-do-it","title":"Looks like token_policies should do it","text":"<p>vault write auth/userpass/users/dev token_policies=\"secrets-mgmt\"</p> <p>Success! Data written to: auth/userpass/users/dev</p> <p>vault token create -policy=accounting</p>"},{"location":"vault2/2vaba_auth_poly/#now-we-can-log-in-as-dev-and-try-to-mount-a-new-secrets-engine","title":"Now we can log in as Dev and try to mount a new secrets engine","text":"<p>vault login -method=userpass username=dev</p>"},{"location":"vault2/2vaba_auth_poly/#ops","title":"ops","text":"<p>$ vault login -method=userpass username=dev Password (will be hidden):  Success! You are now authenticated. The token information displayed below is already stored in the token helper. You do NOT need to run \"vault login\" again. Future Vault requests will automatically use this token.</p> <p>Key                    Value ---                    ----- token                  hvs.CAESIFKJNpKv3QLtY745Le6nmyX_Q8GoD65AHIdpWfaoXKTZGh4KHGh2cy5vYWpHYmJXeG1Ja0Nmb0tlTnBMalJYSUg token_accessor         HRAQL1MJN7DbvTr5gzeMaTM6 token_duration         768h token_renewable        true token_policies         [\"default\" \"secrets-mgmt\"] identity_policies      [] policies               [\"default\" \"secrets-mgmt\"] token_meta_username    dev</p> <p>$ vault secrets enable -path=testing -version=1 kv Success! Enabled the kv secrets engine at: testing/</p> <p>$ vault secrets list Path           Type         Accessor              Description ----           ----         --------              ----------- accounting/    kv           kv_2df6c2c6           n/a cubbyhole/     cubbyhole    cubbyhole_8fd6911c    per-token private secret storage identity/      identity     identity_c2caa7df     identity store secret/        kv           kv_83efb8aa           key/value secret storage sys/           system       system_27051655       system endpoints used for control, policy and debugging testing/       kv           kv_eb4ddf6e           n/a</p> <p>$ vault secrets disable testing Success! Disabled the secrets engine (if it existed) at: testing/</p> <p>$ vault secrets disable accounting Success! Disabled the secrets engine (if it existed) at: accounting/</p> <p>$ vault policy delete accounting Error deleting accounting: Error making API request.</p> <p>URL: DELETE http://127.0.0.1:8200/v1/sys/policies/acl/accounting Code: 403. Errors:</p> <ul> <li>1 error occurred:         * permission denied</li> </ul> <p>$ vault login Token (will be hidden):  Success! You are now authenticated. The token information displayed below is already stored in the token helper. You do NOT need to run \"vault login\" again. Future Vault requests will automatically use this token.</p> <p>Key                  Value ---                  ----- token                hvs.VtsTEZn9wbP34P63WybIZMhv token_accessor       aONrVciIIfKgvuvbeSrcXV4u token_duration       \u221e token_renewable      false token_policies       [\"root\"] identity_policies    [] policies             [\"root\"]</p> <p>$ vault policy delete accounting Success! Deleted policy: accounting</p> <p>$ vault policy list default secrets-mgmt root ```</p>"},{"location":"vault2/2vaba_auth_poly/#key-takeways","title":"Key takeways","text":"<ul> <li>Policies are associated with tokens directly or indirectly, defining the actions allowed by the token</li> <li>The root policy can do ANYTHING. It cannot be modified or deleted.</li> <li>The default policy is assigned to new tokens by default. It can be modified, but not deleted.</li> <li>Paths define where actions can be taken; capabilities define what actions can be taken.</li> <li>Policies can be assigned directly to a token, through an auth method, or through the identity secrets engine.</li> </ul>"},{"location":"vault2/3vaba_token/","title":"L3 Vault Token","text":"<ul> <li>Token overview</li> <li>Properties and attributes</li> <li>Token types</li> <li>Token lifecycle</li> </ul>"},{"location":"vault2/3vaba_token/#vault-token-overview","title":"Vault Token Overview","text":"<p>Tokens are a collection of data used to access Vault</p>"},{"location":"vault2/3vaba_token/#token-creation","title":"Token Creation","text":"<ul> <li> <p>Auth method</p> </li> <li> <p>Parent token</p> <ul> <li>You can also use an existing token to generate a new token. You can use the root token that's created when you initialize Vault to create a child token.</li> <li>You can also use a token that's been issued by an auth method</li> </ul> </li> <li> <p>Root token: you can generate a root token through a special process.</p> </li> </ul>"},{"location":"vault2/3vaba_token/#root-tokens","title":"Root Tokens","text":"<ul> <li>Root tokens can do ANYTHING</li> <li>Do not expire</li> <li>Created in three ways<ul> <li>Initialize Vault server</li> <li>Existing root token<ul> <li>You can also use an existina root token to create a new root token.   </li> </ul> </li> <li>Using operator command</li> </ul> </li> </ul> <p>What are the reasons you would generate a root token?</p> <ul> <li>Perform initial setup</li> <li>Auth method unavailable</li> <li>Emergency situation</li> </ul> <p>You may also generate a root token if your main authentication method is unavailable. Let's say you use Active Directory for your main authentication method, and Active Directory, for whatever reason, You might have to generate a root token to enable a different authentication method.   </p>"},{"location":"vault2/3vaba_token/#token-properties","title":"Token Properties","text":"<ul> <li>Id</li> </ul> <p>This is the value that you will submit when you want to perform an action with Vault whether it's logging in as that token or making use of the Vault API.</p> <ul> <li>Accessor</li> </ul> <p>There's another related idea that's called the accessor,  behind the accessor is that it's a value you can use to look up the token without actually being able to use that token.</p> <ul> <li>Type</li> </ul> <p>Defines what type of token it is, and generally it's either service or batch,</p> <ul> <li>Policies</li> </ul> <p>The token will also have policies associated with it. Those policies can be assigned when the token is issued or they could be continually evaluated when the token is being used.</p> <ul> <li>TTL</li> </ul> <p>Another important property is the Time to Live, or TTL. This defines how long is this token going to be a viable token</p> <ul> <li>Orphaned</li> </ul> <p>Determines whether or not this token has a parent token or if it is a standalone token.</p>"},{"location":"vault2/3vaba_token/#accessor","title":"Accessor","text":"<p>ID and Accessor</p> <ul> <li> <p>View token properties except token ID</p> <ul> <li>The accessor is only able to view the token properties</li> <li>The ID is the value you would use to execute actions against Vault server * accessor to also be able to get that ID.</li> </ul> </li> <li> <p>View token capabilities on a given path</p> <ul> <li>capabilities of a token on a given path. So if you want to check if a token is able to access a path within Vault</li> </ul> </li> <li> <p>Renew or revoke a token</p> <ul> <li>accessor to renew an existing token or revoke a token</li> </ul> </li> </ul> <p>What are some situations where you might just want that accessor value?</p> <ul> <li>Parent process controlling child tokens<ul> <li>You don't want that parent process to have the ID of those child tokens. Those are given to whatever workers are below that process.</li> </ul> </li> <li> <p>View accessors at auth/token/accessors</p> <ul> <li>you just want that process to have the accessor so it has the capability to revoke and check on the status of existing child tokens.</li> <li>You may also want to get a list of all tokens that have been issued. That's something you can do by viewing the accessors that are at auth/token/accessors.</li> </ul> </li> <li> <p>Audit token usage by accessor in audit log </p> <ul> <li>you can configure the audit log to log the accessor value for each action taken by a token. You obviously wouldn't want to log the token ID, but the accessor gives</li> </ul> </li> </ul>"},{"location":"vault2/3vaba_token/#working-with-tokens","title":"Working with tokens","text":"<pre><code># Create a new token\nvault token create [options]\nvault token create -policy=my-policy -ttl=60m\n\n# View token properties\nvault token lookup [options] [ ACCESSOR | ID ]\nvault token lookup -accessor FJkyU351hsMf3nKOLWdouqdY\n\n# Check capabilities on a path\nvault token capabilities TOKEN PATH\nvault token capabilities s.TG9U2ZdtPU1Hmz18BcujrETI secrets/apikeys/\n</code></pre>"},{"location":"vault2/3vaba_token/#creating-with-tokens-with-cli","title":"Creating with tokens with CLI","text":"<ul> <li>Create Vault service token</li> <li>Obtain tokens from auth methods</li> <li>Create a batch token</li> <li>Renew and revoke tokens</li> <li>Create a periodic token</li> </ul> <pre><code>root_token=ROOT_TOKEN_VALUE\n\nroot_token=hvs.VtsTEZn9wbP34P63WybIZMhv\n\n$ echo $root_token\nhvs.VtsTEZn9wbP34P63WybIZMhv\n\n# And log into Vault using the root token\nvault login $root_token\n\n\n$ vault login $root_token\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                hvs.VtsTEZn9wbP34P63WybIZMhv\ntoken_accessor       aONrVciIIfKgvuvbeSrcXV4u\ntoken_duration       \u221e\ntoken_renewable      false\ntoken_policies       [\"root\"]\nidentity_policies    []\npolicies             [\"root\"]\n\n\n# First we are going to create a basic token\n\nvault token create -policy=default -ttl=60m\n\n\n$ vault token create -policy=default -ttl=60m\nKey                  Value\n---                  -----\ntoken                hvs.CAESIJ3n0vyQcj7nYijaTUbvmliqnmGFq3feFsY7_wGJzpu3Gh4KHGh2cy5NMkYzNmhCYmcxZ2FTT0cwOTBSVHpJRHg\ntoken_accessor       wsp4jbhoFtTYw2FwbUliWCMB\ntoken_duration       1h\ntoken_renewable      true\ntoken_policies       [\"default\"]\nidentity_policies    []\npolicies             [\"default\"]\n\n\n# Now let's check out some info on the token\n\nvault token lookup hvs.CAESIJ3n0vyQcj7nYijaTUbvmliqnmGFq3feFsY7_wGJzpu3Gh4KHGh2cy5NMkYzNmhCYmcxZ2FTT0cwOTBSVHpJRHg\n\n\n$ vault token lookup hvs.CAESIJ3n0vyQcj7nYijaTUbvmliqnmGFq3feFsY7_wGJzpu3Gh4KHGh2cy5NMkYzNmhCYmcxZ2FTT0cwOTBSVHpJRHg\nKey                 Value\n---                 -----\naccessor            wsp4jbhoFtTYw2FwbUliWCMB\ncreation_time       1668088568\ncreation_ttl        1h\ndisplay_name        token\nentity_id           n/a\nexpire_time         2022-11-10T22:56:08.071587+08:00\nexplicit_max_ttl    0s\nid                  hvs.CAESIJ3n0vyQcj7nYijaTUbvmliqnmGFq3feFsY7_wGJzpu3Gh4KHGh2cy5NMkYzNmhCYmcxZ2FTT0cwOTBSVHpJRHg\nissue_time          2022-11-10T21:56:08.071594+08:00\nmeta                &lt;nil&gt;\nnum_uses            0\norphan              false\npath                auth/token/create\npolicies            [default]\nrenewable           true\nttl                 55m6s\ntype                service\n</code></pre> <ul> <li>ttl\uff1a 55m6s</li> </ul> <pre><code># We can do the same using the accessor, but no ID\n\nvault token lookup -accessor wsp4jbhoFtTYw2FwbUliWCMB\n\n vault token lookup -accessor wsp4jbhoFtTYw2FwbUliWCMB\nKey                 Value\n---                 -----\naccessor            wsp4jbhoFtTYw2FwbUliWCMB\ncreation_time       1668088568\ncreation_ttl        1h\ndisplay_name        token\nentity_id           n/a\nexpire_time         2022-11-10T22:56:08.071587+08:00\nexplicit_max_ttl    0s\nid                  n/a\nissue_time          2022-11-10T21:56:08.071594+08:00\nmeta                &lt;nil&gt;\nnum_uses            0\norphan              false\npath                auth/token/create\npolicies            [default]\nrenewable           true\nttl                 51m51s\ntype                service\n\n# Now let's revoke our token\n$ vault token revoke -accessor wsp4jbhoFtTYw2FwbUliWCMB\nSuccess! Revoked token (if it existed)\n</code></pre>"},{"location":"vault2/3vaba_token/#token-types-and-lifecycle","title":"Token Types and Lifecycle","text":"<p>There are different token types out there, like root, service, batch, and even periodic.</p> <p>Service or Batch</p> <p>Service</p> <ul> <li>Fully featured, heavyweight<ul> <li>A service token is fully featured, but the downside is that it's a little bit heavyweight.</li> <li>All service tokens have to be written to the storage back end.</li> </ul> </li> <li>Managed by accessor or ID<ul> <li>The service tokens can be managed by the accessor or the ID.</li> </ul> </li> <li>Written to persistent storage<ul> <li>The service token is written to persistent storage,</li> </ul> </li> <li>Calculated lifetime<ul> <li>A service token has a calculated lifetime that's based off of the TTL</li> <li>Any renewals that you do against that token,</li> </ul> </li> <li>Renewable if desired<ul> <li>Service tokens can be renewed if desired.</li> <li>You can set them to non-renewable, but you can enable renewal if you want,</li> </ul> </li> <li>Can create child tokens<ul> <li>Service tokens can spawn child tokens of the type either service or batch.</li> </ul> </li> <li>Default type for most situations</li> <li>Begins with \"s.\" in ID</li> </ul> <p>Batch</p> <ul> <li>Limited features, lightweight<ul> <li>Batch tokens have a limited feature set. but they're also very lightweight in the sense that</li> <li>They're not written to the storage back end.</li> <li>They can be generated and managed very quickly.</li> </ul> </li> <li>Has no accessor<ul> <li>The service tokens can be managed by the accessor or the ID.</li> <li>The batch token, because it's not being written to persistent storage, doesn't have an accessor.</li> <li>If you don't have the batch token ID, you don't have a way to manage it.</li> </ul> </li> <li>Not written to storage<ul> <li>The batch token is held in memory until it expires.</li> </ul> </li> <li>Static lifetime<ul> <li>batch token has a static lifetime.</li> <li>The TTL of the batch token is set during creation and cannot be altered. </li> </ul> </li> <li>Never renewable<ul> <li>batch tokens are not renewable.</li> <li>Once they hit their Time to Live, they are gone.</li> </ul> </li> <li>No child tokens<ul> <li>Batch tokens are not able to create any child tokens.</li> <li>They can't spawn additional tokens from themselves.</li> </ul> </li> <li>Explicitly created<ul> <li>You have to be explicit about that. When you're looking at the ID for </li> </ul> </li> <li>Begins with \"b.\" in ID</li> </ul>"},{"location":"vault2/3vaba_token/#batch-token-scenario","title":"Batch token scenario","text":"<pre><code># Token TTL\ncreation_time  1613828388 # Unix time\ncreation_ttl   30m # TTL set at creation\n\n</code></pre> <p>This is the TTL that was set when we ran the vault token create or when it was generated from an authentication method.</p> <pre><code>expire_time    2021-02-20T09:09:48.4036711-05:00  # Project expiration time\n\nexplicit_max_ttl  2021-02-20T08:39:48.4036711-05:00 # Friendly creation time\n\nttl    29m13s # TTL value\n</code></pre> <p>This is what vault is projecting as the expiration time if nothing is changed about this token. </p> <p>There is an <code>explicit_max_ttl</code> field, which can be set when you create the token that will set a maximum time to live for friendly representation of the creation time in non-UNIX time </p> <p>we have the current TTL, and this is a computed value that is given to</p>"},{"location":"vault2/3vaba_token/#working-with-token-lifetime","title":"Working with Token Lifetime","text":"<pre><code># Renew a token\nvault token renew [options] [ACCESSOR | ID ] [ -increment=&lt;duration&gt; ]\nvault token renew -increment=60m\n\n# Revoke a token\n\nvault token revoke [options] |[ACCESSOR | ID ]\nvault token revoke -accessor FJkyU351hsMf3nKOLWdOUqdY\n</code></pre>"},{"location":"vault2/3vaba_token/#assessing-the-effective-max-ttl","title":"Assessing the Effective Max TTL","text":"<p>System max TTL</p> <ul> <li>System wide setting</li> <li>Vault configuration file</li> <li>Dynamic evaluation</li> </ul> <p>If you don't set it in the Vault configuration file, then Vault will choose a value for you, which is 32 days.</p> <p>The system max TTL is subject to dynamic evaluation, meaning each time Vault assesses the lifetime of a token, it's going to check what the current system max TTL is. </p> <p>And if it changes, more specific place where you can set the value for the max TTL is on the mount of an authentication method.</p> <p>Mount max TTL</p> <ul> <li>Mount specific</li> <li>Change with tuning</li> <li>Override system max</li> </ul> <p>You could have multiple authentication methods, The way that you change that value is with the Vault tune command.</p> <p>When you set a value for the mount max TTL, it will override whatever the setting is in the system max TTL, and that value can be greater than or less than the system max TTL</p> <p>If your system max TTL is 32 days and you set the mount max TTL to 34 days, that will be the effective max TTL for that authentication method.</p> <p>Auth method max TTL</p> <ul> <li>Role, group, user</li> <li>Changed with write</li> <li>Override system or mount max</li> <li>Less than system or mount</li> </ul> <p>be less than either the system max TTL or the mount max TTL</p>"},{"location":"vault2/3vaba_token/#exploring-the-effective-max-ttl","title":"Exploring the Effective Max TTL","text":"<pre><code>$ vault server -dev\nRoot Token: hvs.XV2DORivLvdQnW3PIKdi1yD1\n\n\nexport VAULT_ADDR='http://127.0.0.1:8200'\nroot_token=hvs.XV2DORivLvdQnW3PIKdi1yD1\nvault login $root_token\n\n...\n$ vault login\nToken (will be hidden): \nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                hvs.XV2DORivLvdQnW3PIKdi1yD1\ntoken_accessor       2vW6uauAn2XYIGlGlStN3N5V\n</code></pre> <p>try setting max ttl from the mount and user and Start by enabling the max ttl for userpass to 33 days (776h)</p> <pre><code># Enable userpass auth method\nvault auth enable -max-lease-ttl=776h userpass\n\n...\nSuccess! Enabled userpass auth method at: userpass/\n</code></pre> <p>Now we are going to try and configure a user with a great max ttl of 784h</p> <p>Note: Vault will let you do this, but it won't honor it.</p> <pre><code>vault write auth/userpass/users/dev token_max_ttl=2822400 password=ops\n\nSuccess! Data written to: auth/userpass/users/dev\n\n\n# Let's try logging in as Dev and renewing our token for 34 days (784h)\n\nvault login -method=userpass username=dev\n\n vault login -method=userpass username=dev\nPassword (will be hidden): \nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIND6s_AzTvwx_R4lkxlEh6bN1yWpRn7SG8xKlNe12KoQGh4KHGh2cy54QVhtME9SYjhSblVyZFgxaGY2OEZyQWk\ntoken_accessor         g14HUvVx8yLz96jaNyZ5pj9Z\ntoken_duration         768h\ntoken_renewable        true\ntoken_policies         [\"default\"]\nidentity_policies      []\npolicies               [\"default\"]\ntoken_meta_username    dev\n</code></pre> <pre><code>vault token renew -increment=784h\n\n# If we changed the max TTL on the mount to 784h, then Vault would honor \n# the value set at the user level. I leave this as an exercise for you.\n\n$ vault token renew -increment=784h\nWARNING! The following warnings were returned from Vault:\n\n  * TTL of \"784h\" exceeded the effective max_ttl of \"775h58m1s\"; TTL value is\n  capped accordingly\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIND6s_AzTvwx_R4lkxlEh6bN1yWpRn7SG8xKlNe12KoQGh4KHGh2cy54QVhtME9SYjhSblVyZFgxaGY2OEZyQWk\ntoken_accessor         g14HUvVx8yLz96jaNyZ5pj9Z\n\n\n# Now we can revoke our own token if we're done with our work\n\n$ vault token revoke -self\nSuccess! Revoked token (if it existed)\n\n$ vault login $root_token\n\n$ vault token lookup\nKey                 Value\n---                 -----\naccessor            2vW6uauAn2XYIGlGlStN3N5V\ncreation_time       1668613087\ncreation_ttl        0s\ndisplay_name        root\nentity_id           n/a\nexpire_time         &lt;nil&gt;\nexplicit_max_ttl    0s\nid                  hvs.XV2DORivLvdQnW3PIKdi1yD1\nmeta                &lt;nil&gt;\nnum_uses            0\norphan              true\npath                auth/token/root\npolicies            [root]\nttl                 0s\ntype                service\n</code></pre>"},{"location":"vault2/3vaba_token/#explicit-max-ttl","title":"Explicit Max TTL","text":"<ul> <li>Takes precedence</li> <li>Set at token creation<ul> <li>Explicitly in command</li> <li>Implicitly through configuration</li> </ul> </li> <li>Static evaluation</li> <li>Less than effective max TTL</li> </ul>"},{"location":"vault2/3vaba_token/#introducing-the-periordic-token","title":"Introducing the periordic Token","text":"<p>TTL defines the period in which that token needs to be renewed</p> <ul> <li>Does not expire (no max TTL)</li> <li>Must be renewed based on period</li> <li>TTL set to period at creation and renewal</li> <li>Requires sudo privileges to create</li> <li>Explicit max TTL can be applied</li> </ul> <p>You could set a token with a period of 10 minutes, meaning that whatever service is using that token would have to renew the token within 10 minutes or that token will expire. </p> <p>Because the periodic</p> <p>Use Case</p> <ul> <li>Database system will use token for secrets access</li> <li>System does not support dynamically changing the token value</li> </ul> <p>Solution</p> <ul> <li>Create a periodic token for the database system to use</li> <li>Script a process to renew the token at the necessarv interval</li> </ul> <pre><code># Login as the root token\n\nvault login $root_token\n\n# Now create a periodic token\n\nvault token create -policy=default -period=2h\n\nKey                  Value\n---                  -----\ntoken                hvs.CAESICXVwYvLCNiZUlgx1r2fge8Mh8JEMKYaMTTJ4jLE60baGh4KHGh2cy44NzJFUEppVWt0cndCMDhud0ZGVEVqeTk\ntoken_accessor       kx9ddr7d178SkHN3w8nkbCyP\ntoken_duration       2h\ntoken_renewable      true\ntoken_policies       [\"default\"]\nidentity_policies    []\npolicies             [\"default\"]\n\n\nexport PERIODIC_TOKEN_ID=hvs.CAESICXVwYvLCNiZUlgx1r2fge8Mh8JEMKYaMTTJ4jLE60baGh4KHGh2cy44NzJFUEppVWt0cndCMDhud0ZGVEVqeTk\n\n# And take a look at its properties\n\nvault token lookup $PERIODIC_TOKEN_ID\n\n\n$ vault token lookup $PERIODIC_TOKEN_ID\nKey                 Value\n---                 -----\naccessor            kx9ddr7d178SkHN3w8nkbCyP\ncreation_time       1668644449\ncreation_ttl        2h\ndisplay_name        token\nentity_id           n/a\nexpire_time         2022-11-17T10:20:49.068383+08:00\nexplicit_max_ttl    0s\nid                  hvs.CAESICXVwYvLCNiZUlgx1r2fge8Mh8JEMKYaMTTJ4jLE60baGh4KHGh2cy44NzJFUEppVWt0cndCMDhud0ZGVEVqeTk\nissue_time          2022-11-17T08:20:49.06839+08:00\nmeta                &lt;nil&gt;\nnum_uses            0\norphan              false\npath                auth/token/create\nperiod              2h\npolicies            [default]\nrenewable           true\nttl                 1h55m14s\ntype                service\n\n\n# Now let's try to renew\n\nvault token renew -increment=180m $PERIODIC_TOKEN_ID\n\n\n$ vault token renew -increment=180m $PERIODIC_TOKEN_ID\nKey                  Value\n---                  -----\ntoken                hvs.CAESICXVwYvLCNiZUlgx1r2fge8Mh8JEMKYaMTTJ4jLE60baGh4KHGh2cy44NzJFUEppVWt0cndCMDhud0ZGVEVqeTk\ntoken_accessor       kx9ddr7d178SkHN3w8nkbCyP\ntoken_duration       2h\ntoken_renewable      true\ntoken_policies       [\"default\"]\nidentity_policies    []\npolicies             [\"default\"]\n\n\n$ vault token lookup $PERIODIC_TOKEN_ID\n\n\n$ vault token lookup $PERIODIC_TOKEN_ID\nKey                  Value\n---                  -----\naccessor             kx9ddr7d178SkHN3w8nkbCyP\ncreation_time        1668644449\ncreation_ttl         2h\ndisplay_name         token\nentity_id            n/a\nexpire_time          2022-11-17T10:27:13.822212+08:00\nexplicit_max_ttl     0s\nid                   hvs.CAESICXVwYvLCNiZUlgx1r2fge8Mh8JEMKYaMTTJ4jLE60baGh4KHGh2cy44NzJFUEppVWt0cndCMDhud0ZGVEVqeTk\nissue_time           2022-11-17T08:20:49.06839+08:00\nlast_renewal         2022-11-17T08:27:13.822212+08:00\nlast_renewal_time    1668644833\nmeta                 &lt;nil&gt;\nnum_uses             0\norphan               false\npath                 auth/token/create\nperiod               2h\npolicies             [default]\nrenewable            true\nttl                  1h59m44s\ntype                 service\n</code></pre> <p>Looking at the properties again, the ttl is back to 2h If you supply an increment, Vault ignores it</p>"},{"location":"vault2/3vaba_token/#token-hierarchy","title":"Token Hierarchy","text":"<ul> <li>Child tokens are created by a parent token</li> <li>Batch tokens cannot create children</li> <li>Protects against escaping revocation</li> <li>Orphan tokens have no parent token<ul> <li>Explicit creation</li> <li>Auth methods</li> <li>Orphaned by parent</li> </ul> </li> </ul> <p>when a parent token is revoked all of the children token associated with that parent token will also be revoked,</p> <p>So if you create a token for someone and they're trying permissions and use that instead,</p>"},{"location":"vault2/3vaba_token/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Token TTL is the amount of time a token is valid for. Tokens can be renewed for additional time within the effective max TTL.</li> <li>Periodic tokens can be renewed forever based on a period TTL Require elevated permissions and may have an explicit max TTL</li> <li>Tokens have a hierarchy of parent/child. Revoking a parent token revokes the children by default. Orphaned tokens have no parent.</li> </ul>"},{"location":"vault2/4vaba_engines/","title":"L4 Using Secrets Engines","text":"<pre><code>$ vault server -dev\n$ export VAULT_ADDR='http://127.0.0.1:8200'\n$ root_token=hvs.xdqJDIY7fbqrz9oj2hs63nEq\n\n$ vault login $root_token\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                hvs.xdqJDIY7fbqrz9oj2hs63nEq\ntoken_accessor       zCpAz878fjNacWJjveqTVj2R\ntoken_duration       \u221e\ntoken_renewable      false\ntoken_policies       [\"root\"]\nidentity_policies    []\npolicies             [\"root\"]\n</code></pre>"},{"location":"vault2/4vaba_engines/#overview","title":"Overview","text":"<ul> <li>Secrets engine overview</li> <li>Selecting an engine</li> <li>Enabling an engine</li> <li>Using secrets engines</li> </ul>"},{"location":"vault2/4vaba_engines/#secrets-engines","title":"Secrets Engines","text":"<p>Secrets engines are plugins used by Vault to handle sensitive data</p> <p>Vault can provide encryption services. This would be data that exists outside of Vault, and all you want Vault to do is provide some level of encryption services for that data.</p> <ul> <li>Store</li> </ul> <p>Sensitive data is stored securely by Vault</p> <ul> <li>Generate</li> </ul> <p>Vault generates and manages sensitive data</p> <ul> <li>Encrypt</li> </ul> <p>Vault provides encryption services for existing data</p> <p>Secrets Engine Categories</p> <ul> <li>Cloud AWS, Azure, GCP</li> <li>Database MSSQL, PostreSQL. MondoDB</li> <li>Internal Key/Value, Identity, Transit</li> <li>Identity Active Directory, OpenLDAP</li> <li>Certificate SSH, PKI, Venafi</li> <li>Tokens Consul, Nomad</li> </ul>"},{"location":"vault2/4vaba_engines/#identity-engine","title":"Identity Engine","text":"<ul> <li>Maintains clients for Vault</li> <li>Enabled by default</li> <li>Cannot be disabled</li> <li>Cannot enable multiple</li> </ul>"},{"location":"vault2/4vaba_engines/#entities","title":"Entities","text":"<p>Entities are those clients. It's an entry within the Identity engine that represents those clients.</p>"},{"location":"vault2/4vaba_engines/#aliases","title":"Aliases","text":"<p>Aliases come from authentication methods and they're how you map an identity in an authentication method to one of these entities.</p>"},{"location":"vault2/4vaba_engines/#groups","title":"Groups","text":"<p>You can also place entities in groups to manage policy assignment to entities.</p>"},{"location":"vault2/4vaba_engines/#cubbyhole","title":"Cubbyhole","text":"<p>The Cubbyhole is a special type of secrets engine, and it's meant to provide per token access to a reserved area in Vault.</p> <p>Cubbyhole</p> <ul> <li>Enabled by default</li> <li>Cannot be disabled or moved</li> <li>Created per service token</li> <li>Only accessible by token</li> </ul>"},{"location":"vault2/4vaba_engines/#dynamic-vs-static-secrets","title":"Dynamic vs. Static Secrets","text":"<p>Static secrets</p> <ul> <li>Store existing data securely</li> <li>Manual lifecycle management</li> <li>Key/Value engine</li> </ul> <p>Dynamic secrets</p> <ul> <li>Generate data on demand</li> <li>Lease issued for each secret<ul> <li>The least could be indefinite, but it could also be for 30 minutes or 5 seconds. It all depends on what the purpose of that secret data is.</li> </ul> </li> <li>Automatic lifecycle management</li> <li>Majority of secrets engines</li> <li>Consul engine</li> </ul>"},{"location":"vault2/4vaba_engines/#exp-scenario","title":"Exp Scenario","text":"<p>Use Case</p> <ul> <li>Database administrators want to provideapplications and developer access to a MySQL database</li> <li>Credentials should be dynamically generated and short-lived</li> <li>TTL should be based on client type</li> </ul> <p>Solution</p> <ul> <li>Enable Database secrets engine with MySQL plugin</li> <li>Configure roles and policies for applications and developers</li> </ul>"},{"location":"vault2/4vaba_engines/#2-transit-engine","title":"2 Transit Engine","text":""},{"location":"vault2/4vaba_engines/#introudcing-the-transit-engine","title":"Introudcing the Transit Engine","text":"<p>Key Value Engine</p> <ul> <li>Store key/value pairs at a path</li> <li>Version 1 and 2 available</li> <li>Versioning and metadata</li> </ul>"},{"location":"vault2/4vaba_engines/#key-value-engine-versions","title":"Key Value Engine Versions","text":"<p>Version 1</p> <ul> <li>No versioning, last key wins</li> </ul> <p>For version 1, there is no versioning of keys within the engine. Every time you update a key, it will overwrite the existing key and you can't get the previous version back.  </p> <ul> <li>Faster with fewer storage calls</li> </ul> <p>Version 1, because it doesn't have all this metadata and versioning behind it, could potentially be faster with fewer calls to the storage back-end,</p> <ul> <li>Deleted items are gone</li> </ul> <p>Another key thing is when you delete a secret on version 1, it's gone. You can't get that back unless you took a backup of your vault server.</p> <ul> <li>Can be upgraded to version 2</li> </ul> <p>V1 can can be upgraded to version 2.</p> <ul> <li>Default version on creation</li> </ul> <p>Version 2</p> <ul> <li>Versioning of past secrets</li> </ul> <p>Version 2 offers versioning of past secrets. So if you write a new version of a key, it maintains the previous versions up to a configured amount.</p> <ul> <li>Possibly less performant</li> </ul> <p>version 2 might possibly be a little less performant.</p> <ul> <li>Deleted items and metadata retained</li> </ul> <p>On version 2, if you delete an item, it retains that information, as well as the metadata, and allows you to recover an item. It's in a soft deleted state, you could say. </p> <ul> <li>Cannot be downgraded</li> <li>Can be specified at creation</li> </ul>"},{"location":"vault2/4vaba_engines/#pratical-scenario","title":"Pratical Scenario","text":"<p>Use Case</p> <ul> <li>Application developer needs to store API keys in secure location</li> <li>API keys should be versioned with previous versions available</li> <li>Developers will generate the API keys</li> </ul> <p>Solution</p> <ul> <li>Enable an instance of the Key Value engine version 2</li> <li>Create a policy granting developers access</li> </ul>"},{"location":"vault2/4vaba_engines/#transit-engine","title":"Transit Engine","text":"<ul> <li>Encryption as a service</li> </ul> <p>it's not storing data, it's not generating data, it's purely providing encryption services. It does not store any of the data that submitted to it internally in Vault.</p> <ul> <li>Does not store data</li> </ul> <p>It does not store any of the data that submitted to it internally in Vault.</p> <ul> <li> <p>Supported actions:</p> <ul> <li>Encrypt/decrypt</li> <li>Sign and verify</li> <li>Generate hashes</li> <li>Create random bytes</li> </ul> </li> <li> <p>Engine manages ke ys</p> </li> </ul>"},{"location":"vault2/4vaba_engines/#desmonstrating-secret-engine","title":"Desmonstrating  Secret Engine","text":"<p>Use Case</p> <ul> <li>Application developer needs to encrypt data written to object storage</li> <li>Data will be generated by application</li> <li>Vault does not need to store data</li> </ul> <p>Solution</p> <ul> <li>Enable an instance of the Transit engine</li> <li>Create policies granting developers and application access</li> </ul>"},{"location":"vault2/4vaba_engines/#enabling-secrets-engines","title":"Enabling Secrets Engines","text":"<p>Secrets Engine Lifecycle</p> <ul> <li>Enable / Tune / Configure /  Move / Disable</li> </ul>"},{"location":"vault2/4vaba_engines/#configuring-secrets-engines","title":"Configuring Secrets Engines","text":"<ul> <li>All engines are enabled on <code>/sys/mounts</code></li> <li>Engines are enabled on a path<ul> <li>Defaults to engine name</li> </ul> </li> <li>Engines can be moved<ul> <li>Revokes all existing leases</li> <li>May impact policies</li> </ul> </li> <li>Engines can be tuned and configured<ul> <li>Tuning settings are common for all engines</li> <li>Configuration settings are specific to an engines</li> </ul> </li> </ul> <p>Example Secrets Engines</p> <ul> <li>Key Value</li> <li>Consul</li> </ul> <p>Tasks</p> <ul> <li>Enable secrets engines</li> <li>Configure secrets engines</li> <li>Access secrets engines</li> </ul>"},{"location":"vault2/4vaba_engines/#enabling-secrets-engines-with-transit-engines","title":"Enabling secrets engines with transit engines","text":"<p>First see which secrets engines are enabled</p> <pre><code>$ vault secrets list\n\nPath          Type         Accessor              Description\n----          ----         --------              -----------\ncubbyhole/    cubbyhole    cubbyhole_c4a23e97    per-token private secret storage\nidentity/     identity     identity_20b0ef66     identity store\nsecret/       kv           kv_cdd1aa1f           key/value secret storage\nsys/          system       system_75379b69       system endpoints used for control, policy and debugging\n</code></pre> <p>let's get our secrets engines enabled We'll start with the enabling the K/V engine</p> <pre><code>vault secrets enable -path=TestKV -version=2 kv\n\nSuccess! Enabled the kv secrets engine at: TestKV/\n</code></pre> <pre><code>$ vault secrets list | grep TestKV\nTestKV/       kv           kv_a4bf358a           n/a\n\n# Maybe we want to configure some settings for TestKV\n\n$ vault path-help /sys/mounts/TestKV\nRequest:        mounts/TestKV\nMatching Route: ^mounts/(?P&lt;path&gt;.+?)$\n\nMount a new backend at a new path.\n\n## PARAMETERS\n...\n\n$ vault secrets tune -description=\"Test K/V version 2\" TestKV\nSuccess! Tuned the secrets engine at: TestKV/\n\n$ vault secrets list | grep TestKV\nTestKV/       kv           kv_a4bf358a           Test K/V version 2\n</code></pre>"},{"location":"vault2/4vaba_engines/#configuring-key-value-engine-the-ui","title":"Configuring key value Engine the UI","text":"<p>let's go enable Consul through the UI</p> <p></p> <p></p> <p></p> <p></p> <pre><code>$ vault secrets list | grep consul\nconsul/       consul       consul_2ad1fcb7       n/a\n</code></pre>"},{"location":"vault2/4vaba_engines/#configuring-the-key-value-engine","title":"Configuring the Key Value Engine","text":"<pre><code>vault path-help TestKV/\n\n...\n ^config$\n        Configures settings for the KV store\n\n    ^data/(?P&lt;path&gt;.*)$\n        Write, Patch, Read, and Delete data in the Key-Value Store.\n\n    ^delete/(?P&lt;path&gt;.*)$\n        Marks one or more versions as deleted in the KV store.\n\n    ^destroy/(?P&lt;path&gt;.*)$\n        Permanently removes one or more versions in the KV store\n\n    ^metadata/(?P&lt;path&gt;.*)$\n        Configures settings for the KV store\n\n    ^subkeys/(?P&lt;path&gt;.*)$\n        Read the structure of a secret entry from the Key-Value store with the values removed.\n\n    ^undelete/(?P&lt;path&gt;.*)$\n        Undeletes one or more versions from the KV store.\n\n\n\n$ vault path-help TestKV/\n\nThis path configures backend level settings that are applied to every key in the\nkey-value store. This parameter accetps:\n\n        * max_versions (int) - The number of versions to keep for each key. Defaults\n          to 10\n\n        * cas_required (bool) - If true, the backend will require the cas parameter\n          to be set for each write\n\n        * delete_version_after (duration) - If set, the length of time before a\n          version is deleted. A negative duration disables the use of\n          delete_version_after on all keys. A zero duration clears the current\n          setting. Accepts a Go duration format string.\n\n$ vault path-help TestKV/config\n\n# Why don't we check the current settings?\n$ vault read TestKV/config\nKey                     Value\n---                     -----\ncas_required            false\ndelete_version_after    0s\nmax_versions            0\n\n# Why don't we check the current settings?\nvault read TestKV/config\n\n# Let's set the max_versions to 5\nvault write TestKV/config max_versions=5\n\n$ vault write TestKV/config max_versions=5\nSuccess! Data written to: TestKV/config\n\n$ vault read TestKV/config\nKey                     Value\n---                     -----\ncas_required            false\ndelete_version_after    0s\nmax_versions            5\n</code></pre>"},{"location":"vault2/4vaba_engines/#configuring-the-consul-engine","title":"Configuring the Consul Engine","text":"<p>You are going to need the consul binary to follow along here. You can get it by going to https://www.consul.io/downloads. </p> <pre><code>brew tap hashicorp/tap\nbrew install hashicorp/tap/consul\n</code></pre> <p>We are going to start up a basic instance of Consul and get a token with permissions to generate new token. </p> <p><code>consul-config.hcl</code></p> <pre><code>## server.hcl\n\nui = true\nserver = true\nbootstrap_expect = 1\ndatacenter = \"dc1\"\ndata_dir = \"./data\"\n\nacl = {\n    enabled = true\n    default_policy = \"deny\"\n    enable_token_persistence = true\n}\n</code></pre> <p>You don't need to know much about Consul aside from the fact it uses tokens for authentication and authorization just like Vault.</p> <pre><code>$ mkdir data \n$ pwd\nk8s_test/valut/\n\n\n# Launch consul server instance\nconsul agent -bootstrap -config-file=\"consul-config.hcl\" -bind=\"127.0.0.1\"\n\n# From a separate terminal window run the following\nconsul acl bootstrap\n\n$ consul acl bootstrap\nAccessorID:       81155224-8cab-cd35-bc69-dac4ebcdac17\nSecretID:         1ded8acc-9baf-04e0-1bdd-076a99a514a0\nDescription:      Bootstrap Token (Global Management)\nLocal:            false\nCreate Time:      2022-12-01 21:46:59.048599 +0800 CST\nPolicies:\n   00000000-0000-0000-0000-000000000001 - global-management\n\n</code></pre> <p><code>web-policy.hcl</code></p> <pre><code>service \"web\" {\n    policy = \"read\"\n}\n</code></pre> <pre><code># Set CONSUL_HTTP_TOKEN to SecretID\n# Linux and MacOS\nexport CONSUL_HTTP_TOKEN=SECRETID_VALUE\n\nexport CONSUL_HTTP_TOKEN=1ded8acc-9baf-04e0-1bdd-076a99a514a0\n\n\n# Next we have to create a policy and role for new tokens\n# that Vault will generate on Consul\n\nconsul acl policy create -name=web -rules @web-policy.hcl\n\n$ consul acl policy create -name=web -rules @web-policy.hcl\nID:           94bceb75-56c3-b225-520f-1089d7b8f33c\nName:         web\nDescription:  \nDatacenters:  \nRules:\nservice \"web\" {\n    policy = \"read\"\n}\n\n# Now we'll configure out Consul secrets engine\nvault path-help consul/\n\n\n$ vault path-help consul/\n## DESCRIPTION\n\n\n$ export VAULT_ADDR='http://127.0.0.1:8200'\n$ root_token=hvs.xdqJDIY7fbqrz9oj2hs63nEq\n## PATHS\n\nThe following paths are supported by this backend. To view help for\nany of the paths below, use the help command with any route matching\nthe path pattern. Note that depending on the policy of your auth token,\nyou may or may not be able to access certain paths.\n\n    ^config/access$\n\n\n    ^creds/(?P&lt;role&gt;\\w(([\\w-.]+)?\\w)?)$\n\n\n    ^roles/(?P&lt;name&gt;\\w(([\\w-.]+)?\\w)?)$\n\n\n    ^roles/?$\n\nvault path-help consul/config/access\n\n vault path-help consul/config/access\nRequest:        config/access\nMatching Route: ^config/access$\n\n&lt;no synopsis&gt;\n\n## PARAMETERS\n\n    address (string)\n\n        Consul server address\n\n    ca_cert (string)\n\n        CA certificate to use when verifying Consul server certificate,\n        must be x509 PEM encoded.\n\n    client_cert (string)\n\n        Client certificate used for Consul's TLS communication,\n        must be x509 PEM encoded and if this is set you need to also set client_key.\n\n    client_key (string)\n\n        Client key used for Consul's TLS communication,\n        must be x509 PEM encoded and if this is set you need to also set client_cert.\n\n    scheme (string)\n\n        URI scheme for the Consul address\n\n    token (string)\n\n        Token for API calls\n\n## DESCRIPTION\n\n&lt;no description&gt;\n</code></pre> <pre><code>vault write consul/config/access address=\"http://127.0.0.1:8500\" token=$CONSUL_HTTP_TOKEN\n\n$ vault write consul/config/access address=\"http://127.0.0.1:8500\" token=$CONSUL_HTTP_TOKEN\nSuccess! Data written to: consul/config/access\n\n# And add a role to provision tokens with a ttl of 1 hour and a max of 2 hours\n\nvault path-help consul/roles/web\n\nvault write consul/roles/web name=web policies=web ttl=3600 max_ttl=7200\n\n# Now how do we use this role to get a token? By using the creds path\n\n$ vault path-help consul/creds/web\nRequest:        creds/web\nMatching Route: ^creds/(?P&lt;role&gt;\\w(([\\w-.]+)?\\w)?)$\n\n&lt;no synopsis&gt;\n\n## PARAMETERS\n\n    role (string)\n\n        Name of the role.\n\n## DESCRIPTION\n\n&lt;no description&gt;\n\n$ vault read consul/creds/web\nKey                 Value\n---                 -----\nlease_id            consul/creds/web/2RReZdwbrT8OgeUxdF4xNzLP\nlease_duration      1h\nlease_renewable     true\naccessor            e8d9ba98-acd4-f1f0-88a6-f642bc30505f\nconsul_namespace    n/a\nlocal               false\npartition           n/a\ntoken               367f1f34-dcae-daa2-c3ae-8b2a3c29bbb1\n\n# Check on the consul side and we can see the token created\n\n$ consul acl token list -format=json | jq .[].AccessorID\n\"81155224-8cab-cd35-bc69-dac4ebcdac17\"\n\"e8d9ba98-acd4-f1f0-88a6-f642bc30505f\"\n\"00000000-0000-0000-0000-000000000002\"\n</code></pre>"},{"location":"vault2/4vaba_engines/#using-secrets-engines","title":"Using Secrets Engines","text":"<p>Interacting with Secrets Engine</p> <ul> <li>Authenticate with policy</li> <li>Access through CLI, UI, or API</li> <li>Most engines use standard commands<ul> <li><code>read, list, write, and delete</code></li> </ul> </li> <li>Key Value uses <code>vault kv</code> commands<ul> <li>K/V version 1 can use standard commands</li> </ul> </li> </ul> <pre><code># Use vault write to configure roles\nvault write ROLE_PATH [SETTINGS K=V]\nvault write consul/roles/my-role name=my-role policies=consul-policy\n\n\n# Use vault read to retrieve credentials\nvault read CRED_PATH\nvault read consul/creds/my-role\n</code></pre>"},{"location":"vault2/4vaba_engines/#interacting-with-the-key-value-engine","title":"Interacting with the Key Value Engine","text":"<pre><code># Writing a secret value\nvault write ROLE_PATH [SETTINGS K=V]\nvault write consul/roles/my-role name=my-role policies=consul-policy\n\n\n\n# Use vault read to retrieve credentials\nvault read CRED_PATH\nvault read consul/creds/my-role\n\n# Writing a secret value\nvault kv put [options] KEY [DATA K=V]\nvault kv put TestKV/apikeys/d101 token=1234567890\n\n# Listing secret keys\nvault kv list [options] PATH\nvault kv list TestKV/apikeys\n\n# Reading a secret value\nvault kv get [options] KEY\nvault kv get \u2013version=1 TestKV/apikeys/d101\n\n\n# Deleting a value\nvault kv delete [options] KEY\nvault kv delete \u2013versions=1 TestKV/apikeys/d101\n\n# Destroying a value  (Delete Key permantely)\nvault kv destroy [options] KEY\nvault kv destroy \u2013versions=1 TestKV/apikeys/d101\n</code></pre> <pre><code># Let's try adding some values to our kv engine\nvault kv put TestKV/apitokens/d101 token=version1\nvault kv put TestKV/apitokens/d102 token=version1\nvault kv put TestKV/apitokens/d103 token=version1\n</code></pre> <pre><code>$ vault kv put TestKV/apitokens/d101 token=version1\n======= Secret Path =======\nTestKV/data/apitokens/d101\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-01T14:58:46.669736Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n$ vault kv put TestKV/apitokens/d102 token=version1\n======= Secret Path =======\nTestKV/data/apitokens/d102\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-01T14:58:58.557175Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n$ vault kv put TestKV/apitokens/d103 token=version1\n======= Secret Path =======\nTestKV/data/apitokens/d103\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-01T15:01:42.594581Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n</code></pre> <pre><code># Now let's try and list the keys\nvault kv list TestKV/apitokens\n\n vault kv list TestKV/apitokens\nKeys\n----\nd101\nd102\nd103\n</code></pre> <pre><code># Nice, let's read one of the values\nvault kv get TestKV/apitokens/d101\n\n vault kv get TestKV/apitokens/d101\n======= Secret Path =======\nTestKV/data/apitokens/d101\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-01T14:58:46.669736Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n==== Data ====\nKey      Value\n---      -----\ntoken    version1\n</code></pre> <pre><code># What if we update the value?\nvault kv put TestKV/apitokens/d101 token=version2\nvault kv put TestKV/apitokens/d102 token=version2\nvault kv put TestKV/apitokens/d103 token=version2\n\n\n**Response Wrapping**\n\n\uffe5 vault kv put TestKV/apitokens/d101 token=version2\n======= Secret Path =======\nTestKV/data/apitokens/d101\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-01T15:05:30.103783Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            2\n\n$ vault kv put TestKV/apitokens/d102 token=version2\n======= Secret Path =======\nTestKV/data/apitokens/d102\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-01T15:05:44.697181Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            2\n\n$ vault kv put TestKV/apitokens/d103 token=version2\n======= Secret Path =======\nTestKV/data/apitokens/d103\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-01T15:05:53.844138Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            2\n</code></pre> <pre><code>Can we still get version 1? Sure can.\nvault kv get -version=1 TestKV/apitokens/d101\n\n$ vault kv get -version=1 TestKV/apitokens/d101\n======= Secret Path =======\nTestKV/data/apitokens/d101\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-01T14:58:46.669736Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n==== Data ====\nKey      Value\n---      -----\ntoken    version1\n\n# How do we go about deleting an older version?\nvault kv delete -versions=1 TestKV/apitokens/d101\n\n$ vault kv delete -versions=1 TestKV/apitokens/d101\nSuccess! Data deleted (if it existed) at: TestKV/data/apitokens/d101\n\n\n# Don't worry it's not really gone\nvault kv metadata get TestKV/apitokens/d101\n\n$ vault kv metadata get TestKV/apitokens/d101\n======== Metadata Path ========\nTestKV/metadata/apitokens/d101\n\n========== Metadata ==========\nKey                     Value\n---                     -----\ncas_required            false\ncreated_time            2022-12-01T14:58:46.669736Z\ncurrent_version         2\ncustom_metadata         &lt;nil&gt;\ndelete_version_after    0s\nmax_versions            0\noldest_version          0\nupdated_time            2022-12-01T15:05:30.103783Z\n\n====== Version 1 ======\nKey              Value\n---              -----\ncreated_time     2022-12-01T14:58:46.669736Z\ndeletion_time    2022-12-01T15:07:36.41118Z\ndestroyed        false\n\n====== Version 2 ======\nKey              Value\n---              -----\ncreated_time     2022-12-01T15:05:30.103783Z\ndeletion_time    n/a\ndestroyed        false\n\n# We can recover it by doing the following\nvault kv undelete -versions=1 TestKV/apitokens/d101\n\n$ vault kv undelete -versions=1 TestKV/apitokens/d101\nSuccess! Data written to: TestKV/undelete/apitokens/d101\n\nvault kv get -version=1 TestKV/apitokens/d101\n\n$ vault kv get -version=1 TestKV/apitokens/d101\n======= Secret Path =======\nTestKV/data/apitokens/d101\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-01T14:58:46.669736Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n==== Data ====\nKey      Value\n---      -----\ntoken    version1\n\n# Destroy is what actually removes it\nvault kv destroy -versions=1 TestKV/apitokens/d101\n\n$ vault kv destroy -versions=1 TestKV/apitokens/d101\nSuccess! Data written to: TestKV/destroy/apitokens/d101\n\nvault kv metadata get TestKV/apitokens/d101\n\n vault kv metadata get TestKV/apitokens/d101\n======== Metadata Path ========\nTestKV/metadata/apitokens/d101\n\n========== Metadata ==========\nKey                     Value\n---                     -----\ncas_required            false\ncreated_time            2022-12-01T14:58:46.669736Z\ncurrent_version         2\ncustom_metadata         &lt;nil&gt;\ndelete_version_after    0s\nmax_versions            0\noldest_version          0\nupdated_time            2022-12-01T15:05:30.103783Z\n\n====== Version 1 ======\nKey              Value\n---              -----\ncreated_time     2022-12-01T14:58:46.669736Z\ndeletion_time    n/a\ndestroyed        true\n\n====== Version 2 ======\nKey              Value\n---              -----\ncreated_time     2022-12-01T15:05:30.103783Z\ndeletion_time    n/a\ndestroyed        false\n\n# The reference is still there, but the value is gone!\n# We can delete everything by deleting the metadate too\n\nvault kv metadata delete TestKV/apitokens/d101\n\n\n$ vault kv metadata delete TestKV/apitokens/d101\nSuccess! Data deleted (if it existed) at: TestKV/metadata/apitokens/d101\n\n$ vault kv list TestKV/apitokens\nKeys\n----\nd102\nd103\n</code></pre>"},{"location":"vault2/4vaba_engines/#interacting-with-the-key-value-engine-using-the-api","title":"Interacting with the Key Value Engine using the API?","text":"<pre><code># What about using the API?\n\n# Make sure you have the root token stored in `$root_token`\ncurl --header \"X-Vault-Token: $root_token\" \\\n  $VAULT_ADDR/v1/TestKV/data/apitokens/d102 | jq\n\n\n curl --header \"X-Vault-Token: $root_token\" \\\n&gt;   $VAULT_ADDR/v1/TestKV/data/apitokens/d102 | jq\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   317  100   317    0     0  25626      0 --:--:-- --:--:-- --:--:--  309k\n{\n  \"request_id\": \"351fb272-b7ee-5f45-beb7-02bd2acc02f3\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"data\": {\n      \"token\": \"version2\"\n    },\n    \"metadata\": {\n      \"created_time\": \"2022-12-01T15:05:44.697181Z\",\n      \"custom_metadata\": null,\n      \"deletion_time\": \"\",\n      \"destroyed\": false,\n      \"version\": 2\n    }\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n\n\n# If we want a specific version, we can add a query string\ncurl --header \"X-Vault-Token: $root_token\" \\\n  $VAULT_ADDR/v1/TestKV/data/apitokens/d102?version=1 | jq\n\n curl --header \"X-Vault-Token: $root_token\" \\\n&gt;   $VAULT_ADDR/v1/TestKV/data/apitokens/d102?version=1 | jq\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   317  100   317    0     0  29581      0 --:--:-- --:--:-- --:--:--  309k\n{\n  \"request_id\": \"4a60a60f-8f99-3c6c-2716-3d0c371564a0\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"data\": {\n      \"token\": \"version1\"\n    },\n    \"metadata\": {\n      \"created_time\": \"2022-12-01T14:58:58.557175Z\",\n      \"custom_metadata\": null,\n      \"deletion_time\": \"\",\n      \"destroyed\": false,\n      \"version\": 1\n    }\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n\n# We can also get at these secrets using the UI  \n</code></pre>"},{"location":"vault2/4vaba_engines/#response-wrapping","title":"Response Wrapping","text":"<pre><code># Let's say we want to retrieve a secret and response wrap it\n# First we'll do it using a secret in the GloboKV store\n\nvault kv get -wrap-ttl=30m TestKV/apitokens/d102\n\n$ vault kv get -wrap-ttl=30m TestKV/apitokens/d102\nKey                              Value\n---                              -----\nwrapping_token:                  hvs.CAESIADNNOMpCQDuo4OyhrAvgsAbDw2hGnZPT42_POANa2t_Gh4KHGh2cy5tcGxWemFCWE9aWE1RS2ZOdDlDTXhJMFI\nwrapping_accessor:               17LHSLrH4BYeCQwmffsu4WxY\nwrapping_token_ttl:              30m\nwrapping_token_creation_time:    2022-12-01 23:51:52.482776 +0800 CST\nwrapping_token_creation_path:    TestKV/data/apitokens/d102\n\n# Now we can use the wrapping token value to read the value\nvault unwrap hvs.CAESIADNNOMpCQDuo4OyhrAvgsAbDw2hGnZPT42_POANa2t_Gh4KHGh2cy5tcGxWemFCWE9aWE1RS2ZOdDlDTXhJMFI\n\n$ vault unwrap hvs.CAESIADNNOMpCQDuo4OyhrAvgsAbDw2hGnZPT42_POANa2t_Gh4KHGh2cy5tcGxWemFCWE9aWE1RS2ZOdDlDTXhJMFI\nKey         Value\n---         -----\ndata        map[token:version2]\nmetadata    map[created_time:2022-12-01T15:05:44.697181Z custom_metadata:&lt;nil&gt; deletion_time: destroyed:false version:2]\n\n# If we lookup the token after using it, it's gone!\nvault token lookup hvs.CAESIADNNOMpCQDuo4OyhrAvgsAbDw2hGnZPT42_POANa2t_Gh4KHGh2cy5tcGxWemFCWE9aWE1RS2ZOdDlDTXhJMFI\n\n$ vault token lookup hvs.CAESIADNNOMpCQDuo4OyhrAvgsAbDw2hGnZPT42_POANa2t_Gh4KHGh2cy5tcGxWemFCWE9aWE1RS2ZOdDlDTXhJMFI\nError looking up token: Error making API request.\n\nURL: POST http://127.0.0.1:8200/v1/auth/token/lookup\nCode: 403. Errors:\n\n* bad token\n\n# What if we wanted to generate credentials for Consul and pass\n# those securely to someone else? Let's try that now\n\nvault read -wrap-ttl=30m consul/creds/web\n\n$ vault read -wrap-ttl=30m consul/creds/web\nKey                              Value\n---                              -----\nwrapping_token:                  hvs.CAESIPIDrFTjtugK8BSZRNOoDkrL379Rtt-ai3fGeTHm5RRlGh4KHGh2cy5NZDEwd1Iwd211RTNzd09lRUJsMTFZSUM\nwrapping_accessor:               g927QUD1jfzysJM5e5BZZo0z\nwrapping_token_ttl:              30m\nwrapping_token_creation_time:    2022-12-01 23:57:58.976596 +0800 CST\nwrapping_token_creation_path:    consul/creds/web\n\n# Let's check on the token this time\n\nvault token lookup WRAPPING_TOKEN_ID\n\n$ vault token lookup hvs.CAESIPIDrFTjtugK8BSZRNOoDkrL379Rtt-ai3fGeTHm5RRlGh4KHGh2cy5NZDEwd1Iwd211RTNzd09lRUJsMTFZSUM\nKey                 Value\n---                 -----\naccessor            g927QUD1jfzysJM5e5BZZo0z\ncreation_time       1669910278\ncreation_ttl        30m\ndisplay_name        n/a\nentity_id           n/a\nexpire_time         2022-12-02T00:27:58.976819+08:00\nexplicit_max_ttl    30m\nid                  hvs.CAESIPIDrFTjtugK8BSZRNOoDkrL379Rtt-ai3fGeTHm5RRlGh4KHGh2cy5NZDEwd1Iwd211RTNzd09lRUJsMTFZSUM\nissue_time          2022-12-01T23:57:58.976823+08:00\nmeta                &lt;nil&gt;\nnum_uses            1\norphan              true\npath                consul/creds/web\npolicies            [response-wrapping]\nrenewable           false\nttl                 29m10s\ntype                service\n\n# And now let's retrieve the Consul token created for us\n\nvault unwrap WRAPPING_TOKEN_ID\n\nvault unwrap hvs.CAESIPIDrFTjtugK8BSZRNOoDkrL379Rtt-ai3fGeTHm5RRlGh4KHGh2cy5NZDEwd1Iwd211RTNzd09lRUJsMTFZSUM\n\n$ vault unwrap hvs.CAESIPIDrFTjtugK8BSZRNOoDkrL379Rtt-ai3fGeTHm5RRlGh4KHGh2cy5NZDEwd1Iwd211RTNzd09lRUJsMTFZSUM\nKey                 Value\n---                 -----\nlease_id            consul/creds/web/o4AT0MtgswjaSBNzYqgNGpxe\nlease_duration      1h\nlease_renewable     true\naccessor            33935936-4a6d-d3f6-0d16-674b2bb864a0\nconsul_namespace    n/a\nlocal               false\npartition           n/a\ntoken               3f21d7ef-9893-63e4-4139-f319b828adcd\n</code></pre>"},{"location":"vault2/4vaba_engines/#key-takeways","title":"Key takeways","text":"<ul> <li>Secrets engines are Vault plug-in that can store, generate, and encrypt data.</li> <li>Static secrets engines store external data in Vault. Dynamic secrets engines generate credentials or data and managed the lifecycle.</li> <li>The Transit engine provides encryption as a service for encypt/decrypt, sign/verify, and hashing or random data.</li> <li>Secrets engines must be enabled, tuned, and configured. They can be moved, but will lose all lease data</li> <li>The Key Value engine has two versions and its own command set:  vault kv</li> <li>Interacting with secrets engines at the command line uses read, write, list, and delete.<ul> <li>Response wrapping creates a cubbyhole to store data and a single-use token to retrieve it.</li> </ul> </li> </ul>"},{"location":"vault2/5vaba_lease/","title":"L5 Using Vault Leases","text":""},{"location":"vault2/5vaba_lease/#lease-overview","title":"Lease Overview","text":"<ul> <li>Control dynamic secret lifecycle</li> </ul> <p>The purpose behind leases involved is to control the lifecycle of dynamic secrets by either renewing or extending the lifetime of a dynamic secret or by revoking that dynamic secret by revoking the lease.</p> <ul> <li>Dynamic secrets and service tokens</li> </ul> <p>Leases are a construct that actually exists for both dynamic secrets and also for service tokens. but for secrets, they're called leases.</p> <ul> <li>Includes metadata about secret</li> </ul> <p>The lease includes some amount of metadata regarding the secret and we'll get into what that information is in a moment.</p> <ul> <li>Renew or revoke lease</li> </ul> <p>You have the capability of extendina the lifetime of a lease bv renewing it or you can terminate the lifetime of that lease by revoking it.</p> <ul> <li>No direct CLI command<ul> <li>Use <code>/sys/leases/lookup</code> path</li> </ul> </li> </ul> <p>There's no direct CLI command like vault lease lookup. </p>"},{"location":"vault2/5vaba_lease/#examining-lease-duration","title":"Examining Lease Duration","text":"<p>Lease Properties</p> <ul> <li><code>lease_id</code></li> </ul> <p>The first is the lease_id, and this is a construct of the path where that dynamic secret was generated, and then a unique ID for that dynamic secret. </p> <ul> <li><code>lease_duration</code></li> </ul> <p>The second main property is the <code>lease_duration</code>. How much longer is this lease valid for?  And that's basically a countdown timer. It might start at 30 minutes and then start counting down. If that lease duration expires, then the lease is revoked, as well as the secret.</p> <ul> <li><code>lease_renewable</code></li> </ul> <p>The third property is whether or not the lease is renewable, and this is a Boolean value. </p> <p>Can you renew or extend this lease for longer, or is it a completely fixed time from when it's created?</p>"},{"location":"vault2/5vaba_lease/#working-with-leases-lease_duration","title":"Working with Leases - <code>lease_duration</code>","text":"<ul> <li>Time to live</li> </ul> <p>We can think of it in the same way that tokens have a TTL as well. and there's multiple sources where that default TTL can be derived.</p> <p>The other important aspect about the lease is its max TTL,</p> <ul> <li> <p>Max TTL</p> </li> <li> <p>TTL Inheritance</p> <ul> <li>System</li> <li>Mount</li> <li>Object</li> </ul> </li> </ul> <p>The first one is the system-wide default TTL and max TTL, and that's defined within the Vault server configuration. </p> <p>If default TTL and max TTL are not defined anywhere else, then the lease will inherit the values set for the system as a whole.</p> <p>You can also configure the default and max TTL on the mount point for a secrets engine. precedence over what's set on the system,</p> <ul> <li>Renewal</li> </ul>"},{"location":"vault2/5vaba_lease/#working-with-leases","title":"Working with Leases","text":"<ul> <li> <p>Renewal</p> <ul> <li>Based on current time</li> <li>Less than max TTL</li> </ul> </li> <li> <p>Revocation</p> <ul> <li>Queues request</li> <li>Token revokes leases</li> </ul> </li> <li> <p>Prefix Revocation</p> <ul> <li>Requires sudo</li> <li>Be careful</li> </ul> </li> </ul> <pre><code># Renew a lease\n\nvault lease renew [options] ID \nvault lease renew -increment=30m consul/creds/web/KWq508RVc6LtAutsta6Uf86\n\n# Revoke a lease\nvault lease revoke [options] ID\nvault lease revoke consul/creds/web/KWq508zRVc6LtAutsta6Uf86\nvault lease revoke -prefix consul/creds/web/\n\n\n# Lookup active leases\nvault list [options] sys/leases/lookup/PATH\nvault list sys/leases/lookup/consul/creds/web/\n\n# View leases properties\nvault write [options] sys/leases/lookup/ lease_id=ID\nvault write sys/leases/lookup/lease_id=consul/creds/web/KWa508RVc6LtAutsta6Uf8G\n</code></pre>"},{"location":"vault2/5vaba_lease/#lease-management-scenarios","title":"Lease Management Scenarios","text":"<p>Use Case</p> <ul> <li>Application needs credentials to access AWS resources</li> <li>Credentials should be revoked if application is inactive for 12 hours</li> </ul> <p>Solution</p> <ul> <li>Enable an instance of AWS secrets engine</li> <li>Create AWS credentials for application with 12 hour lease duration</li> <li>Configure application to renew credentials</li> </ul> <p>Use Case</p> <ul> <li>Multiple users need Consul tokens on a regular basis</li> <li>Tokens should expire after 60 minutes</li> <li>All tokens should be revoked if there is a credential breach</li> </ul> <p>Solution</p> <ul> <li>Enable an instance of the Consul engine</li> <li>Create roles with a max lease TTL of 60 minutes</li> <li>Revoke leases with a prefix action</li> </ul>"},{"location":"vault2/5vaba_lease/#renewing-a-lease-with-the-cli","title":"Renewing a Lease with the CLI","text":"<p>Pre Set</p> <pre><code># First of all we are going to start Vault in development mode\nvault server -dev\n\n# Now set your Vault address environment variable\nexport VAULT_ADDR=http://127.0.0.1:8200\n\n# Set the root token variable\nroot_token=ROOT_TOKEN_VALUE\n\n# And log into Vault using the root token\nvault login $root_token\n\n# Re-enable consul secrets engine\nvault secrets enable consul\n\n# Get consul up and running\n\n# Create a data subdirectory in m8\nmkdir data\n\n# Launch consul server instance\nconsul agent -bootstrap -config-file=\"consul-config.hcl\" -bind=\"127.0.0.1\"\n\n# From a separate terminal window run the following\nconsul acl bootstrap\n\n# Set CONSUL_HTTP_TOKEN to SecretID\n\n# Linux and MacOS\nexport CONSUL_HTTP_TOKEN=SECRETID_VALUE\n\n# Next we have to create a policy and role for new tokens\n# that Vault will generate on Consul\n\nconsul acl policy create -name=web -rules @web-policy.hcl\n\n# Now we'll configure out Consul secrets engine\nvault write consul/config/access address=\"http://127.0.0.1:8500\" token=$CONSUL_HTTP_TOKEN\n</code></pre> <p>generate a bunch of leases</p> <pre><code># And finally generate a bunch of leases to work with\n\nvault read consul/creds/web\n</code></pre> <pre><code>$ vault read consul/creds/web\nKey                 Value\n---                 -----\nlease_id            consul/creds/web/vtO2IDHDLBfHK644D0V6sE81\nlease_duration      1h\nlease_renewable     true\naccessor            07480394-784f-fcf0-d059-d96789b0136a\nconsul_namespace    n/a\nlocal               false\npartition           n/a\ntoken               68796b0f-0ca8-5c6f-c04d-e410590fb00a\n\n$ vault read consul/creds/web\nKey                 Value\n---                 -----\nlease_id            consul/creds/web/hsQltEt7GFprYEb9pSvTTTBH\nlease_duration      1h\nlease_renewable     true\naccessor            fb0cc137-f8de-5e0f-5022-dbbb69938fd9\nconsul_namespace    n/a\nlocal               false\npartition           n/a\ntoken               bcf566f3-05d6-f73c-a3e2-5a72889b775e\n\n$ vault read consul/creds/web\nKey                 Value\n---                 -----\nlease_id            consul/creds/web/KeSvwCkIvY7iP8k7SqP6MQcD\nlease_duration      1h\nlease_renewable     true\naccessor            e792364d-e232-13d2-01c7-4fc4c12b7caf\nconsul_namespace    n/a\nlocal               false\npartition           n/a\ntoken               b79be0a8-fc68-6db9-6624-8d6371968a14\n\n$ vault list sys/leases/lookup/consul/creds/web/\nKeys\n----\nKeSvwCkIvY7iP8k7SqP6MQcD\nhsQltEt7GFprYEb9pSvTTTBH\no4AT0MtgswjaSBNzYqgNGpxe\nvtO2IDHDLBfHK644D0V6sE81\n</code></pre> <pre><code># Let's renew one of the leases for 30 minutes\n\nvault lease renew -increment=30m LEASE_ID\n\n$ vault lease renew -increment=30m consul/creds/web/KeSvwCkIvY7iP8k7SqP6MQcD\nKey                Value\n---                -----\nlease_id           consul/creds/web/KeSvwCkIvY7iP8k7SqP6MQcD\nlease_duration     30m\nlease_renewable    true\n\n# Now get the properties of the lease\n\nvault write sys/leases/lookup lease_id=LEASE_ID\n\n vault write sys/leases/lookup lease_id=consul/creds/web/KeSvwCkIvY7iP8k7SqP6MQcD\nKey             Value\n---             -----\nexpire_time     2022-12-03T00:33:56.5601+08:00\nid              consul/creds/web/KeSvwCkIvY7iP8k7SqP6MQcD\nissue_time      2022-12-02T23:57:34.465805+08:00\nlast_renewal    2022-12-03T00:03:56.5601+08:00\nrenewable       true\nttl             29m20s\n</code></pre> <ul> <li><code>ttl             29m20s</code></li> </ul> <pre><code># What if we exceed the lease max ttl?\nvault lease renew -increment=120m LEASE_ID\n\nvault lease renew -increment=120m consul/creds/web/KeSvwCkIvY7iP8k7SqP6MQcD\n\n$ vault lease renew -increment=120m consul/creds/web/KeSvwCkIvY7iP8k7SqP6MQcD\nWARNING! The following warnings were returned from Vault:\n\n  * TTL of \"2h\" exceeded the effective max_ttl of \"1h51m5s\"; TTL value is capped accordingly\n\nKey                Value\n---                -----\nlease_id           consul/creds/web/KeSvwCkIvY7iP8k7SqP6MQcD\nlease_duration     1h51m5s\nlease_renewable    true\n</code></pre> <p><code>TTL of \"2h\" exceeded the effective max_ttl of \"1h51m5s\"; TTL value is capped accordingly</code></p>"},{"location":"vault2/5vaba_lease/#revoking-leases-with-the-cli","title":"Revoking Leases with the CLI","text":"<pre><code># Now we can try and revoke one of the leases\n# First we'll get a list of active leases\n\nvault list sys/leases/lookup/consul/creds/web/\n\n# Now revoke the lease\n\nvault lease revoke LEASE_ID\n\nvault lease revoke consul/creds/web/KeSvwCkIvY7iP8k7SqP6MQcD\n\n$ vault lease revoke consul/creds/web/KeSvwCkIvY7iP8k7SqP6MQcD\nAll revocation operations queued successfully!\n\n$ vault list sys/leases/lookup/consul/creds/web/\nKeys\n----\nhsQltEt7GFprYEb9pSvTTTBH\no4AT0MtgswjaSBNzYqgNGpxe\nvtO2IDHDLBfHK644D0V6sE81\n\n$ vault write sys/leases/lookup lease_id=consul/creds/web/KeSvwCkIvY7iP8k7SqP6MQcD\nError writing data to sys/leases/lookup: Error making API request.\n\nURL: PUT http://127.0.0.1:8200/v1/sys/leases/lookup\nCode: 400. Errors:\n\n* invalid lease\n\n\n# Confirm our lease is gone\n\n# What if we want to revoke all of them? Prefix time\n\n$ vault lease revoke -prefix consul/creds/web/\nAll revocation operations queued successfully!\n\n# Confirm that all the leases are gone\n vault list sys/leases/lookup/consul/creds/web/\nKeys\n----\n</code></pre>"},{"location":"vault2/5vaba_lease/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>All dynamic secrets and service tokens have a lease that determines their validity period.</li> <li>Lease duration can be extended by renewing the lease. Renewals cannot exceed the maximum TTL.</li> <li>Leases can be revoked before they expire using the Lease ID. Revoking a token revokes all of its associated leases.</li> <li>Multiple leases can be revoked usina a prefix. which requires sudo permissions.</li> </ul>"},{"location":"vault3/1intro/","title":"L1 HashiCorp Vault Overview and Installation","text":""},{"location":"vault3/1intro/#1-course-overview","title":"1 Course Overview","text":"<p>Learning Path</p> <ul> <li>Installing and Configuring Hashicorp Vault</li> <li>Managing HashiCorp Vault Server</li> <li>Managing Accessand soretsinHashicorp Vault</li> <li>Integrating HashiCorp Vault in CI/CD Pipelines</li> </ul> <p>Dev Path</p> <ul> <li>Running the development instance</li> <li>Designing a deployment</li> <li>Deploying Vault server</li> <li>Configuring high availability</li> <li>Managing encryption and seal keys</li> <li>Configuring authentication and secrets</li> <li>Setting up auditing and monitoring</li> </ul>"},{"location":"vault3/1intro/#hashicorp-vault","title":"HashiCorp Vault","text":"<ul> <li>Secrets lifecycle manager</li> <li>Written in Go</li> <li>Multiple operating systems</li> <li>Same binary for client/server</li> </ul>"},{"location":"vault3/1intro/#vault-conceptual-architecture","title":"Vault Conceptual Architecture","text":""},{"location":"vault3/1intro/#2-running-the-development-instance","title":"2 Running the Development Instance","text":""},{"location":"vault3/1intro/#installing-vault","title":"Installing Vault","text":"<pre><code># First we will install Vault, pick the steps for your OS\n# If you're using a different flavor of Linux, check out\n# the directions available here: https://learn.hashicorp.com/tutorials/vault/getting-started-install?in=vault/getting-started#install-vault\n\n# MacOS\n\nbrew tap hashicorp/tap\nbrew install hashicorp/tap/vault\n\n# Ubuntu\n\ncurl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add \u2013\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\nsudo apt-get update &amp;&amp; sudo apt-get install vault\n\n\n# Now let's verify it installed successfully and is in the PATH \n# environment variable\nvault version \n</code></pre> <pre><code>$ vault version \nVault v1.12.1 (e34f8a14fb7a88af4640b09f3ddbb5646b946d9c), built 2022-10-27T12:32:05Z\n</code></pre>"},{"location":"vault3/1intro/#running-vault-in-development-mode","title":"Running Vault in Development Mode","text":"<ul> <li>Running on localhost without SSL</li> <li>In-memory storage</li> <li>Starts unsealed with token cached</li> <li>UI enabled</li> <li>Key/Value secrets engine enabled</li> </ul>"},{"location":"vault3/1intro/#dev-server","title":"Dev Server","text":"<p><code>vault server -dev -dev-root-token-id=86753098675309</code></p> <pre><code># Launch Vault in development mode\nvault server \u2013dev\n\n# Store Vault server address in environment variable\n# Linux and macOS\nexport VAULT_ADDR=http://127.0.0.1:8200\n\n# Windows PowerShell\n$env:VAULT_ADDR=\"http://127.0.0.1:8200\"\n\n# Log into Vault\nvault login\n</code></pre>"},{"location":"vault3/1intro/#vault-cli","title":"Vault CLI","text":"<pre><code># Basic vault command structure\nvault &lt;command&gt; &lt;subcommand&gt; [options] [ARGUMENTS]\n\n\n# Getting help with vault\nvault &lt;command&gt; -help\nvault path-help PATH\n</code></pre> <p>Environment</p> <ul> <li><code>VAULT_ADR</code> - Address of the Vault server</li> <li><code>VAULT_TOKEN</code> - Token value for requests</li> <li><code>VAULT_SKIP_VERIFY</code> - No verify TLS cert</li> <li><code>VAULT_FORMAT</code> - Specify output format</li> </ul> <pre><code># Try the CLI\n# Check for the root token\nvault token lookup\n</code></pre> <pre><code>$ vault token lookup\nKey                 Value\n---                 -----\naccessor            zCpAz878fjNacWJjveqTVj2R\ncreation_time       1669855234\ncreation_ttl        0s\ndisplay_name        root\nentity_id           n/a\nexpire_time         &lt;nil&gt;\nexplicit_max_ttl    0s\nid                  hvs.xdqJDIY7fbqrz9oj2hs63nEq\nmeta                &lt;nil&gt;\nnum_uses            0\norphan              true\npath                auth/token/root\npolicies            [root]\nttl                 0s\ntype                service\n</code></pre> <pre><code># List out the secrets engines\nvault secrets list\n\n\n$ vault secrets list\nPath          Type         Accessor              Description\n----          ----         --------              -----------\nTestKV/       kv           kv_a4bf358a           Test K/V version 2\nconsul/       consul       consul_2ad1fcb7       n/a\ncubbyhole/    cubbyhole    cubbyhole_c4a23e97    per-token private secret storage\nidentity/     identity     identity_20b0ef66     identity store\nsecret/       kv           kv_cdd1aa1f           key/value secret storage\nsys/          system       system_75379b69       system endpoints used for control, policy and debugging\n</code></pre> <pre><code>\n# Write a secret\nvault kv put secret/hg2g life=42\n\n\n$ vault kv put secret/hg2g life=42\n== Secret Path ==\nsecret/data/hg2g\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-04T13:24:10.534958Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n</code></pre> <p>List out the auth methods</p> <pre><code>$ vault auth list\nPath      Type     Accessor               Description                Version\n----      ----     --------               -----------                -------\ntoken/    token    auth_token_47fd36e5    token based credentials    n/a\n</code></pre> <p></p> <p>we have four different categories, </p> <ul> <li>secrets for secrets engines, </li> <li>access for authentication methods, </li> <li>policies for dealing with access policies, </li> <li>Some general tools that are available within vault.</li> </ul>"},{"location":"vault3/1intro/#using-the-vault-api","title":"Using the Vault API","text":"<ul> <li>RESTful</li> <li>Used by Ul and CLI</li> <li>Only way to interact with Vault</li> <li>curl with <code>X-Vault-Token</code> header</li> </ul> <pre><code>export VAULT_TOKEN=hvs.xdqJDIY7fbqrz9oj2hs63nEq\n\n\n$ curl -H \"X-Vault-Token: $VAULT_TOKEN\" \\\n&gt;   -X GET \\\n&gt;   $VAULT_ADDR/v1/secret/data/hg2g | jq\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   310  100   310    0     0  31003      0 --:--:-- --:--:-- --:--:--  302k\n{\n  \"request_id\": \"8d45e8b1-8c8c-c4e2-cc1f-a25d4e00f596\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"data\": {\n      \"life\": \"42\"\n    },\n    \"metadata\": {\n      \"created_time\": \"2022-12-04T13:24:10.534958Z\",\n      \"custom_metadata\": null,\n      \"deletion_time\": \"\",\n      \"destroyed\": false,\n      \"version\": 1\n    }\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n</code></pre>"},{"location":"vault3/1intro/#module-summary","title":"Module Summary","text":"<ul> <li>Vault installation process</li> <li>Vault development instance</li> <li>Interaction options</li> </ul>"},{"location":"vault3/2dev_model/","title":"L2 Vault a Deployment Model","text":""},{"location":"vault3/2dev_model/#1-vault-logical-architecture","title":"1 Vault Logical Architecture","text":"<p>Vault Logical Architecture</p> <p></p> <p>At the center we've got Vault, and the Vault executable running. It's surrounded by what's called the barrier.</p> <p>Everything inside the barrier is unencrypted, but anything that leaves the barrier has to be protected and encrypted, and that is for both the front end and the back end.</p> <p>The barrier is just the terminology that HashiCorp uses to describe where things are encrypted and protected and where they are not.</p> <p>On the front end, the way that you talk to the Vault server is through the API, which is going to be an HTTPS listener sitting on the front of the Vault deployment. It is secured by using TLS, which requires some sort of certificate, a TLS certificate.</p> <p>That will encrypt the traffic between the Vault server and the client that's asking for information from that Vault server.</p> <p>Now the requests themselves coming from the client also have to have a valid Vault token in order to have permissions to perform actions on Vault, but the actual encryption of the traffic happens via that TLS certificate.</p> <p>On the back end we have some type of storage that's supporting the Vault server, and Vault writes data to that storage in an encrypted format.</p> <p>Any information leaving Vault destined for that storage is going to leave the barrier encrypted, and the way that Vault encrypts it is by using encryption keys.</p> <p>Those encryption keys are secured by a master key, and that master key is secured by an unsealed key which is never stored inside of Vault.</p> <p>All you need to understand here is data leaving Vault through the barrier for the storage subsystem will always be encrypted, so it doesn't really matter if your storage system itself supports encryption because the data's already encrypted when it leaves Vault.</p>"},{"location":"vault3/2dev_model/#2-deployment-components","title":"2 Deployment Components","text":"<p>compute</p> <ul> <li>Bare Metal / VM / Container</li> <li>Multiple Operating Systems</li> </ul> <p>Could be a bare metal server where you're running Vault, it could be a virtual machine, or it could be a container that's running on Docker or through an orchestrator like Kubernetes.</p> <p>Written in Go, it's compiled for multiple operating systems, so you don't just have to run on Linux; you also have the option to run Vault server on windows or OpenBSD.</p> <p>Networking aspect</p> <ul> <li>Client and storage communication</li> <li>Load balancer or DNS</li> </ul> <p>You can also achieve the same end using round\u2011robin DNS, but it's going to depend on what kind of endpoints you want to expose for the Vault service</p> <p>Storage type</p> <ul> <li>HashiCorp or community support</li> <li>High availability support</li> </ul> <p>TLS certificates</p> <ul> <li>API TLS certificate</li> <li>Storage backend traffic</li> </ul>"},{"location":"vault3/2dev_model/#3-deployment-considerations","title":"3 Deployment Considerations","text":"<p>SLA and uptime</p> <ul> <li>Service level agreement and uptime</li> <li>Component failure</li> </ul> <p>monitor your Vault service</p> <ul> <li>Health monitoring</li> <li>Capacity monitoring</li> </ul> <p>protect your Vault server</p> <ul> <li>Key shares</li> <li>Server configuration</li> <li>Storage backend</li> </ul> <p>The first one is key shares. Key shares are assembled to create the unseal key for your Vault deployment. Those need to be protected, but they shouldn't all reside in the same place. In fact, they should be distributed amongst multiple people</p> <p>And then the last component is the storage back end. This is where the data actually lives. If you have a backup of the storage back end and you have the key shares and the server configuration, everything else can go away and you can rebuild your Vault deployment from scratch</p> <p>key shares and the unseal key</p> <ul> <li>Distributed key shares</li> <li>Auto unseal</li> </ul> <p>Option 1:</p> <p>get PGP public keys from those who will have the key shares and use those public keys to encrypt the key shares and send that encrypted key share to them.</p> <p>Option 2</p> <p>considering is whether or not you want to enable Auto Unseal.</p> <p>Auto Unseal allows the Vault to unseal itself at bootup, provided it can access a key in a remote location.</p> <p>That remote location could be something like Azure Key Vault, or it could be an on\u2011premises HSM</p>"},{"location":"vault3/2dev_model/#vault-server-configuration","title":"Vault Server Configuration","text":"<ul> <li>Defined in HCL(HashiCorp Configuration Language) or JSON</li> <li>Supports multiple files</li> <li>Passed using config flag</li> <li>The config flag can be used multiple times. If you point it at a directory, it will load all the configuration files it finds in the directory, or if you get a file, it will load just that file</li> <li>You can use the config flag multiple times to point it at multiple directories or files.</li> <li>Loaded when service starts</li> </ul>"},{"location":"vault3/2dev_model/#parameter-categories","title":"Parameter Categories","text":"<p>Various options within those HCL or JSON files parameters</p> <ul> <li>Single value</li> <li>Listener</li> <li>The listener parameter category holds all of the information of how Vault should listen to and respond to requests from clients</li> <li>Storage</li> <li>The storage block is there to define what type of storage back end you're going to use.</li> <li>HA storage block you can specify separately if you want to use one type of storage for general data and another type of storage for the HA functionality in Vault server.</li> <li>Seal</li> <li>You use this to define an Auto Unseal configuration for your Vault server</li> <li>If you're not using Auto Unseal, you don't have to put a seal block in your configuration.</li> <li>Telemetry</li> <li>defines how Vault will send information to external monitoring services.</li> <li>Service registration</li> <li>This allows Vault server to register itself either with Kubernetes or with Consul and make its services available to applications that are running in those environments</li> </ul>"},{"location":"vault3/2dev_model/#single-value-parameter","title":"Single value Parameter","text":"<p>General Settings</p> <ul> <li><code>ui = true | false</code></li> <li><code>disable_mlock = [true | false]</code></li> <li><code>log_level = \"level\"</code></li> <li><code>log_format = [\"standard\" | \"json\" ]</code></li> <li><code>max_lease_ttl = \"768h\"</code></li> <li><code>default_lease_ttl = \"768h\"</code></li> <li><code>cluster_addr = \"https://address:port\"</code></li> <li><code>api_addr = \"https://address:port\"</code></li> <li>ui, and this can be set to true or false. This defines whether or not the UI, or graphical user interface, will be enabled for the Vault server.</li> <li><code>disable_mlock</code>. This determines whether or not mlock will be disabled. The general guidance is that <code>disable_mlock</code> should be set to false, which means that mlock is enabled. However, in very specific cases, like if you're using the integrated storage option, it should be set to true.</li> <li><code>log_level</code>, and this defines what level of logging that Vault server will write out. The level could be something like info or warn or error or even debug. It really depends on how much information you want in your logs.</li> <li><code>log_format</code>. This lets you define how you want the logging written out. generally go with JSON, but the format you select will depend on how you ingest those logs.</li> <li><code>lease TTL</code> that's defined for all of Vault server. You can define a <code>max_lease_ttl</code> for all of Vault server, and then you can apply a more specific <code>max_lease_ttl</code> in the configuration of secrets engines or authentication methods.</li> <li><code>default_lease_ttl</code> for all of Vault server, which means if an explicit <code>default_lease_ttl</code> is not defined for a secrets engine or an authentication method, it will use this value instead.</li> <li><code>cluster_addr</code> defines the address where cluster communications should be sent for this particular Vault server.</li> <li><code>api_addr</code> defines where communications from clients should be sent for this particular Vault server.</li> <li>Both <code>cluster_addr</code> and <code>api_addr</code> are part of high availability</li> </ul>"},{"location":"vault3/2dev_model/#listener-parameters-and-syntax","title":"Listener Parameters and Syntax","text":"<p>Listener Parameters</p> <p>The listener parameters define how Vault server listens for client communications and requests.</p> <ul> <li>Address information</li> </ul> <p>This defines the address on which the Vault server will listen for incoming communications, and you can do it by a specific IP address, or you can do it for all IP addresses.</p> <ul> <li>HTTP timeouts</li> </ul> <p>The next category is HTTP timeouts, and this defines the timeouts for different HTTP actions that will be taken by the clients or by Vault.</p> <ul> <li>Request control</li> </ul> <p>The next group of settings is all about request control, and this defines things like the maximum request size you'll allow from the client or the maximum request duration you'll allow from a client.</p> <ul> <li>Proxy behavior</li> </ul> <p>proxy behavior, and this defines how Vault will behave when it gets something using the proxy protocol</p> <p>Will it allow the traffic, will it deny the traffic, and what address ranges will you authorize to use the proxy protocol</p> <ul> <li>TLS settings</li> </ul> <p>This is your opportunity to enable TLS, which you almost certainly want to do, and also define where the certificate is that you're going to be using for TLS.</p> <ul> <li>X-Forwarded-For</li> </ul> <p>If there's an X\u2011Forwarded\u2011For header in the request, this group of settings defines how Vault will interpret and allow requests when they have that header</p> <p><code>Vault-Config.hcl</code></p> <pre><code># Listener Settings\nlistener \"tcp\" {\n\n# Listener address\naddress = \"0.0.0.0:8200\"\ncluster_address = \"0.0.0.0:8201\n\n# TLS settings\ntls_disable = 0\ntls_cert_file = \"/opt/vault/tls/vault-full.pem\"\ntls_key_file = \"/opt/vault/tls/vault-key.pem\"\ntls_min_version = \"tls12\" \n}\n</code></pre> <p>Now, let's take a look at the TLS settings that you might configure for your listener.</p> <p>The first one is tls_disable = 0, and it's a little confusing the way it's worded, but basically, if you set it to 0, that means false, which means TLS is not disabled. It's enabled. by setting it to 0, you're enabling TLS.</p>"},{"location":"vault3/2dev_model/#storage-backend","title":"Storage Backend","text":"<p>The storage back end defines where data is persisted for Vault server. Vault is going to encrypt all data before it leaves the barrier and gets written to that storage back end</p> <p>Storage types</p> <ul> <li>Object</li> </ul> <p>Object\u2011based storage is supported for Vault server, so if you're using something like AWS S3, that's an available storage type.</p> <ul> <li>Database</li> </ul> <p>It also supports database as a storage back end, so you can use something like MySQL as your storage back end.</p> <ul> <li>Key/Value</li> </ul> <p>It also supports key value stores, so you can use something like HashiCorp Console, which is actually a HashiCorp\u2011supported storage type.</p> <ul> <li>File</li> </ul> <p>And it supports file\u2011based storage, so you can just use the local file system and disks on the Vault server as your storage back end.</p> <ul> <li>Memory</li> </ul> <p>Finally, there is the memory storage type, which doesn't actually persist the data anywhere, it's what's used for the development instance, so you're really not going to select memory unless you don't care about persisting data</p> <ul> <li>Integrated Storage (Raft)</li> <li>Local storage<ul> <li>And what's interesting about Integrated Storage is it actually uses local storage on each Vault server.</li> </ul> </li> <li>Highly available</li> <li>Replicated</li> </ul> <p>The last storage type I want to call out explicitly, and that's Integrated Storage, also called Raft because it uses the Raft consensus.</p> <p>It's also highly available because each Vault server in the cluster has a copy of the data on its local storage, and Raft takes care of replication between all of the Vault servers by electing a leader and then replicating the data from that leader to the other Vault servers.</p>"},{"location":"vault3/2dev_model/#deployment-design","title":"Deployment Design","text":"<ul> <li>Deploy in Azure</li> <li>Publicly available endpoint</li> <li>Use third-party certificates</li> <li>SLA of 99.99% for Vault</li> <li>Auto unseal of Vault</li> </ul>"},{"location":"vault3/2dev_model/#azure-vms-deployment","title":"Azure VMs Deployment","text":"<p>In our Azure VM deployment, it all starts with an Azure Virtual Network, or VNet, and then within that VNet we'll have a subnet dedicated for our Vault servers. In that subnet we'll deploy an Azure virtual machine that has the Vault binary already installed, and we will load a configuration onto it.</p> <p>Now we're going to need a TLS certificate to secure our client communication, and we could directly upload that certificate to our Vault server, but why not take advantage of Azure Key Vault and store our certificate in there, and then any additional Vault servers that we spin up can simply grab the certificate from Azure Key Vault instead of uploading it during the deployment.</p> <p>So when our Vault server comes up, as part of its configuration, it's going to grab that certificate from the Key Vault and use it to secure its client connections.</p> <p>Speaking of those client connections, since we need a publicly available endpoint, we're going to add a public IP address to this Azure VM.</p> <p>In a later iteration, we'll move that to a load balancer, but for right now we'll just attach that public IP address directly to the Azure virtual machine. Now because we're using a publicly available endpoint and a third\u2011party TLS certificate, we're going to need a domain to associate that with.</p> <p>We're going to be using the Globomantics.xyz domain for our Vault deployment. So for instance, our public endpoint could be vault\u2011vms.Globomantics.xyz. Once we set up a public IP address, we can also associate a public host name with that public IP address, and then we can create a CNAME record in our public DNS that maps to the desired subject name that we've used in our TLS certificate.</p> <p>Next up, we want to secure network traffic that's coming to our Vault server and make sure it's only using the ports that are actually needed. That's port 8200 and possibly 8201 for cluster communication, so we can add network security groups to both the virtual machine itself and the Vault subnet as a whole.</p> <p>And then lastly, for storage, we're going to go with Integrated Storage for our Azure VM so it's not reliant on any external storage services for that storage back end.</p>"},{"location":"vault3/2dev_model/#azure-kubernetes-service-deployment","title":"Azure Kubernetes Service Deployment","text":"<p>HashiCorp recommends that when you're deploying Vault on Kubernetes that it has its own dedicated cluster due to the sensitive nature of what's being stored by Vault.</p> <p>You can use Azure Kubernetes Service to spin up a small three\u2011node cluster that meets those needs. Within the cluster we'll create a namespace called Vault, and then within that namespace we'll first create a secret that holds our TLS certificate we'll use to secure client communication.</p> <p>For our storage back end, we can take advantage of Consul, which is available as a Helm chart, so we can easily deploy Consul to our Kubernetes environment.</p> <p>And then we can deploy Vault also using a Helm chart to the same namespace and have it take advantage of the Consul deployment for storage and automatically load the TLS certificate that's stored in the secret in the same namespace.</p> <p>Now of course, we need that public endpoint again, so we can configure the Vault service to be of type load balancer, which exposes a public IP address, and, once again, we're going to be using the Globomantics.xyz domain for our certificates and our public endpoint The exposed public IP address will get a public hostname that we can define through annotations for the service, and then we can again use a CNAME record to point the desired subject name to the public hostname that's associated with our Vault service.</p>"},{"location":"vault3/2dev_model/#module-summary","title":"Module Summary","text":"<ul> <li>Vault deployment depends on requirements</li> <li>Vault configuration is defined by HCL or JSON files</li> <li>Listener controls how Vault receives requests</li> <li>Storage determines where data is stored</li> </ul>"},{"location":"vault3/3deploy_valut/","title":"L3 Deploying Vault Server","text":"<ul> <li>Procuring TLS certificates</li> <li>Deploying Azure VM</li> <li>Deploying Azure Kubernetes Service</li> </ul>"},{"location":"vault3/3deploy_valut/#tls-certificates","title":"TLS Certificates","text":"<p>Certificate Provisioning</p> <ul> <li>Third party certificate from public CA</li> <li>Using ACME protocol and Let's Encrypt</li> <li>Can be automated for renewal</li> </ul> <p>Prerequisites</p> <ul> <li>Registered public domain</li> <li>OpenSSL installed</li> </ul> <p>Tasks</p> <ul> <li>Prepare requests</li> <li>Validate with DNS</li> <li>Generate PFX files</li> </ul>"},{"location":"vault3/3deploy_valut/#provisioning-the-azure-vm-certificate","title":"Provisioning the Azure VM Certificate","text":"<p>We are going to use certbot to create a 3rd party certificate for our Vault server instances. You will need to have a registered domain to do this.</p> <p>Before you run the commands, log into your domain hosting service and be ready to add a TXT record to your domain</p> <p></p> <p>First set the domain name you are going to create a certificate for</p> <pre><code>domain_name=YOUR_DOMAIN_NAME\n</code></pre> <p>We are going to create two certificates: one for Azure VMs and one for AKS</p> <pre><code>vm_request_name=vault-vms.${domain_name}\n\naks_request_name=vault-aks.${domain_name}\n</code></pre> <p>Next we will install certbot if you don't already have it</p> <pre><code>sudo apt install certbot -y\n</code></pre> <p>Now we are going to request a certificate from Let's Encrypt using the manual verification process for the Azure VMs</p> <pre><code>sudo certbot certonly --manual -d $vm_request_name --agree-tos -m noone@${domain_name} --no-eff-email --preferred-challenges dns\n</code></pre> <p>Agree to your IP being logged</p> <p>Create a TXT record on your domain and then hit enter</p> <p>Copy your pem files to the cert-gen folder</p> <pre><code>sudo cp /etc/letsencrypt/live/${vm_request_name}/fullchain.pem vm_fullchain.pem\nsudo cp /etc/letsencrypt/live/${vm_request_name}/privkey.pem vm_privkey.pem\n</code></pre> <p>Now we'll create our PFX file that we can upload to Key Vault for the Azure VMs</p> <pre><code>openssl pkcs12 -export -out vm-certificate-to-import.pfx -inkey vm_privkey.pem -in vm_fullchain.pem -passout pass:\n</code></pre> <p></p> <p></p> <p></p> <p></p>"},{"location":"vault3/3deploy_valut/#provisioning-the-aks-certificate","title":"Provisioning the AKS Certificate","text":"<pre><code># Repeat the process for the AKS certificate\nsudo certbot certonly --manual -d $aks_request_name --agree-tos -m noone@${domain_name} --no-eff-email --preferred-challenges dns\n\n# Copy your pem files to the cert-gen folder\nsudo cp /etc/letsencrypt/live/${aks_request_name}/fullchain.pem aks_fullchain.pem\nsudo cp /etc/letsencrypt/live/${aks_request_name}/privkey.pem aks_privkey.pem\n\n# Create the PFX file\nopenssl pkcs12 -export -out aks-certificate-to-import.pfx -inkey aks_privkey.pem -in aks_fullchain.pem -passout pass:\n</code></pre> <p>We have our two certificates, one for the Azure VMs and one for AKS.</p>"},{"location":"vault3/3deploy_valut/#deploying-the-azure-vm-infrastructure","title":"Deploying the Azure VM Infrastructure","text":"<p>Terraform can use your login credentials from the Azure CLI</p> <p>Make sure you are logged into Azure with the CLI and have the</p> <p>correct subscription selected.</p> <pre><code>az login\naz account set -s SUBSCRIPTION_NAME\n</code></pre> <p>First we are going to initialize the Terraform config</p> <pre><code>terraform init\n</code></pre> <ul> <li><code>vnet.tf</code></li> </ul> <pre><code>resource \"azurerm_resource_group\" \"vault\" {\n  name     = local.resource_group_name\n  location = var.location\n}\n\n# Virtual network with a Vault subnet\nmodule \"vnet\" {\n  source              = \"Azure/vnet/azurerm\"\n  version             = \"~&gt; 2.0\"\n  resource_group_name = azurerm_resource_group.vault.name\n  vnet_name           = azurerm_resource_group.vault.name\n  address_space       = var.address_space\n  subnet_prefixes     = var.subnet_prefixes\n  subnet_names        = var.subnet_names\n\n  subnet_service_endpoints = {\n    (var.subnet_names[0]) = [\"Microsoft.KeyVault\"]\n  }\n\n}\n\nresource \"azurerm_nat_gateway\" \"vault\" {\n  location            = var.location\n  name                = local.nat_gateway_name\n  resource_group_name = azurerm_resource_group.vault.name\n  sku_name            = \"Standard\"\n}\n\nresource \"azurerm_public_ip\" \"vault_nat\" {\n  allocation_method   = \"Static\"\n  location            = var.location\n  name                = \"${local.nat_gateway_name}-vault-nat\"\n  resource_group_name = azurerm_resource_group.vault.name\n  sku                 = \"Standard\"\n}\n\nresource \"azurerm_nat_gateway_public_ip_association\" \"vault\" {\n  nat_gateway_id       = azurerm_nat_gateway.vault.id\n  public_ip_address_id = azurerm_public_ip.vault_nat.id\n}\n\nresource \"azurerm_subnet_nat_gateway_association\" \"vault\" {\n  nat_gateway_id = azurerm_nat_gateway_public_ip_association.vault.nat_gateway_id\n  subnet_id      = module.vnet.vnet_subnets[0]\n}\n</code></pre> <ul> <li><code>vms.tf</code></li> </ul> <pre><code># Generate key pair for all VMs\nresource \"tls_private_key\" \"vault\" {\n  algorithm = \"RSA\"\n  rsa_bits  = \"2048\"\n}\n\n# Write private key out to a file\nresource \"local_file\" \"private_key\" {\n  content  = tls_private_key.vault.private_key_pem\n  filename = \"${path.root}/azure_vms_private_key.pem\"\n}\n\n# Create User Identities for Vault VMs\nresource \"azurerm_user_assigned_identity\" \"vault\" {\n  resource_group_name = azurerm_resource_group.vault.name\n  location            = var.location\n\n  name = local.vault_user_id\n}\n\n##################### Vault VM RESOURCES ###################################\n\nresource \"azurerm_availability_set\" \"vault\" {\n  name                         = local.vault_vm\n  location                     = var.location\n  resource_group_name          = azurerm_resource_group.vault.name\n  platform_fault_domain_count  = 3\n  platform_update_domain_count = 2\n  managed                      = true\n}\n\nresource \"azurerm_public_ip\" \"vault\" {\n  count               = var.vault_vm_count\n  name                = \"${local.pip_name}-${count.index}\"\n  resource_group_name = azurerm_resource_group.vault.name\n  location            = azurerm_resource_group.vault.location\n  allocation_method   = \"Static\"\n  domain_name_label   = \"${lower(azurerm_resource_group.vault.name)}-${count.index}\"\n  sku                 = \"Standard\"\n}\n\nresource \"azurerm_network_interface\" \"vault\" {\n  count               = var.vault_vm_count\n  name                = \"${local.vault_vm}-${count.index}\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.vault.name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = module.vnet.vnet_subnets[0]\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.vault[count.index].id\n  }\n}\n\n# Associate the network interfaces from the Vault VMs with the Vault NSG\nresource \"azurerm_network_interface_security_group_association\" \"vault\" {\n  count                     = var.vault_vm_count\n  network_interface_id      = azurerm_network_interface.vault[count.index].id\n  network_security_group_id = azurerm_network_security_group.vault_nics.id\n}\n\n# Associate the network interfaces from the Vault VMs with the Vault ASG for NSG rules\nresource \"azurerm_network_interface_application_security_group_association\" \"vault\" {\n  count                         = var.vault_vm_count\n  network_interface_id          = azurerm_network_interface.vault[count.index].id\n  application_security_group_id = azurerm_application_security_group.vault_asg.id\n}\n\nresource \"azurerm_linux_virtual_machine\" \"vault\" {\n  count               = var.vault_vm_count\n  name                = \"${local.vault_vm}-${count.index}\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.vault.name\n  size                = var.vault_vm_size\n  admin_username      = \"azureuser\"\n  computer_name       = \"vault-${count.index}\"\n  availability_set_id = azurerm_availability_set.vault.id\n  network_interface_ids = [\n    azurerm_network_interface.vault[count.index].id,\n  ]\n\n  admin_ssh_key {\n    username   = \"azureuser\"\n    public_key = tls_private_key.vault.public_key_openssh\n  }\n\n  # Using Standard SSD tier storage\n  # Accepting the standard disk size from image\n  # No data disk is being used\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"StandardSSD_LRS\"\n  }\n\n  #Source image is hardcoded b/c I said so\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"18.04-LTS\"\n    version   = \"latest\"\n  }\n\n  identity {\n    type         = \"UserAssigned\"\n    identity_ids = [azurerm_user_assigned_identity.vault.id]\n  }\n\n  #Custom data from the vault.tmpl file\n  custom_data = base64encode(\n    templatefile(\"${path.module}/vault.tpl\", {\n      vault_version       = var.vault_version\n      key_vault_secret_id = azurerm_key_vault_certificate.vault.secret_id\n    })\n  )\n}\n</code></pre> <ul> <li><code>nsg.tf</code></li> </ul> <pre><code># Create Network Security Groups for subnets\nresource \"azurerm_network_security_group\" \"vault_net\" {\n  name                = local.vault_net_nsg\n  location            = var.location\n  resource_group_name = azurerm_resource_group.vault.name\n}\n\nresource \"azurerm_subnet_network_security_group_association\" \"vault\" {\n  subnet_id                 = module.vnet.vnet_subnets[0]\n  network_security_group_id = azurerm_network_security_group.vault_net.id\n}\n\n# Create Network Security Groups for NICs\n\nresource \"azurerm_network_security_group\" \"vault_nics\" {\n  name                = local.vault_nic_nsg\n  location            = var.location\n  resource_group_name = azurerm_resource_group.vault.name\n}\n\n# Create application security groups for Vault VMs\n\nresource \"azurerm_application_security_group\" \"vault_asg\" {\n  name                = local.vault_asg\n  location            = var.location\n  resource_group_name = azurerm_resource_group.vault.name\n}\n\n# Inbound rules for vault subnet nsg\n\nresource \"azurerm_network_security_rule\" \"vault_8200\" {\n  name                                       = \"allow_8200\"\n  priority                                   = 100\n  direction                                  = \"Inbound\"\n  access                                     = \"Allow\"\n  protocol                                   = \"Tcp\"\n  source_port_range                          = \"*\"\n  destination_port_range                     = \"8200\"\n  source_address_prefix                      = \"*\"\n  destination_application_security_group_ids = [azurerm_application_security_group.vault_asg.id]\n  resource_group_name                        = azurerm_resource_group.vault.name\n  network_security_group_name                = azurerm_network_security_group.vault_net.name\n}\n\nresource \"azurerm_network_security_rule\" \"vault_8201\" {\n  name                                       = \"allow_8201\"\n  priority                                   = 110\n  direction                                  = \"Inbound\"\n  access                                     = \"Allow\"\n  protocol                                   = \"Tcp\"\n  source_port_range                          = \"*\"\n  destination_port_range                     = \"8201\"\n  source_application_security_group_ids      = [azurerm_application_security_group.vault_asg.id]\n  destination_application_security_group_ids = [azurerm_application_security_group.vault_asg.id]\n  resource_group_name                        = azurerm_resource_group.vault.name\n  network_security_group_name                = azurerm_network_security_group.vault_net.name\n}\n\nresource \"azurerm_network_security_rule\" \"vault_ssh\" {\n  name                                       = \"allow_ssh\"\n  priority                                   = 120\n  direction                                  = \"Inbound\"\n  access                                     = \"Allow\"\n  protocol                                   = \"Tcp\"\n  source_port_range                          = \"*\"\n  destination_port_range                     = \"22\"\n  source_address_prefix                      = \"${data.http.my_ip.body}/32\" # Restrict to your public IP address\n  destination_application_security_group_ids = [azurerm_application_security_group.vault_asg.id]\n  resource_group_name                        = azurerm_resource_group.vault.name\n  network_security_group_name                = azurerm_network_security_group.vault_net.name\n}\n\n# Inbound rules for vault nic nsg\n\nresource \"azurerm_network_security_rule\" \"vault_nic_8200\" {\n  name                                       = \"allow_8200\"\n  priority                                   = 100\n  direction                                  = \"Inbound\"\n  access                                     = \"Allow\"\n  protocol                                   = \"Tcp\"\n  source_port_range                          = \"*\"\n  destination_port_range                     = \"8200\"\n  source_address_prefix                      = \"*\"\n  destination_application_security_group_ids = [azurerm_application_security_group.vault_asg.id]\n  resource_group_name                        = azurerm_resource_group.vault.name\n  network_security_group_name                = azurerm_network_security_group.vault_nics.name\n}\n\nresource \"azurerm_network_security_rule\" \"vault_nic_8201\" {\n  name                                       = \"allow_8201\"\n  priority                                   = 110\n  direction                                  = \"Inbound\"\n  access                                     = \"Allow\"\n  protocol                                   = \"Tcp\"\n  source_port_range                          = \"*\"\n  destination_port_range                     = \"8201\"\n  source_application_security_group_ids      = [azurerm_application_security_group.vault_asg.id]\n  destination_application_security_group_ids = [azurerm_application_security_group.vault_asg.id]\n  resource_group_name                        = azurerm_resource_group.vault.name\n  network_security_group_name                = azurerm_network_security_group.vault_nics.name\n}\n\nresource \"azurerm_network_security_rule\" \"vault_nic_ssh\" {\n  name                                       = \"allow_ssh\"\n  priority                                   = 120\n  direction                                  = \"Inbound\"\n  access                                     = \"Allow\"\n  protocol                                   = \"Tcp\"\n  source_port_range                          = \"*\"\n  destination_port_range                     = \"22\"\n  source_address_prefix                      = \"${data.http.my_ip.body}/32\" # Restrict to your public IP address\n  destination_application_security_group_ids = [azurerm_application_security_group.vault_asg.id]\n  resource_group_name                        = azurerm_resource_group.vault.name\n  network_security_group_name                = azurerm_network_security_group.vault_nics.name\n}\n</code></pre> <ul> <li><code>terraform.tf</code></li> </ul> <pre><code># This configuration spins up three Azure VMs that will form\n# the Vault cluster. The virtual machines will be placed behind\n# a public facing load balancer to expose the UI and API port\n\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~&gt; 2.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\n# Used to get tenant ID as needed\ndata \"azurerm_client_config\" \"current\" {}\n</code></pre> <ul> <li><code>keyvault.tf</code></li> </ul> <pre><code>\n# Get your current IP address to provide access to Key Vault in the network acls\ndata \"http\" \"my_ip\" {\n  url = \"http://ifconfig.me\"\n}\n\n# Create key vault and access policies\nresource \"azurerm_key_vault\" \"vault\" {\n  name                       = local.key_vault_name\n  location                   = var.location\n  resource_group_name        = azurerm_resource_group.vault.name\n  tenant_id                  = data.azurerm_client_config.current.tenant_id\n  enabled_for_deployment     = true\n  soft_delete_retention_days = 7\n  purge_protection_enabled   = false\n\n  sku_name = \"standard\"\n\n  # Only allow access to the Key Vault from your public IP address and the vault \n  # subnet.\n  network_acls {\n    default_action             = \"Deny\"\n    bypass                     = \"AzureServices\"\n    ip_rules                   = [\"${data.http.my_ip.body}/32\"]\n    virtual_network_subnet_ids = [module.vnet.vnet_subnets[0]]\n\n  }\n\n}\n\n# Access policy for vault VMs\n# Uses the vault user assigned identity\nresource \"azurerm_key_vault_access_policy\" \"vault\" {\n  key_vault_id = azurerm_key_vault.vault.id\n\n  tenant_id = data.azurerm_client_config.current.tenant_id\n  object_id = azurerm_user_assigned_identity.vault.principal_id\n\n  key_permissions = [\n    \"get\", \"list\", \"update\", \"create\", \"decrypt\", \"encrypt\", \"unwrapKey\", \"wrapKey\", \"verify\", \"sign\",\n  ]\n\n  secret_permissions = [\n    \"get\", \"list\",\n  ]\n\n  certificate_permissions = [\n    \"get\", \"list\",\n  ]\n}\n\n# Access policy allowing your credentials full access to Key Vault\nresource \"azurerm_key_vault_access_policy\" \"you\" {\n  key_vault_id = azurerm_key_vault.vault.id\n\n  tenant_id = data.azurerm_client_config.current.tenant_id\n  object_id = data.azurerm_client_config.current.object_id\n\n  key_permissions = [\n    \"get\", \"list\", \"update\", \"create\", \"decrypt\", \"encrypt\", \"unwrapKey\", \"wrapKey\", \"verify\", \"sign\", \"delete\", \"purge\",\n  ]\n\n  secret_permissions = [\n    \"get\", \"list\", \"set\", \"delete\", \"purge\",\n  ]\n\n  certificate_permissions = [\n    \"get\", \"list\", \"create\", \"import\", \"delete\", \"update\", \"purge\",\n  ]\n}\n\n# Create a certificate in Key Vault for the Vault server\nresource \"azurerm_key_vault_certificate\" \"vault\" {\n  depends_on   = [azurerm_key_vault_access_policy.you]\n  name         = \"${local.resource_group_name}-cert\"\n  key_vault_id = azurerm_key_vault.vault.id\n\n  certificate {\n    contents = filebase64(var.cert_pfx_file_path)\n    password = \"\"\n  }\n\n  certificate_policy {\n    issuer_parameters {\n      name = \"Self\"\n    }\n\n    key_properties {\n      exportable = true\n      key_size   = 2048\n      key_type   = \"RSA\"\n      reuse_key  = false\n    }\n\n    secret_properties {\n      content_type = \"application/x-pkcs12\"\n    }\n  }\n}\n</code></pre> <ul> <li><code>variables.tf</code></li> </ul> <pre><code>variable \"location\" {\n  type    = string\n  default = \"East US\"\n}\n\nvariable \"address_space\" {\n  type    = list(string)\n  default = [\"10.0.0.0/16\"]\n}\n\nvariable \"subnet_prefixes\" {\n  type = list(string)\n  default = [\n    \"10.0.0.0/24\",\n  ]\n}\n\nvariable \"subnet_names\" {\n  type = list(string)\n  default = [\n    \"vault-servers\",\n  ]\n}\n\nvariable \"vault_vm_size\" {\n  type    = string\n  default = \"Standard_B2ms\"\n}\n\nvariable \"vault_vm_count\" {\n  type    = number\n  default = 1\n}\n\nvariable \"cert_pfx_file_path\" {\n  type        = string\n  description = \"The full path to the pfx file to be used for Vault\"\n  default     = \"../1-cert-gen/vm-certificate-to-import.pfx\"\n}\n\nvariable \"leader_tls_servername\" {\n  type        = string\n  description = \"The fqdn used to generate the certificate.\"\n}\n\nvariable \"vault_version\" {\n  type        = string\n  description = \"The version of the Vault binary to download.\"\n  default     = \"1.8.0\"\n}\nresource \"random_id\" \"id\" {\n  byte_length = 4\n}\n\nlocals {\n  resource_group_name = \"vault-${random_id.id.hex}\"\n\n  vault_net_nsg = \"vault-net-${random_id.id.hex}\"\n\n  vault_nic_nsg = \"vault-nic-${random_id.id.hex}\"\n\n  vault_asg = \"vault-asg-${random_id.id.hex}\"\n\n  vault_vm = \"vault-${random_id.id.hex}\"\n\n  vault_user_id = \"vault-userid-${random_id.id.hex}\"\n\n  pip_name = \"vault-${random_id.id.hex}\"\n\n  key_vault_name = \"vault-${random_id.id.hex}\"\n\n  nat_gateway_name = \"vault-${random_id.id.hex}\"\n\n}\n</code></pre> <p><code>outputs.tf</code></p> <pre><code># The dns label from the load balancer\noutput \"public_dns_name\" {\n  value = azurerm_public_ip.vault[*].fqdn\n}\n\n# The public IP address of the load balancer\noutput \"public_ip_address\" {\n  value = azurerm_public_ip.vault[*].ip_address\n}\n</code></pre> <p>Next we are going to plan our deployment</p> <p>Make sure to change the <code>YOUR_CERTIFICATE_CN</code> to the fqdn onyour TLS certificate. Ex. <code>vault-vms.globomantics.xyz</code></p> <p><code>certificate_cn=YOUR_CERTIFICATE_CN</code></p> <pre><code>terraform plan -var leader_tls_servername=$certificate_cn -out azurevm.tfplan\n\n# Now we'll apply the plan to create the resources\nterraform apply azurevm.tfplan\n</code></pre> <p></p> <p></p>"},{"location":"vault3/3deploy_valut/#reviewing-the-vault-deployment-script","title":"Reviewing the Vault Deployment Script","text":"<p>Now we'll connect to the Vault server using SSH to install Vault</p> <pre><code>ssh -i ~/.ssh/azure_vms_private_key.pem azureuser@PUBLIC_IP_ADDRESS\n</code></pre> <p>Here's the script that ran when the virtual machine came up. Now the important stuff to note here is that we install the Vault binary along with some other things, we install the Azure CLI.</p> <p><code>vault.tpl</code></p> <pre><code>#!/usr/bin/env bash\nset -e -o pipefail\n\n# Terraform variables used: \n# vault_version - version of the Vault binary to download\n# key_vault_secret_id - Id of the Key Vault secret holding the certificates\n\n# Get the instance name and local ipv4 address\nexport instance_name=\"$(curl -sH Metadata:true --noproxy '*' 'http://169.254.169.254/metadata/instance/compute/name?api-version=2020-09-01&amp;format=text')\"\nexport local_ipv4=\"$(curl -sH Metadata:true --noproxy '*' 'http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/privateIpAddress?api-version=2020-09-01&amp;format=text')\"\n\n# Get the Vault binary\ncurl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\nsudo apt-get update\nsudo apt-get install python3-pip vault=${vault_version} -y\n\n# Install Azure CLI\npip3 install --user 'azure-cli~=2.26.0' 'azure-mgmt-core~=1.2.0' 'cryptography~=3.3.2' 'urllib3[secure]~=1.26.5' 'requests~=2.25.1'\n\n# configuring Azure CLI for use with VM managed identity\n~/.local/bin/az login --identity --allow-no-subscriptions\n\n# removing any default installation files from /opt/vault/tls/\nrm -rf /opt/vault/tls/*\n\n# set up the certificates\ntouch /opt/vault/tls/{vault-cert.pem,vault-ca.pem,vault-key.pem,vault-full.pem}\nchown vault:vault /opt/vault/tls/{vault-cert.pem,vault-ca.pem,vault-key.pem,vault-full.pem}\nchmod 0640 /opt/vault/tls/{vault-cert.pem,vault-ca.pem,vault-key.pem,vault-full.pem}\n\nsecret_result=$(~/.local/bin/az keyvault secret show --id \"${key_vault_secret_id}\" --query \"value\" --output tsv)\n\necho $secret_result | base64 -d | openssl pkcs12 -clcerts -nokeys -passin pass: | openssl x509 -out /opt/vault/tls/vault-cert.pem\n\necho $secret_result | base64 -d | openssl pkcs12 -cacerts -nokeys -chain -passin pass: | openssl x509 -out /opt/vault/tls/vault-ca.pem\n\necho $secret_result | base64 -d | openssl pkcs12 -nocerts -nodes -passin pass: | openssl pkcs8 -nocrypt -out /opt/vault/tls/vault-key.pem\n\necho $secret_result | base64 -d | openssl pkcs12 -nokeys -passin pass: -out /opt/vault/tls/vault-full.pem\n\nchown -R vault:vault /etc/vault.d/*\nchmod -R 640 /etc/vault.d/*\n</code></pre> <p>There is a managed identity associated with that virtual machine, and what this managed identity does is provide access to the Key Vault that we created as well.</p> <p>The initialization script can take up to 5 minutes to complete. If you don't see the expected files wait a few minutes and check again.</p> <p>Once it uses az login to login with its managed identity, we'll remove the existing certificates that are put in place by the default Vault installation, and set up our new certificates that we get from Azure Key Vault.</p> <p>We'll go ahead and grab the certificate from Azure Key Vault using az keyvault secret show, and then we're going to parse that certificate in a number of different ways to get four different files.</p> <p>We're going to get vault\u2011cert, vault\u2011ca, vault\u2011key, and vault\u2011full, and we can use all of these different certificates in our Vault configuration</p> <pre><code># Once you're connected we'll walk through the process of installing Vault server and raft cluster\n# First let's check out what the installation created\n\nls /etc/vault.d\nls /opt/vault\ncat /etc/passwd | grep vault\n</code></pre> <p></p> <pre><code># The script also copied the pfx file from Key Vault and placed the contents \n# where we need them for Raft and Vault\nsudo cat /opt/vault/tls/vault-ca.pem | openssl x509 -text -nocert\n</code></pre> <p>So I'm going to go ahead and delete the existing hcl file, and we're going to create a new instance of it. So I'll go ahead and run the removal command first.</p> <pre><code># The next step is to overwrite the existing HCL file with our actual config\nsudo rm /etc/vault.d/vault.hcl\n</code></pre> <pre><code># Get local IPv4 address\nip a show eth0\n</code></pre> <p></p>"},{"location":"vault3/3deploy_valut/#loading-the-vault-configuration","title":"Loading the Vault Configuration","text":"<pre><code>sudo vi /etc/vault.d/vault.hcl\n</code></pre> <p><code>vault.hcl</code></p> <pre><code># General parameters\ncluster_name = \"vault-vms\"\nlog_level = \"Info\"\nui = true\n\n# HA parameters\ncluster_addr = \"https://LOCAL_IPV4:8201\"\napi_addr = \"https://LOCAL_IPV4:8200\"\n\n# Listener configuration\nlistener \"tcp\" {\n # Listener address\n address     = \"0.0.0.0:8200\"\n\n # TLS settings\n tls_disable = 0\n tls_cert_file      = \"/opt/vault/tls/vault-full.pem\"\n tls_key_file       = \"/opt/vault/tls/vault-key.pem\"\n tls_client_ca_file = \"/opt/vault/tls/vault-ca.pem\"\n tls_min_version = \"tls12\"\n}\n\n# Storage configuration\nstorage \"raft\" {\n  path    = \"/opt/vault/data\"\n  node_id = \"vault-0\"\n  retry_join {\n    leader_tls_servername = \"LEADER_TLS_SERVERNAME\"\n    leader_api_addr = \"https://LEADER_TLS_SERVERNAME:8200\"\n    leader_ca_cert_file = \"/opt/vault/tls/vault-ca.pem\"\n    leader_client_cert_file = \"/opt/vault/tls/vault-cert.pem\"\n    leader_client_key_file = \"/opt/vault/tls/vault-key.pem\"\n  }\n}\n</code></pre> <p>The <code>leader_tls_servername</code>is actually going to be the public endpoint for our Vault <code>vault\u2011vms.globomantics.xyz</code>.</p> <p>The reason we set <code>tls_servername</code> to the same as what's on our certificate is because we're going to use that same certificate to secure communications within the cluster. </p> <p>By pointing it at the public endpoint, it's going to go to the active Vault server, which is this VM.</p> <ul> <li>For the <code>leader_ca_cert</code>, we're pointing it at the <code>vault\u2011ca.pem</code>.</li> <li>For the client certificate file, we're using <code>vault\u2011cert.pem</code>.</li> <li>For the <code>client_key_file</code>, we're pointing it at <code>vault\u2011key.pem</code>. Remember, the subject name on the certificate is <code>vault\u2011vms.globomantics.xyz.</code></li> </ul> <p></p> <pre><code>sudo vi /etc/vault.d/vault.hcl\n\n# Now we can enable the vault service and start it\nsudo systemctl enable vault\nsudo systemctl start vault\n</code></pre>"},{"location":"vault3/3deploy_valut/#starting-up-the-vault-service","title":"Starting up the Vault Service","text":"<pre><code># Now we'll check the vault service status with journalctl\njournalctl -u vault\n</code></pre> <pre><code># Assuming the Vault service is running, let's check the status\nexport VAULT_ADDR=\"https://YOUR_VAULT_FQDN:8200\"\n\nvault status\n\n# Cool, the next step is to initialize the Vault server\n# We will do that in the next module\n# Do not destroy this Vault deployment!\n</code></pre> <pre><code># Assuming the Vault service is running, let's check the status\nexport VAULT_ADDR=\"https://YOUR_VAULT_FQDN:8200\"\n\nvault status\n</code></pre> <p>And now we can run vault status to get the status of our Vault server.</p> <p>And we can see that it is not initialized.</p> <p>That's set to false. We can see that the vault is currently sealed and that the Storage Type is raft.</p> <p>This Vault server is all ready to go. We just need to initialize it and unseal it.</p>"},{"location":"vault3/3deploy_valut/#azure-kubernetes-service-deployment","title":"Azure Kubernetes Service Deployment","text":"<p>we're going to deploy a three\u2011node cluster of Azure Kubernetes Service and create a Vault namespace where we're going to deploy all of our components, including the secret, HashiCorp Consul, and HashiCorp Vault.</p> <p>At the end of it all, we're going to have a public hostname, and we're going to, once again, need to create a CNAME record in our DNS zone that points to that public hostname.</p>"},{"location":"vault3/3deploy_valut/#deploying-the-aks-cluster","title":"Deploying the AKS Cluster","text":"<p><code>aks.tf</code></p> <pre><code># Resource group for the AKS cluster\nresource \"azurerm_resource_group\" \"aks\" {\n  name = local.resource_group_name\n  location = var.location\n}\n\nresource \"azurerm_kubernetes_cluster\" \"aks\" {\n  name = local.aks_cluster_name\n  location = azurerm_resource_group.aks.location\n  resource_group_name = azurerm_resource_group.aks.name\n  dns_prefix = local.aks_dns_prefix\n\n  kubernetes_version = var.aks_kubernetes_version\n\n  default_node_pool {\n    name = \"default\"\n    node_count = var.node_count\n    vm_size = var.node_size\n  }\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n}\n</code></pre> <p><code>terraform.tf</code></p> <pre><code># This configuration spins up an AKS cluster with a single node pool\n# composed of three nodes. The deployment creates a standalone Vnet\n# and uses the default networking options.\n\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~&gt; 2.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\n# Used to get tenant ID as needed\ndata \"azurerm_client_config\" \"current\" {}\n</code></pre> <p><code>variables.tf</code></p> <pre><code>variable \"location\" {\n  type    = string\n  default = \"East US\"\n}\n\nvariable \"aks_kubernetes_version\" {\n  type = string\n  default = \"1.20.7\"\n}\n\nvariable \"node_count\" {\n  type = number\n  default = 3\n}\n\nvariable \"node_size\" {\n  type = string\n  default = \"Standard_B2ms\"\n}\nresource \"random_id\" \"id\" {\n  byte_length = 4\n}\n\n\nlocals {\n  resource_group_name = \"vault-${random_id.id.hex}\"\n\n  aks_cluster_name = \"vault-${random_id.id.hex}\"\n\n  aks_dns_prefix = lower(local.aks_cluster_name)\n\n}\n</code></pre> <p><code>outputs.tf</code></p> <pre><code>output \"resource_group_name\" {\n  value = azurerm_resource_group.aks.name\n}\n\noutput \"cluster_name\" {\n  value = local.aks_cluster_name\n}\n</code></pre> <p>We are going to use the Terraform to spin up an AKS cluster</p> <p>NOTE: You do not have to use AKS for the demo. You could use another hosted option like EKS or GKE, or run this locally using KinD.</p> <p>These rest of the demo will assume AKS, but feel free to map it to your preferred K8s environment.</p> <pre><code># Log into Azure\naz login\n\n# Select the proper subscription\naz account set -s SUBSCRIPTION_NAME\n\n# Initialize terraform and run a plan\nterraform init\n\nterraform plan -out aks.tfplan\n\n\n# Create the AKS cluster\nterraform apply aks.tfplan\n\n# Set the resource group name and cluster name\nrg_name=\nc_name=\n</code></pre> <p></p> <pre><code># Retrieve the credentials\naz aks get-credentials --resource-group $rg_name --name $c_name\n</code></pre> <p></p> <pre><code># Verify kubectl credentials\nkubectl get nodes\n</code></pre> <p></p>"},{"location":"vault3/3deploy_valut/#creating-the-tls-secret","title":"Creating the TLS Secret","text":"<pre><code># Now that we have a K8s cluster to work with, let's get Vault deployed with Helm\nSECRET_NAME=vault-tls\nNAMESPACE=vault\ncertificate_cn=YOUR_CERTIFICATE_CN\n</code></pre> <p>First we will add the Helm repo for Vault</p> <pre><code>helm repo add hashicorp https://helm.releases.hashicorp.com\nhelm repo update\n\n# Add a namespace for the Vault cluster\nkubectl create namespace ${NAMESPACE}\n</code></pre> <p>Create a secret with the Vault certificate info</p> <p>Extract the crt, key, and ca info from the PFX file</p> <pre><code>openssl pkcs12 -cacerts -nokeys -in ../1-cert-gen/aks-certificate-to-import.pfx -passin pass: | openssl x509 -out vault.ca\nopenssl pkcs12 -nokeys -in ../1-cert-gen/aks-certificate-to-import.pfx -passin pass: -out vault.crt\nopenssl pkcs12 -nocerts -nodes -in ../1-cert-gen/aks-certificate-to-import.pfx -passin pass: | openssl pkcs8 -nocrypt -out vault.key\n</code></pre> <pre><code>kubectl create secret generic ${SECRET_NAME} \\\n  --namespace ${NAMESPACE} \\\n  --from-file=vault.key=vault.key \\\n  --from-file=vault.crt=vault.crt \\\n  --from-file=vault.ca=vault.ca\n</code></pre>"},{"location":"vault3/3deploy_valut/#deploying-the-consul-storage","title":"Deploying the Consul Storage","text":"<pre><code># Clean up\nrm vault.*\n</code></pre> <pre><code># Deploy Consul to provide storage for Vault\nhelm install consul hashicorp/consul --namespace vault\n</code></pre> <pre><code># We can monitor the install by doing a watch on the namespace\nkubectl get pods -n vault -w\n\n</code></pre> <p><code>overrides.yaml</code></p> <pre><code># Vault Helm Chart Value Overrides\nglobal:  \n  enabled: true  \n  tlsDisable: false\n\nserver:\n\n  readinessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true&amp;sealedcode=204&amp;uninitcode=204\"\n  livenessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true\"\n    initialDelaySeconds: 60\n\n  extraEnvironmentVars:\n    VAULT_CACERT: /vault/userconfig/vault-tls/vault.ca\n    VAULT_SKIP_VERIFY: true\n\n  extraVolumes:\n    - type: secret\n      name: vault-tls\n\n  ha:\n    enabled: true\n    replicas: 3\n    config: |\n      listener \"tcp\" {\n        address = \"[::]:8200\"\n        cluster_address = \"[::]:8201\"\n        tls_cert_file = \"/vault/userconfig/vault-tls/vault.crt\"\n        tls_key_file  = \"/vault/userconfig/vault-tls/vault.key\"\n        tls_client_ca_file = \"/vault/userconfig/vault-tls/vault.ca\"\n      }\n\n      storage \"consul\" {\n        path = \"vault\"\n        address = \"HOST_IP:8500\"\n      }\n\n      service_registration \"kubernetes\" {}\n\n  service:\n    type: LoadBalancer\n    annotations: |\n      \"service.beta.kubernetes.io/azure-dns-label-name\": \"CLUSTER_NAME\"\n</code></pre> <p>Once they are all Running, we're in good shape</p> <p>Now get the LoadBalancer IP address for the server</p> <pre><code>$kubectl get service vault -n vault\nNAME   TYPE        CLUSTER-TP     EXTERNAL-IP  PORT (S)   AGE\nvault  LoadBalancer 10.0.172.112  52.142.18.228 8200:32113/TCP,8201:31067/TCP  68s\n</code></pre> <p>The address for the Vault server will be the dns label plus the Azure region cloudapp.azure.com</p> <p>Ex. vaultf-9f8a7a6.eastus.cloudapp.azure.com</p> <p>You'll need to add a CNAME entry for this to your public DNS Ex. <code>vault-aks.globomantics.xyz</code></p> <pre><code>$ terraform output\ncluster_name = \"vault-d1b83fdc\"\nresource_group_name = \"vault-d1b83fdc\"\n</code></pre> <p></p> <pre><code>export VAULT_ADDR=\"https://${certificate_cn}:8200\"\n</code></pre> <p><code>vault status</code></p> <p> </p>"},{"location":"vault3/4encryption_key/","title":"L4 Managing Encryption and Seal Keys","text":""},{"location":"vault3/4encryption_key/#1-vault-encryption-keys","title":"1 Vault Encryption Keys","text":"<p>Vault Logical Architecture</p> <p></p> <p>Encryption Keys</p> <p>The data stored by Vault server is important and sensitive, which means you need to protect it in some way.</p> <p>We're going to be focusing on the storage back end of the Vault logical architecture and the encryption keys that are used to encrypt data that leaves the barrier on its way to the storage back end.</p> <p>Anything that gets written to persistent storage needs to be encrypted</p> <p>1 - Encryption keys</p> <ul> <li>Protect data written to storage</li> <li>Stored on disk</li> </ul> <p>The first one is the encryption keys themselves that are used to protect data that's been written to persistent storage.</p> <p>Before that data leaves the barrier that's running in memory, it gets encrypted by the encryption keys and then written out to persistent storage.</p> <p>they live is on disk. They are written to the same persistent storage that the regular Vault data is, which means you need a way to encrypt the encryption keys.</p> <p>2 - Master key</p> <ul> <li>Protects encryption keys</li> <li>Stored on disk</li> </ul> <p>The key that encrypts the encryption keys is the master key.</p> <p>The master key's job is to protect the encryption keys. When Vault loads up, it will load the encryption keys and decrypt them with the master key.</p> <p>And when the encryption keys are updated, they will be encrypted with the master key before they're written out to persistent storage.</p> <p>The master key is also stored on disk, which means you need to be able to encrypt that master key.</p> <p>3 - Unseal key</p> <ul> <li>Protects master key</li> <li>Stored as shares or externally</li> </ul> <p>And the key that protects the master key is the unseal key.</p> <p>When you unseal Vault, you're using the unseal key to decrypt the master key.</p> <p>You can either store it as shares or you can store it on some sort of external service.</p> <p>3 Seal Options</p>"},{"location":"vault3/4encryption_key/#3-seal-options","title":"3 Seal Options","text":"<p>1 Shamir secret sharing</p> <p>Shamir Secret Sharing. This is an algorithm that Vault uses, and what it does is take a single key, the unseal key, and break it into one or more key shares and then those shares can be combined back together to recreate the unseal key.</p> <ul> <li>Key shares</li> <li>Required threshold</li> </ul> <p>So you could break it into five shares and only require three of those shares to reassemble the key</p> <p>If you're going to use Shamir Secret Sharing for your seal, that is something that is configured during the initialization process for Vault.</p> <p>It can also be updated with a rekey option if you want to change the threshold or the number of key shares.</p> <ul> <li>Configured at initialization</li> <li>Used for sensitive operations</li> </ul> <p>In addition to being used to unseal the vault, these key shares are also used for sensitive operations</p> <p>Something like creating a new root token where you don't want a single individual responsible for that operation, you want to have a threshold of people involved in that operation</p> <p>2 Auto unseal</p> <p>This could be a cloud key management service like Azure Key Vault or AWS KMS, or it could be a hardware security module that exists in your data center.</p> <p>The point is it's not stored within Vault</p> <ul> <li>External service</li> <li>Recovery key shares</li> </ul> <p>The key shares actually still play a role because you'll need them for sensitive operations. So the key shares that you may have had for Shamir Secret Sharing get converted to recovery key shares instead.</p> <ul> <li>Set by Vault server configuration</li> </ul> <p>If you want to use auto unseal for your Vault configuration, that's actually defined in the Vault server configuration files.</p> <p>3 Seal Migration</p> <p>You can migrate the seal from Shamir Secret Sharing to auto unseal. You can migrate it back, or you can migrate to different services within the auto unseal family.</p> <p>There's a lot of options when it comes to seal migration. It does require some downtime to make that migration happen, but it is possible to migrate from one type of seal to another without any data loss.</p>"},{"location":"vault3/4encryption_key/#4-vault-initialization-commands","title":"4 Vault Initialization Commands","text":"<pre><code># Get Vault server status\nvault status\n</code></pre> <pre><code># Initialize Vault server\nvault operator init [options]\nvault operator init-key-shares=5-key-threshold=3\nvault operator init-recovery-shares=5-recovery-threshold=3\n</code></pre> <pre><code>$ vault status\nKey             Value\n---             -----\nSeal Type       shamir\nInitialized     true\nSealed          false\nTotal Shares    1\nThreshold       1\nVersion         1.12.1\nBuild Date      2022-10-27T12:32:05Z\nStorage Type    inmem\nCluster Name    vault-cluster-5c0ec65d\nCluster ID      128570e3-5c75-fb9c-23fb-12582d9be108\nHA Enabled      false\n</code></pre>"},{"location":"vault3/4encryption_key/#securing-key-shares","title":"Securing Key Shares","text":"<p>When you initialize Vault, the output is going to include the unsealed keys And if you don't specify some type of encryption, they will be printed out in cleartext.</p> <p>It would be better if you could encrypt each of the unsealed keys using an administrator's public key.</p> <p>Let's say you have three administrators that you want to be responsible for elevated operations and unsealing Vault.</p> <p>Each of those administrators can create a public/private key pair and give you the public key to use for encryption.</p> <p>When you as the operator run the initialization process, you'll feed in those three public keys to encrypt the unsealed keys that are part of the output.</p> <p>The initialization process will create the unsealed keys</p> <p>Once those unsealed keys have been created, they'll go back through the initialization process, be encrypted using the public keys that you supplied, and then you can give those encrypted unsealed keys back to your administrators.</p> <p>They have the private key pair, so they'll be able to decrypt the encrypted unsealed key and use it when they need to</p> <p></p>"},{"location":"vault3/4encryption_key/#unseal-vault-process-and-commands","title":"Unseal Vault Process and Commands","text":"<p>Unsealing Vault</p> <p></p> <p>When you start up Vault server, it forms a barrier within memory, and that's where data can live unencrypted.</p> <p>The data is living in persistent storage, and that includes things like <code>&lt;mark&gt;</code>the master key, which has been encrypted using the unseal key<code>&lt;/mark&gt;</code>, and <code>&lt;mark&gt;</code>the encryption keys, which have been encrypted using the master key<code>&lt;/mark&gt;</code></p> <p>The persistent data itself, which has been encrypted with the encryption keys</p> <p>When you want to unseal the vault, each stakeholder will submit their unseal key until you've reached the threshold.</p> <p>They'll send those to the API, either through the CLI, the UI or the API directly. And then Vault will assemble those keys into the unseal key that lives only in memory.</p> <p>The unseal key is never written out to persistent storage.</p> <p>And then Vault will load the master key and use the unseal key to decrypt it, and then it will load the encryption keys and use the master key to decrypt those</p> <p>Now Vault is ready to start servicing requests because it has all the necessary ingredients to decrypt persistent data that is on the storage back end.</p>"},{"location":"vault3/4encryption_key/#unseal-vault","title":"Unseal Vault","text":"<pre><code># Start unseal process\nvault operator unseal [options] [KEY]\n\n# Seal an unsealed Vault server\nvault operator seal [options]\n</code></pre> <p>Now this command needs to be run multiple times until you hit the threshold for key shares so Vault can reassemble the unseal key</p> <p>Once it has hit that threshold, Vault will assemble the unseal key, and it will unseal the vault.</p>"},{"location":"vault3/4encryption_key/#initializing-vault-server","title":"Initializing Vault Server","text":"<ul> <li>Initialize Vault with GPG keys</li> <li>Unseal Vault and verify</li> <li>Log into Vault with root token</li> </ul> <p>We are going to initialize and unseal the Vault server using PGP keys from our admins!</p> <pre><code>#Install GnuPG and rng-tools\nsudo apt install gnupg rng-tools -y\nsudo rngd -r /dev/urandom\n</code></pre> <p>Configure <code>GPG_TTY</code></p> <pre><code>GPG_TTY=$(tty)\nexport GPG_TTY\n</code></pre> <p>First we have to generate our pgp keys using gpg</p> <pre><code>gpg --batch --gen-key vaultadmin1\ngpg --batch --gen-key vaultadmin2\ngpg --batch --gen-key vaultadmin3\n</code></pre> <p></p> <p>Now we need the base64 encoded public keys to use with Vault</p> <pre><code>gpg --export vaultadmin1 | base64 &gt; vaultadmin1.asc\ngpg --export vaultadmin2 | base64 &gt; vaultadmin2.asc\ngpg --export vaultadmin3 | base64 &gt; vaultadmin3.asc\n</code></pre> <p>Now we can initialize the seal with our gpg keys</p> <p><code>vaultadmin1</code></p> <pre><code>Key-Type: 1\nKey-Length: 2048\nSubkey-Type: 1\nSubkey-Length: 2048\nName-Real: vaultadmin1\nPassphrase: vaultpassphrase\nExpire-Date: 0\n</code></pre> <p><code>vaultadmin2</code></p> <pre><code>Key-Type: 1\nKey-Length: 2048\nSubkey-Type: 1\nSubkey-Length: 2048\nName-Real: vaultadmin2\nPassphrase: vaultpassphrase\nExpire-Date: 0\n</code></pre> <p><code>vaultadmin3</code></p> <pre><code>Key-Type: 1\nKey-Length: 2048\nSubkey-Type: 1\nSubkey-Length: 2048\nName-Real: vaultadmin3\nPassphrase: vaultpassphrase\nExpire-Date: 0\n</code></pre> <p></p> <pre><code>export VAULT_ADDR=\"https://YOUR_VAULT_FQDN:8200\"\nvault operator init -key-shares=3 -key-threshold=2 -pgp-keys=\"vaultadmin1.asc,vaultadmin2.asc,vaultadmin3.asc\"\n</code></pre> <p></p> <pre><code>$vault operator init\n-key-shares=3 -key-threshold=2 -pgp-keys=\"vaultadmin1.asc, vaultadmin2. asc, vaultadmin3.asc\"\n</code></pre> <p></p> <p></p> <p></p> <p>Copy out the key values to <code>seal_keys.txt</code></p> <p>Next up, we are going to unseal our Vault server</p> <pre><code>#Decrypt the first two keys\necho \"UNSEAL_KEY_1\" | base64 --decode | gpg -u vaultadmin1 -dq\necho \"UNSEAL_KEY_2\" | base64 --decode | gpg -u vaultadmin2 -dq\n</code></pre> <ul> <li><code>UNSEAL_KEY_1 = wcBMA......</code></li> <li><code>UNSEAL_KEY_2 = wcBMA......</code></li> </ul> <p></p> <p></p> <p></p>"},{"location":"vault3/4encryption_key/#unsealing-vault-server","title":"Unsealing Vault Server","text":"<pre><code>#Unseal the vault\nvault operator unseal  \n...\n(Unseal key decrypted 1)\n\n\nvault operator unseal  \n...\n(Unseal key decrypted 2)\n</code></pre> <pre><code># Login into Vault\nvault login\n</code></pre> <ul> <li>Enable auto unseal with Azure Key Vault</li> <li>Revoke the current root token</li> <li>Rotate the current encryption keys</li> </ul>"},{"location":"vault3/4encryption_key/#auto-unseal-overview","title":"Auto Unseal Overview","text":"<ul> <li>Unseal key stored in secure location</li> </ul> <p>The big idea behind auto unseal is when the Vault server comes up, it can automatically unseal itself, assuming it has access to the external location where the unseal key is stored.</p> <p>It could be stored in a cloud service like Azure Key Vault. It could be stored in an on\u2011premises HSM, or you can actually use the Vault transit engine on a different instance of Vault</p> <p>Now the way that keys are typically stored in cloud services and HSMs is that the private key cannot leave that secured location, which means what Vault needs to do is take the encrypted master key, which has been encrypted using the unseal key, submit that master key to the service, and ask it to decrypt the master key and send the decrypted master key back.</p> <ul> <li>Cloud services, HSM, Vault transit engine</li> <li>Master key submitted to secure location</li> <li>Key shares become recovery keys</li> </ul> <p>Once you've selected auto unseal, the key shares that you would normally have from an unsealed key become recovery keys, and they can be used for sensitive operations like rekeying the vault or creating a new root token.</p> <ul> <li>Key shares still required</li> </ul> <p>We associated an Azure AD Managed Service Identity with that Azure VM, which is how it accesses Azure Key Vault to get the certificate it's using for the Vault configuration.</p> <p>We can also use that same identity to store a key in Azure Key Vault for auto unseal, and the Azure VM will be able to use that identity to perform the necessary operations to decrypt the master key.</p> <p>Auto Unseal Architecture</p> <p></p>"},{"location":"vault3/4encryption_key/#auto-unseal-configuration-and-migration","title":"Auto Unseal Configuration and Migration","text":"<p><code>Vault-Config.hcl</code></p> <pre><code>seal \"azurekeyvault\" {\n    tenant_id = \"00000-00000-00000-00000\"\n    vault_name = \"key-vault-name\"\n    key_name = \"key-name-in-key-vault\" \n}\n</code></pre> <p>Seal Migration Process</p> <ul> <li>Update the Vault configuration</li> <li>Restart Vault to seal and update configuration</li> <li>Unseal Vault with the migrate flag</li> </ul> <p>It starts with the seal keyword and then the type of seal you want to implement. In our case, we're implementing azurekeyvault.</p> <p>For Azure Key Vault, we need to specify the <code>tenant_id</code>, we need to specify the name of the key vault where we're going to be storing the key, and we also need to specify the name of the key that's stored in Key Vault that will be used for the auto unseal operation.</p> <p>If we were not using managed security identities, we would also have to specify a client ID and client secret in this configuration, but fortunately, Vault can just take advantage of that managed security identity associated with the Azure virtual machine</p> <pre><code>#Log into Azure with CLI\naz login\naz account set --subscription \"SUB_NAME\"\n</code></pre> <pre><code>cp auto_unseal_key.txt auto_unseal_key.tf\n</code></pre> <p><code>auto_unseal_key.txt</code></p> <pre><code>locals {\n  unseal_key_name = \"vault-${random_id.id.hex}\"\n}\n\nresource \"azurerm_key_vault_key\" \"unseal_key\" {\n  name         = local.unseal_key_name\n  key_vault_id = azurerm_key_vault.vault.id\n  key_type     = \"RSA\"\n  key_size     = 2048\n\n  key_opts = [\n    \"decrypt\",\n    \"encrypt\",\n    \"sign\",\n    \"unwrapKey\",\n    \"verify\",\n    \"wrapKey\",\n  ]\n}\n\nresource \"local_file\" \"seal_config\" {\n  filename = \"${path.module}/seal.hcl\"\n  content = &lt;&lt;EOF\nseal \"azurekeyvault\" {\n  tenant_id      = \"${data.azurerm_client_config.current.tenant_id}\"\n  vault_name     = \"${azurerm_key_vault.vault.name}\"\n  key_name       = \"${azurerm_key_vault_key.unseal_key.name}\"\n}\n  EOF\n}\n</code></pre> <pre><code># Now we can run a Terraform plan and apply with the same values as before\ncertificate_cn=YOUR_CERTIFICATE_CN\n\n$ certificate_cn=vault-vms.globomantics.xyz\n</code></pre> <pre><code>terraform plan -var leader_tls_servername=$certificate_cn -out azurevm.tfplan\n\n# Now we'll apply the plan to create the resources\nterraform apply azurevm.tfplan\n</code></pre> <p></p> <p>New file created <code>seal.hcl</code></p> <p></p> <p>Next step is to update the Vault server configuration to use Key Vault for the seal Connect to the Azure VM via SSH to update the HCL file</p> <pre><code>ssh -i ~/.ssh/azure_vms_private_key.pem azureuser@PUBLIC_IP_ADDRESS\n\nssh -i ~/.ssh/azure vms private key.pem azureuser@20.72.146.101\n</code></pre> <pre><code># Edit the vault.hcl file\nsudo vi /etc/vault.d/vault.hcl\n</code></pre> <p>Paste seal key part</p> <p></p> <pre><code># Now we will restart Vault to seal it and update the loaded config\n# then unseal with the migrate flag\nsudo systemctl restart vault\n\nexit\n</code></pre>"},{"location":"vault3/4encryption_key/#migrating-the-vault-seal","title":"Migrating the Vault Seal","text":"<pre><code># We're going to need our GPG keys to complete the operation\n# Decrypt the first two keys if you don't have them anymore\necho \"FIRST_KEY\" | base64 --decode | gpg -u vaultadmin1 -dq\necho \"SECOND_KEY\" | base64 --decode | gpg -u vaultadmin2 -dq\n</code></pre> <pre><code>vault operator unseal -migrate\n\n# FIRST_KEY\n# SECOND_KEY\n</code></pre> <p>Our keys become recovery keys</p>"},{"location":"vault3/4encryption_key/#managing-encryption-keys","title":"Managing Encryption Keys","text":"<p>Rekey</p> <ul> <li>Update Unseal and Master keys</li> <li>Change seal settings Rotate</li> </ul> <p>What the rekey process does is update both the unseal key and the master keys. Now this is only done if you're using Shamir Secret Sharing and not if you've migrated to auto unseal.</p> <p>You can also use the rekey operation to change the seal settings, including the number of key shares and the threshold for those key shares.</p> <p>And that's something you can do whether you're using auto unseal or if you're using Shamir Secret Sharing.</p> <p>Rotate</p> <ul> <li>Update Encryption keyring</li> <li>Previous versions saved</li> </ul> <p>It creates a new version of your encryption keys.</p> <p>It also saves the previous version of those encryption keys because it doesn't go out and decrypt all of the data and reencrypt it with the new version of the encryption keys.</p> <p>Manage Keys</p> <pre><code># Rekey unseal and master keys\nvault operator rekey [options] [KEY]\nvault operator rekey \u2013init \u2013key-shares=7 \u2013key-threshold=5\n\n# Check the encryption key status\nvault operator key-status [options]\n\n# Rotate the encryption key\nvault operator rotate [options]\n</code></pre>"},{"location":"vault3/4encryption_key/#managing-root-tokens","title":"Managing Root Tokens","text":"<ul> <li>Root token can do ANYTHING</li> </ul> <p>The root token can do anything involved. It has full permissions to do anything involved that it wants to do, which makes it pretty dangerous</p> <p>doesn't have an expiration time on it, so it just lasts forever.</p> <ul> <li>Encrypt with PGP</li> <li>Non-persistent root tokens</li> </ul> <p>Now one of the recommendations is when you generate a root token, you use PGP encryption to protect the output so only the administrator that's requesting it sees the actual value of that root token. When you're creating a root token, you should set it to expire or make it non\u2011persistent.</p> <ul> <li>Generate using key shares</li> </ul> <p>The other thing about non\u2011persistent root tokens is although they can create new root tokens, those new root tokens are still beholden to the expiration of the original root token. The process by which you generate a new root token requires the use of key shares because this is also a sensitive and privileged operation.</p> <p>Manage Root Token</p> <pre><code># Revoke root token\nvault token revoke [options]\nvault operator revoke \u2013self\nvault operator revoke \u2013accessor=1234567890\n\n\n# Create new root token\nvault operator generate-root [options]\nvault operator generate-root \u2013init\nvault operator generate-root \u2013nonce=NONCE_VALUE\n</code></pre> <pre><code>#Revoke the existing root token\nvault login\nvault token revoke -self\nvault token lookup\n</code></pre> <pre><code>$vault token revoke\"-self\nSuccess! Revoked token (if it existed)\n\n$vault token lookup\nError looking up token: Error making API request.\n</code></pre> <p></p> <pre><code>$vault login\nToken (will be hidden):\nError authenticating: error looking\n</code></pre> <p></p> <pre><code>#Start the root token generation process\nvault operator generate-root -init -pgp-key=\"vaultadmin1.asc\"\n</code></pre> <p></p> <pre><code>vault operator generate-root -nonce=NONCE_VALUE\n</code></pre> <pre><code>$vault operator generate-root\n-nonce=a95edaf3-19fa-a172-a73e-b8baf6219aea\n</code></pre> <p></p> <p></p> <pre><code>echo \"ENCODED_TOKEN\" | base64 --decode | gpg -u vaultadmin1 -dq\n</code></pre> <p></p> <p><code>New Root Token: s.wKzTtgK10ioznctwlZcT1Ghp</code></p> <pre><code># Try to log in with the new token\nvault login\n</code></pre> <p></p> <p>Tasks</p> <ul> <li>Rotate encryption key</li> <li>Revoke root token and create new one</li> </ul>"},{"location":"vault3/4encryption_key/#rotating-the-encryption-keys","title":"Rotating the Encryption Keys","text":"<pre><code># Rotate the encryption key\nvault operator key-status\n\nvault operator rotate\n</code></pre> <pre><code>terraform destroy -var leader_tls_servername=$certificate_cn -auto-approve\n</code></pre>"},{"location":"vault3/4encryption_key/#module-summary","title":"Module Summary","text":"<ul> <li>Vault seal protects the master key that protects the encryption keys</li> <li>Vault must be initialized and unsealed prior to use</li> <li>Seal configuration can be migrated</li> <li>Unseal, master, and encryptions keys should be periodically updated</li> <li>Root tokens can do anything and should be revoked quickly</li> </ul>"},{"location":"vault3/5conf_ha/","title":"L5 onfiguring High Availability","text":"<ul> <li>Vault server clustering</li> <li>Cluster communications</li> <li>Scenario review</li> <li>Vault replication options</li> </ul>"},{"location":"vault3/5conf_ha/#1-vault-server-clustering","title":"1 Vault Server Clustering","text":"<p>High Availability Components</p> <ul> <li>Compute</li> </ul> <p>The first component to talk about is the compute component, and this could be a set of bare\u2011metal servers, it could be virtual machines, it could be containers or pods. </p> <ul> <li>Network</li> <li>Storage</li> </ul> <p>There's a storage component to high availability. The storage you're using needs to be highly available, but it also needs to support the high\u2011availability feature of Vault</p>"},{"location":"vault3/5conf_ha/#2-vault-cluster-compute","title":"2 Vault Cluster Compute","text":"<ul> <li>Active and standby</li> </ul> <p>Vault clustering follows an active standby model, so you'll have one active node and one or more standby nodes</p> <p>General recommendation is to have an odd number of nodes in your cluster to help with leader election and those types of things. So, a three\u2011node cluster or a five\u2011node cluster is recommended in general. </p> <ul> <li>Forward or redirect</li> </ul> <p>All requests that come in from clients have to be answered by the active node, which means that the standby nodes can take one of two approaches when they get a request from a client. </p> <p>They can either forward that request to the active node and then send the response back to the client, or they can redirect the client to the active node</p> <ul> <li>Read-only for Enterprise</li> </ul> <p>Enterprise license, your standby nodes in your compute cluster can be enabled for read\u2011only access to the data in Vault.</p> <p>Means they can't write anything new to Vault, but they can respond to read\u2011only requests. </p> <ul> <li>Lock based in datastore</li> <li>Different storage for HA</li> </ul> <p>Once it becomes the active node, it writes some data to the shared data store that the standby nodes can use. </p> <p>Because not all storage types support this HA functionality, you can have one storage type for your general data storage and a separate storage type defined just for HA.</p>"},{"location":"vault3/5conf_ha/#3-vault-cluster-communications","title":"3 Vault Cluster Communications","text":"<p>Network Components</p> <ul> <li>Listener <code>cluster_address</code></li> </ul> <p>The value that you set for <code>cluster_address</code> will be the IP address that you want the node to listen on for all cluster\u2011specific communications.</p> <p>These would be communications from other nodes within the cluster.</p> <ul> <li>Node  <code>cluster_addr</code></li> </ul> <p>The <code>cluster_addr</code> tells other nodes in the cluster how to reach this specific node in the cluster for cluster communications,and it is going to be a URL as opposed to an IP address. </p> <ul> <li>Node  <code>api_addr</code></li> </ul> <p>The other node level setting is <code>api_addr</code>, and this tells other nodes in the cluster where to redirect clients if they want to talk to the active node using the API. This also is going to be a full URL as opposed to an IP address.</p> <ul> <li>Direct access</li> <li>Load balancer</li> </ul> <p>Cluster Communications</p> <p></p> <p>Let's say this is node one and node two. </p> <p>For the listener communication for node one, I'll specify the address. This is the IP address that it listens on for client requests. These are requests using the API, typically using port 8200. I will also specify a cluster address, and this is the IP address that this node will listen on for cluster communications, typically using port 8201. </p> <p>Likewise, on the second node, I will also set the address and cluster address to the local IPv4 address for this particular node. </p> <p>For my first node, I'm going to set the <code>cluster_addr</code> and the <code>api_addr</code>. The <code>cluster_addr</code> is going to be a URL, and this is the URL that other nodes in the cluster should use to communicate with this node. </p> <p>In this case, my node one is server1 listening on port 8201, and that server1 should be resolvable by other nodes in the cluster. The api_addr is also a URL, and this is the URL that clients should use if they've been redirected from a standby node to an active node. </p>"},{"location":"vault3/5conf_ha/#4-client-request-handling","title":"4 Client Request Handling","text":"<p>Network Traffic - Request Forwarding</p> <p></p> <ul> <li>We've got our client, and in this case we're making each of the nodes directly accessible. </li> <li>They're not sitting behind a load balancer.</li> <li>So when the client wants to go talk to the Vault cluster, it's going to look up the Vault cluster's IP addresses via DNS, and there's going to be an entry for each Vault server in the DNS. DNS will use round robin to give the client one of those addresses. </li> <li>Now, let's assume in this case the client gets the standby server, which is the gray server in this case. </li> <li>Let's assume in this case the client gets the standby server, which is the gray server in this case. The client sends its request to the standby server.</li> <li>The standby server knows it's in standby mode, so what it does is reach out to the HA storage backend and ask for information about the active node in the cluster. </li> <li>The HA storage backend will respond with information about the active node.</li> <li>In this case, because we're using request forwarding, the standby node is going to use the value stored in <code>cluster_addr</code>. </li> <li>It's going to use that URL and forward the request from the client to the active server. </li> <li>The active server in turn will respond to the request, and then the standby server will send that response back to the client. </li> <li>The client has no idea it wasn't talking to the active server, because the standby server took care of the request forwarding.</li> <li>This assumes that every node in the cluster is able to talk to every other node at its <code>cluster_addr</code> setting. </li> </ul> <p>might work with a load balancer</p> <p></p> <ul> <li>With a load balancer, the client will still look up the IP address for the Vault service, but that's going to resolve to the front end of the load balancer, and then the load balancer has to decide where to send the traffic. </li> <li>Now it is possible to configure the health check on a load balancer to only send traffic to the active node, and that is the recommendation, </li> <li>But let's assume for a second you haven't gone with that recommendation, and the load balancer sends traffic to the standby node. </li> <li>The standby node will query the HA storage backend and get the setting for the <code>cluster_addr</code>. </li> <li>And once it has that information, it will forward the request to the active node, the active node will respond, and then the standby node will send that response back to the client. </li> </ul> <p>client redirection</p> <p></p> <ul> <li>Client redirection is different in the sense that the standby server is not going to forward the request, it's actually going to redirect the client.</li> <li>Once again, the client looks up the IP addresses for the nodes in the Vault cluster via DNS. </li> <li>let's assume in this case, once again it gets back the IP address of the standby node.</li> </ul> <p></p> <ul> <li>The client will reach out to the standby node, and because the standby node is running in client redirection mode, it will query the HA storage backend, and the setting that it's looking for here is the <code>api_addr</code> of the active node, in this case it's server1. </li> <li>The standby node will send a 302 Redirect response back to the client with the <code>api_addr</code> value of where it should send its requests. </li> <li>At that point, the client will respect that redirect, and instead send its request to the active Vault server, which should respond in kind. T</li> </ul> <p>client redirection interacts with a load balancer</p> <p></p> <ul> <li>The standby server in turn will look up the settings in the HA storage backend and get the <code>api_addr</code> and send that redirect message back to the client. </li> <li>The client will get the redirect message, and it will try to directly talk to the Vault server at the address server1 port 8200. </li> <li>And if that Vault server is not directly accessible at that API address, we have a big problem. </li> <li>It can't actually fulfill its requests. The alternative is to set the <code>api_addr</code> to the load balancer frontend, and hope that the load balancer sends it to the active Vault server and you don't end up in a client redirection loop. </li> </ul>"},{"location":"vault3/5conf_ha/#5-dev-requirement","title":"5 Dev Requirement","text":"<ul> <li>Deploy in Azure</li> <li>Publicly available endpoint</li> <li>Use third-party certificates</li> <li>SLA of 99.99% for Vault</li> <li>Auto unseal of Vault</li> </ul>"},{"location":"vault3/5conf_ha/#6-cluster-architecture-update","title":"6 Cluster Architecture Update","text":"<p>Now we're going to spin up three Azure VMs in our Vault subnet to form the Vault cluster. </p> <p>And the back\u2011end storage we're going to use for these virtual machines is the integrated storage using the Raft consensus protocol. This means that each virtual machine can just use it's local storage for Vault data. </p> <p>We're going to protect all of our Vault servers with both a network security group and an application security group so only cluster members can talk to each other. </p> <p>For the auto unseal of the Vault, we're going to create a key in Azure Key Vault that will be used to auto unseal each of these nodes as it comes up, so we don't have to worry about logging into each Azure VM and unsealing the Vault on each Azure VM. </p> <p>And then lastly for the front end, we are going to replace our public IP address with a load balancer, and we will ensure that load balancer is properly configured with health checks so that it will always send traffic to the active Vault node in the cluster. </p> <p><code>Vault-Config.hcl</code></p> <pre><code>#HA parameters\ncluster_addr = \"https://LOCAL_IPV4:8201\"\napi_addr = \"https://SERVER_HOSTNAME:8200\"\n\n\n# Listener parameters\nlistener \"tcp\" {\naddress = \"0.0.0.0:8200\"\ncluster_address = \"0.0.0.0:8201\" \n}\n</code></pre> <p>For cluster communications, we can continue to use the local IP address, and Vault will automatically generate a TLS certificate for intra\u2011cluster communications. </p> <p>For the <code>api_addr</code>, we could use the server hostname, but that is not on the certificate, and it's also not exposed for direct access. We've got our servers behind a load balancer. </p>"},{"location":"vault3/5conf_ha/#vault-cluster-demo-overview","title":"Vault Cluster Demo Overview","text":"<ul> <li>Deploy new infrastructure</li> <li>Initialize and validate cluster</li> </ul>"},{"location":"vault3/5conf_ha/#reviewing-the-vault-template","title":"Reviewing the Vault Template","text":"<p><code>vault.tpl</code></p> <p>That's the template file that is going to run when each node starts up.</p> <pre><code>#!/usr/bin/env bash\nset -e -o pipefail\n\n# Terraform variables used: \n# vault_version - version of the Vault binary to download\n# key_vault_secret_id - Id of the Key Vault secret holding the certificates\n# leader_tls_servername - The servername used for the certificate and front end\n# tenant_id - Azure tenant ID for autounseal\n# key_vault_name - Name of Key Vault for autounseal\n# key_vault_key_name - Name of Key in Key Vault for autounseal\n\n# Get the instance name and local ipv4 address\nexport instance_name=\"$(curl -sH Metadata:true --noproxy '*' 'http://169.254.169.254/metadata/instance/compute/name?api-version=2020-09-01&amp;format=text')\"\nexport local_ipv4=\"$(curl -sH Metadata:true --noproxy '*' 'http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/privateIpAddress?api-version=2020-09-01&amp;format=text')\"\n\n# Get the Vault binary\ncurl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\nsudo apt-get update\nsudo apt-get install python3-pip vault=${vault_version} -y\n\n# Install Azure CLI\npip3 install --user 'azure-cli~=2.26.0' 'azure-mgmt-core~=1.2.0' 'cryptography~=3.3.2' 'urllib3[secure]~=1.26.5' 'requests~=2.25.1'\n\n# configuring Azure CLI for use with VM managed identity\n~/.local/bin/az login --identity --allow-no-subscriptions\n\n# removing any default installation files from /opt/vault/tls/\nrm -rf /opt/vault/tls/*\n\n# set up the certificates\ntouch /opt/vault/tls/{vault-cert.pem,vault-ca.pem,vault-key.pem,vault-full.pem}\nchown vault:vault /opt/vault/tls/{vault-cert.pem,vault-ca.pem,vault-key.pem,vault-full.pem}\nchmod 0640 /opt/vault/tls/{vault-cert.pem,vault-ca.pem,vault-key.pem,vault-full.pem}\n\nsecret_result=$(~/.local/bin/az keyvault secret show --id \"${key_vault_secret_id}\" --query \"value\" --output tsv)\n\necho $secret_result | base64 -d | openssl pkcs12 -clcerts -nokeys -passin pass: | openssl x509 -out /opt/vault/tls/vault-cert.pem\n\necho $secret_result | base64 -d | openssl pkcs12 -cacerts -nokeys -chain -passin pass: | openssl x509 -out /opt/vault/tls/vault-ca.pem\n\necho $secret_result | base64 -d | openssl pkcs12 -nocerts -nodes -passin pass: | openssl pkcs8 -nocrypt -out /opt/vault/tls/vault-key.pem\n\necho $secret_result | base64 -d | openssl pkcs12 -nokeys -passin pass: -out /opt/vault/tls/vault-full.pem\n\n# Create config file\n\ncat &lt;&lt;EOF &gt; /etc/vault.d/vault.hcl\n# General parameters\ncluster_name = \"vault-vms\"\nlog_level = \"Info\"\nui = true\n\n# HA parameters\ncluster_addr = \"https://$local_ipv4:8201\"\napi_addr = \"https://${leader_tls_servername}:8200\"\n\nlistener \"tcp\" {\n address     = \"0.0.0.0:8200\"\n cluster_address = \"0.0.0.0:8201\"\n\n tls_disable = 0\n tls_cert_file      = \"/opt/vault/tls/vault-full.pem\"\n tls_key_file       = \"/opt/vault/tls/vault-key.pem\"\n tls_client_ca_file = \"/opt/vault/tls/vault-ca.pem\"\n tls_min_version = \"tls12\"\n}\n\nstorage \"raft\" {\n  path    = \"/opt/vault/data\"\n  node_id = \"$instance_name\"\n  retry_join {\n    leader_tls_servername = \"${leader_tls_servername}\"\n    leader_api_addr = \"https://${leader_tls_servername}:8200\"\n    leader_ca_cert_file = \"/opt/vault/tls/vault-ca.pem\"\n    leader_client_cert_file = \"/opt/vault/tls/vault-cert.pem\"\n    leader_client_key_file = \"/opt/vault/tls/vault-key.pem\"\n  }\n}\n\nseal \"azurekeyvault\" {\n  tenant_id = \"${tenant_id}\"\n  vault_name = \"${key_vault_name}\"\n  key_name = \"${key_vault_key_name}\"\n}\n\nEOF\n\nchown -R vault:vault /etc/vault.d/*\nchmod -R 640 /etc/vault.d/*\n\nsystemctl enable vault\nsystemctl start vault\n</code></pre> <p>seal component to our vault configuration so that auto unseal will work properly with our Azure Key Vault</p>"},{"location":"vault3/5conf_ha/#deploying-the-vault-cluster","title":"Deploying the Vault Cluster","text":"<ul> <li><code>terraform.tf</code></li> </ul> <pre><code># This configuration spins up three Azure VMs that will form\n# the Vault cluster. The virtual machines will be placed behind\n# a public facing load balancer to expose the UI and API port\n\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~&gt; 2.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\n# Used to get tenant ID as needed\ndata \"azurerm_client_config\" \"current\" {}\n</code></pre> <ul> <li><code>vnet.tf</code></li> </ul> <pre><code>resource \"azurerm_resource_group\" \"vault\" {\n  name     = local.resource_group_name\n  location = var.location\n}\n\n# Virtual network with a Vault subnet\nmodule \"vnet\" {\n  source              = \"Azure/vnet/azurerm\"\n  version             = \"~&gt; 2.0\"\n  resource_group_name = azurerm_resource_group.vault.name\n  vnet_name           = azurerm_resource_group.vault.name\n  address_space       = var.address_space\n  subnet_prefixes     = var.subnet_prefixes\n  subnet_names        = var.subnet_names\n\n  subnet_service_endpoints = {\n    (var.subnet_names[0]) = [\"Microsoft.KeyVault\"]\n  }\n\n}\n\nresource \"azurerm_nat_gateway\" \"vault\" {\n  location            = var.location\n  name                = local.nat_gateway_name\n  resource_group_name = azurerm_resource_group.vault.name\n  sku_name            = \"Standard\"\n}\n\nresource \"azurerm_public_ip\" \"vault_nat\" {\n  allocation_method   = \"Static\"\n  location            = var.location\n  name                = \"${local.nat_gateway_name}-vault-nat\"\n  resource_group_name = azurerm_resource_group.vault.name\n  sku                 = \"Standard\"\n}\n\nresource \"azurerm_nat_gateway_public_ip_association\" \"vault\" {\n  nat_gateway_id       = azurerm_nat_gateway.vault.id\n  public_ip_address_id = azurerm_public_ip.vault_nat.id\n}\n\nresource \"azurerm_subnet_nat_gateway_association\" \"vault\" {\n  nat_gateway_id = azurerm_nat_gateway_public_ip_association.vault.nat_gateway_id\n  subnet_id      = module.vnet.vnet_subnets[0]\n}\n</code></pre> <ul> <li><code>vms.tf</code></li> </ul> <pre><code># Generate key pair for all VMs\nresource \"tls_private_key\" \"vault\" {\n  algorithm = \"RSA\"\n  rsa_bits  = \"2048\"\n}\n\n# Write private key out to a file\nresource \"local_file\" \"private_key\" {\n  content  = tls_private_key.vault.private_key_pem\n  filename = \"${path.root}/azure_vms_private_key.pem\"\n}\n\n# Create User Identities for Vault VMs\nresource \"azurerm_user_assigned_identity\" \"vault\" {\n  resource_group_name = azurerm_resource_group.vault.name\n  location            = var.location\n\n  name = local.vault_user_id\n}\n\n##################### vault VM RESOURCES ###################################\nresource \"azurerm_availability_set\" \"vault\" {\n  name                         = local.vault_vm\n  location                     = var.location\n  resource_group_name          = azurerm_resource_group.vault.name\n  platform_fault_domain_count  = 3\n  platform_update_domain_count = 2\n  managed                      = true\n}\n\n\nresource \"azurerm_network_interface\" \"vault\" {\n  count               = var.vault_vm_count\n  name                = \"${local.vault_vm}-${count.index}\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.vault.name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = module.vnet.vnet_subnets[0]\n    private_ip_address_allocation = \"Dynamic\"\n  }\n}\n\n# Associate the network interfaces from the vaults with the vault NSG\nresource \"azurerm_network_interface_security_group_association\" \"vault\" {\n  count                     = var.vault_vm_count\n  network_interface_id      = azurerm_network_interface.vault[count.index].id\n  network_security_group_id = azurerm_network_security_group.vault_nics.id\n}\n\n# Associate the network interfaces from the vaults with the vault ASG for NSG rules\nresource \"azurerm_network_interface_application_security_group_association\" \"vault\" {\n  count                         = var.vault_vm_count\n  network_interface_id          = azurerm_network_interface.vault[count.index].id\n  application_security_group_id = azurerm_application_security_group.vault_asg.id\n}\n\nresource \"azurerm_linux_virtual_machine\" \"vault\" {\n  count               = var.vault_vm_count\n  name                = \"${local.vault_vm}-${count.index}\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.vault.name\n  size                = var.vault_vm_size\n  admin_username      = \"azureuser\"\n  computer_name       = \"vault-${count.index}\"\n  availability_set_id = azurerm_availability_set.vault.id\n  network_interface_ids = [\n    azurerm_network_interface.vault[count.index].id,\n  ]\n\n  admin_ssh_key {\n    username   = \"azureuser\"\n    public_key = tls_private_key.vault.public_key_openssh\n  }\n\n  # Using Standard SSD tier storage\n  # Accepting the standard disk size from image\n  # No data disk is being used\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"StandardSSD_LRS\"\n  }\n\n  #Source image is hardcoded b/c I said so\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"18.04-LTS\"\n    version   = \"latest\"\n  }\n\n  identity {\n    type         = \"UserAssigned\"\n    identity_ids = [azurerm_user_assigned_identity.vault.id]\n  }\n\n  #Custom data from the vault.tmpl file\n  custom_data = base64encode(\n    templatefile(\"${path.module}/vault.tpl\", {\n      vault_version         = var.vault_version\n      tenant_id             = data.azurerm_client_config.current.tenant_id\n      leader_tls_servername = var.leader_tls_servername\n      key_vault_name        = local.key_vault_name\n      key_vault_key_name    = azurerm_key_vault_key.autounseal.name\n      key_vault_secret_id   = azurerm_key_vault_certificate.vault.secret_id\n    })\n  )\n}\n</code></pre> <ul> <li><code>nsg.tf</code></li> </ul> <pre><code># Create Network Security Groups for subnets\nresource \"azurerm_network_security_group\" \"vault_net\" {\n  name                = local.vault_net_nsg\n  location            = var.location\n  resource_group_name = azurerm_resource_group.vault.name\n}\n\nresource \"azurerm_subnet_network_security_group_association\" \"vault\" {\n  subnet_id                 = module.vnet.vnet_subnets[0]\n  network_security_group_id = azurerm_network_security_group.vault_net.id\n}\n\n# Create Network Security Groups for NICs\n\nresource \"azurerm_network_security_group\" \"vault_nics\" {\n  name                = local.vault_nic_nsg\n  location            = var.location\n  resource_group_name = azurerm_resource_group.vault.name\n}\n\n# Create application security groups for Vault VMs\n\nresource \"azurerm_application_security_group\" \"vault_asg\" {\n  name                = local.vault_asg\n  location            = var.location\n  resource_group_name = azurerm_resource_group.vault.name\n}\n\n# Inbound rules for vault subnet nsg\n\nresource \"azurerm_network_security_rule\" \"vault_8200\" {\n  name                                       = \"allow_8200\"\n  priority                                   = 100\n  direction                                  = \"Inbound\"\n  access                                     = \"Allow\"\n  protocol                                   = \"Tcp\"\n  source_port_range                          = \"*\"\n  destination_port_range                     = \"8200\"\n  source_address_prefix                      = \"*\"\n  destination_application_security_group_ids = [azurerm_application_security_group.vault_asg.id]\n  resource_group_name                        = azurerm_resource_group.vault.name\n  network_security_group_name                = azurerm_network_security_group.vault_net.name\n}\n\nresource \"azurerm_network_security_rule\" \"vault_8201\" {\n  name                                       = \"allow_8201\"\n  priority                                   = 110\n  direction                                  = \"Inbound\"\n  access                                     = \"Allow\"\n  protocol                                   = \"Tcp\"\n  source_port_range                          = \"*\"\n  destination_port_range                     = \"8201\"\n  source_application_security_group_ids      = [azurerm_application_security_group.vault_asg.id]\n  destination_application_security_group_ids = [azurerm_application_security_group.vault_asg.id]\n  resource_group_name                        = azurerm_resource_group.vault.name\n  network_security_group_name                = azurerm_network_security_group.vault_net.name\n}\n\nresource \"azurerm_network_security_rule\" \"vault_ssh\" {\n  name                                       = \"allow_ssh\"\n  priority                                   = 120\n  direction                                  = \"Inbound\"\n  access                                     = \"Allow\"\n  protocol                                   = \"Tcp\"\n  source_port_range                          = \"*\"\n  destination_port_range                     = \"22\"\n  source_address_prefix                      = \"${data.http.my_ip.body}/32\" # Restrict to your public IP address\n  destination_application_security_group_ids = [azurerm_application_security_group.vault_asg.id]\n  resource_group_name                        = azurerm_resource_group.vault.name\n  network_security_group_name                = azurerm_network_security_group.vault_net.name\n}\n\n# Inbound rules for vault nic nsg\n\nresource \"azurerm_network_security_rule\" \"vault_nic_8200\" {\n  name                                       = \"allow_8200\"\n  priority                                   = 100\n  direction                                  = \"Inbound\"\n  access                                     = \"Allow\"\n  protocol                                   = \"Tcp\"\n  source_port_range                          = \"*\"\n  destination_port_range                     = \"8200\"\n  source_address_prefix                      = \"*\"\n  destination_application_security_group_ids = [azurerm_application_security_group.vault_asg.id]\n  resource_group_name                        = azurerm_resource_group.vault.name\n  network_security_group_name                = azurerm_network_security_group.vault_nics.name\n}\n\nresource \"azurerm_network_security_rule\" \"vault_nic_8201\" {\n  name                                       = \"allow_8201\"\n  priority                                   = 110\n  direction                                  = \"Inbound\"\n  access                                     = \"Allow\"\n  protocol                                   = \"Tcp\"\n  source_port_range                          = \"*\"\n  destination_port_range                     = \"8201\"\n  source_application_security_group_ids      = [azurerm_application_security_group.vault_asg.id]\n  destination_application_security_group_ids = [azurerm_application_security_group.vault_asg.id]\n  resource_group_name                        = azurerm_resource_group.vault.name\n  network_security_group_name                = azurerm_network_security_group.vault_nics.name\n}\n\nresource \"azurerm_network_security_rule\" \"vault_nic_ssh\" {\n  name                                       = \"allow_ssh\"\n  priority                                   = 120\n  direction                                  = \"Inbound\"\n  access                                     = \"Allow\"\n  protocol                                   = \"Tcp\"\n  source_port_range                          = \"*\"\n  destination_port_range                     = \"22\"\n  source_address_prefix                      = \"${data.http.my_ip.body}/32\" # Restrict to your public IP address\n  destination_application_security_group_ids = [azurerm_application_security_group.vault_asg.id]\n  resource_group_name                        = azurerm_resource_group.vault.name\n  network_security_group_name                = azurerm_network_security_group.vault_nics.name\n}\n</code></pre> <ul> <li><code>keyvault.tf</code></li> </ul> <pre><code>\n# Get your current IP address to provide access to Key Vault in the network acls\ndata \"http\" \"my_ip\" {\n  url = \"http://ifconfig.me\"\n}\n\n# Create key vault and access policies\nresource \"azurerm_key_vault\" \"vault\" {\n  name                       = local.key_vault_name\n  location                   = var.location\n  resource_group_name        = azurerm_resource_group.vault.name\n  tenant_id                  = data.azurerm_client_config.current.tenant_id\n  enabled_for_deployment     = true\n  soft_delete_retention_days = 7\n  purge_protection_enabled   = false\n\n  sku_name = \"standard\"\n\n  # Only allow access to the Key Vault from your public IP address and the vault \n  # subnet.\n  network_acls {\n    default_action             = \"Deny\"\n    bypass                     = \"AzureServices\"\n    ip_rules                   = [\"${data.http.my_ip.body}/32\"]\n    virtual_network_subnet_ids = [module.vnet.vnet_subnets[0]]\n\n  }\n\n}\n\n# Access policy for vault VMs\n# Uses the vault user assigned identity\nresource \"azurerm_key_vault_access_policy\" \"vault\" {\n  key_vault_id = azurerm_key_vault.vault.id\n\n  tenant_id = data.azurerm_client_config.current.tenant_id\n  object_id = azurerm_user_assigned_identity.vault.principal_id\n\n  key_permissions = [\n    \"get\", \"list\", \"update\", \"create\", \"decrypt\", \"encrypt\", \"unwrapKey\", \"wrapKey\", \"verify\", \"sign\",\n  ]\n\n  secret_permissions = [\n    \"get\", \"list\",\n  ]\n\n  certificate_permissions = [\n    \"get\", \"list\",\n  ]\n}\n\n# Access policy allowing your credentials full access to Key Vault\nresource \"azurerm_key_vault_access_policy\" \"you\" {\n  key_vault_id = azurerm_key_vault.vault.id\n\n  tenant_id = data.azurerm_client_config.current.tenant_id\n  object_id = data.azurerm_client_config.current.object_id\n\n  key_permissions = [\n    \"get\", \"list\", \"update\", \"create\", \"decrypt\", \"encrypt\", \"unwrapKey\", \"wrapKey\", \"verify\", \"sign\", \"delete\", \"purge\",\n  ]\n\n  secret_permissions = [\n    \"get\", \"list\", \"set\", \"delete\", \"purge\",\n  ]\n\n  certificate_permissions = [\n    \"get\", \"list\", \"create\", \"import\", \"delete\", \"update\", \"purge\",\n  ]\n}\n\n# Create a key for Vault autounseal\nresource \"azurerm_key_vault_key\" \"autounseal\" {\n  depends_on   = [azurerm_key_vault_access_policy.you]\n  name         = \"${local.resource_group_name}-autounseal\"\n  key_vault_id = azurerm_key_vault.vault.id\n  key_type     = \"RSA\"\n  key_size     = 2048\n\n  key_opts = [\n    \"decrypt\",\n    \"encrypt\",\n    \"sign\",\n    \"unwrapKey\",\n    \"verify\",\n    \"wrapKey\",\n  ]\n}\n\n# Create a certificate in Key Vault for the Vault server\nresource \"azurerm_key_vault_certificate\" \"vault\" {\n  depends_on   = [azurerm_key_vault_access_policy.you]\n  name         = \"${local.resource_group_name}-cert\"\n  key_vault_id = azurerm_key_vault.vault.id\n\n  certificate {\n    contents = filebase64(var.cert_pfx_file_path)\n    password = \"\"\n  }\n\n  certificate_policy {\n    issuer_parameters {\n      name = \"Self\"\n    }\n\n    key_properties {\n      exportable = true\n      key_size   = 2048\n      key_type   = \"RSA\"\n      reuse_key  = false\n    }\n\n    secret_properties {\n      content_type = \"application/x-pkcs12\"\n    }\n  }\n}\n</code></pre> <ul> <li><code>lb.tf</code></li> </ul> <pre><code># Create a public IP address for the load balancer\n# The domain label is based on the resource group name\nresource \"azurerm_public_ip\" \"vault\" {\n  name                = local.pip_name\n  resource_group_name = azurerm_resource_group.vault.name\n  location            = azurerm_resource_group.vault.location\n  allocation_method   = \"Static\"\n  domain_name_label   = lower(azurerm_resource_group.vault.name)\n  sku                 = \"Standard\"\n}\n\n# Create a load balancer for vault to use\nresource \"azurerm_lb\" \"vault\" {\n  name                = local.lb_name\n  location            = azurerm_resource_group.vault.location\n  resource_group_name = azurerm_resource_group.vault.name\n  sku                 = \"Standard\"\n\n  frontend_ip_configuration {\n    name                 = \"PublicIPAddress\"\n    public_ip_address_id = azurerm_public_ip.vault.id\n  }\n}\n\n# Create an address pool for the Vault servers\nresource \"azurerm_lb_backend_address_pool\" \"pool\" {\n  loadbalancer_id = azurerm_lb.vault.id\n  name            = \"vault-servers\"\n}\n\n# Associate all vault NICs with the backend pool\nresource \"azurerm_network_interface_backend_address_pool_association\" \"vault\" {\n  count                   = var.vault_vm_count\n  backend_address_pool_id = azurerm_lb_backend_address_pool.pool.id\n  ip_configuration_name   = \"internal\"\n  network_interface_id    = azurerm_network_interface.vault[count.index].id\n}\n\n# All health probe for vault nodes\nresource \"azurerm_lb_probe\" \"vault_8200\" {\n  resource_group_name = azurerm_resource_group.vault.name\n  loadbalancer_id     = azurerm_lb.vault.id\n  name                = \"port-8200\"\n  protocol            = \"Https\"\n  port                = 8200\n  request_path        = \"/v1/sys/health?activecode=200&amp;standbycode=429&amp;sealedcode=200&amp;uninitcode=200\"\n}\n\n# Add LB rule for vault\nresource \"azurerm_lb_rule\" \"vault\" {\n  resource_group_name            = azurerm_resource_group.vault.name\n  loadbalancer_id                = azurerm_lb.vault.id\n  name                           = \"vault\"\n  protocol                       = \"Tcp\"\n  frontend_port                  = 8200\n  backend_port                   = 8200\n  frontend_ip_configuration_name = \"PublicIPAddress\"\n  probe_id                       = azurerm_lb_probe.vault_8200.id\n  backend_address_pool_id        = azurerm_lb_backend_address_pool.pool.id\n}\n\n# Add an NAT rule for the vault node using port 2022 \n# This is so you can SSH into the vault to troubleshoot \n# deployment issues.\nresource \"azurerm_lb_nat_rule\" \"vault\" {\n  resource_group_name            = azurerm_resource_group.vault.name\n  loadbalancer_id                = azurerm_lb.vault.id\n  name                           = \"ssh-vault\"\n  protocol                       = \"Tcp\"\n  frontend_port                  = 2022\n  backend_port                   = 22\n  frontend_ip_configuration_name = \"PublicIPAddress\"\n}\n\n# Associate the NAT rule with the first vault VM\nresource \"azurerm_network_interface_nat_rule_association\" \"vault\" {\n  network_interface_id  = azurerm_network_interface.vault[0].id\n  ip_configuration_name = \"internal\"\n  nat_rule_id           = azurerm_lb_nat_rule.vault.id\n}\n</code></pre> <ul> <li><code>variables.tf</code></li> </ul> <pre><code>variable \"location\" {\n  type    = string\n  default = \"East US\"\n}\n\nvariable \"address_space\" {\n  type    = list(string)\n  default = [\"10.0.0.0/16\"]\n}\n\nvariable \"subnet_prefixes\" {\n  type = list(string)\n  default = [\n    \"10.0.0.0/24\",\n  ]\n}\n\nvariable \"subnet_names\" {\n  type = list(string)\n  default = [\n    \"vault-servers\",\n  ]\n}\n\nvariable \"vault_vm_size\" {\n  type    = string\n  default = \"Standard_B2ms\"\n}\n\nvariable \"vault_vm_count\" {\n  type    = number\n  default = 3\n}\n\nvariable \"cert_pfx_file_path\" {\n  type        = string\n  description = \"The full path to the pfx file to be used for Vault\"\n  default     = \"vm-certificate-to-import.pfx\"\n}\n\nvariable \"leader_tls_servername\" {\n  type        = string\n  description = \"The fqdn used to generate the certificate.\"\n}\n\nvariable \"vault_version\" {\n  type        = string\n  description = \"The version of the Vault binary to download.\"\n  default     = \"1.8.0\"\n}\nresource \"random_id\" \"id\" {\n  byte_length = 4\n}\n\nlocals {\n  resource_group_name = \"vault-${random_id.id.hex}\"\n\n  vault_net_nsg = \"vault-net-${random_id.id.hex}\"\n\n  vault_nic_nsg = \"vault-nic-${random_id.id.hex}\"\n\n  vault_asg = \"vault-asg-${random_id.id.hex}\"\n\n  vault_vm = \"vault-${random_id.id.hex}\"\n\n  vault_user_id = \"vault-userid-${random_id.id.hex}\"\n\n  pip_name = \"vault-${random_id.id.hex}\"\n  lb_name  = \"vault-${random_id.id.hex}\"\n\n  key_vault_name = \"vault-${random_id.id.hex}\"\n\n  nat_gateway_name = \"vault-${random_id.id.hex}\"\n\n}\n</code></pre> <ul> <li><code>outputs.tf</code></li> </ul> <pre><code># The dns label from the load balancer\noutput \"public_dns_name\" {\n  value = azurerm_public_ip.vault.fqdn\n}\n\n# The public IP address of the load balancer\noutput \"public_ip_address\" {\n  value = azurerm_public_ip.vault.ip_address\n}\n</code></pre>"},{"location":"vault3/5conf_ha/#deploy-infrastructure","title":"deploy infrastructure","text":"<pre><code># First we are going to initialize the Terraform config\nterraform init\n</code></pre> <p>we'll copy over the certificate file we'll use for the deployment</p> <p><code>vm-certificate-to-import.pfx</code></p> <p>Provisioning the AKS Certificate\uff083deploy_vault.md)</p> <pre><code># Next we are going to plan our deployment\n# Make sure to change the YOUR_CERTIFICATE_CN to the fqdn on\n# your TLS certificate. Ex. vault-vms.globomantics.xyz\ncertificate_cn=YOUR_CERTIFICATE_CN\n\nterraform plan -var leader_tls_servername=$certificate_cn -out azurevm.tfplan\n\n# Now we'll apply the plan to create the resources\nterraform apply azurevm.tfplan\n</code></pre> <p></p> <p></p>"},{"location":"vault3/5conf_ha/#initializing-and-validating-the-vault-cluster","title":"Initializing and Validating the Vault Cluster","text":"<p><code>lb.tf</code></p> <p>here is the load balancer health probe that's used to test the health of the nodes in the Vault cluster. </p> <pre><code>azurerm_lb_probe\n...\nrequest_path = \"/v1/sys/health?activecode=200&amp;standbycode=429&amp;sealedcode=200&amp;uninitcode=200\"\n</code></pre> <p>it's looking at <code>v1/sys/health</code>, and it's passing some parameters to the request. </p> <p>The first setting, activecode, says if you're the active Vault server, I want you to respond with a 200, also known as an httpok. </p> <p>If you are a standby server, the second setting, standbycode, says respond with the code 429, which means you're no good, don't send requests to that node. </p> <p>And that's how the health probe in the load balancer knows which node to send traffic to. There's two more settings in here, sealedcode and uninitcode. </p> <p>If the Vault is sealed or uninitialized, then it should respond with a 200, meaning that you haven't initialized the cluster yet, so there is no active node, so just send it to any node and then persist that session. </p>"},{"location":"vault3/5conf_ha/#vault-replication","title":"Vault Replication","text":"<ul> <li>Enterprise only</li> </ul> <p>Vault replication is actually replication between clusters</p> <ul> <li>Cluster is unit of replication</li> </ul> <p>we're not talking about intra\u2011cluster replication; we're talking about inter\u2011cluster replication</p> <ul> <li> <p>Replication is one-to-many</p> <ul> <li>The model for replication is one to many, so a single Vault cluster, that's the primary, can replicate to multiple secondary clusters.(replication process is that it is asynchronous)</li> <li>Committed and completed on the primary Vault cluster before it is replicated to the secondary Vault clusters</li> <li>That could lead to some small amount of data loss if the primary cluster goes down and clients switch over to a secondary cluster.    </li> </ul> </li> <li> <p>Replication is asynchronous</p> </li> </ul>"},{"location":"vault3/5conf_ha/#replication-options","title":"Replication Options","text":"<ul> <li>replication is disaster recovery.</li> <li>For that reason, disaster recovery replication replicates not just the Vault data but also the active tokens and leases. </li> <li>No requests to secondaries</li> </ul> <p>So if a client is redirected from the primary cluster to the secondary cluster, all of their tokens and leases will continue to work. </p>"},{"location":"vault3/5conf_ha/#performance","title":"Performance","text":"<p>You could set up a secondary cluster and enable it for performance. </p> <p>It will replicate the Vault data from the primary cluster and make it available in a read\u2011only format for requests coming from clients. </p> <p>Any requests that make changes to the Vault data will need to be forwarded along to the primary cluster. </p> <p>Performance clusters do not replicate tokens and leases, so if a client is using a secondary performance cluster and needs to switch over to the primary or vice versa, it's going to need to renew its lease or token.</p>"},{"location":"vault3/5conf_ha/#module-summary","title":"Module Summary","text":"<ul> <li>Vault clusters run in an active/standby model</li> <li>Vault clusters require HA storage</li> <li>Vault client communication can be forwarded or redirected</li> <li>Replication is between Vault clusters supporting DR or performance</li> </ul>"},{"location":"vault3/6basic_auth/","title":"L6 Configuring Basic Authentication","text":""},{"location":"vault3/6basic_auth/#overview","title":"Overview","text":"<p>After you've initialized and unsealed your Vault cluster, you now have this root token that's kind of hanging around, and the root token's pretty dangerous</p> <p>So we'd like to replace that root token with some other form of authentication.</p> <ul> <li>Review auth methods</li> <li>Review policies</li> <li>Globomantics requirements</li> </ul>"},{"location":"vault3/6basic_auth/#authentication-methods-review","title":"Authentication Methods Review","text":"<p>Vault Auth Methods</p> <ul> <li>Provided by plug-ins</li> <li>Multiple methods allowed</li> </ul> <p>Authentication methods are provided by plugins, and there's several plugins that are provided by default with the installation of Vault server, but you can also load your own custom plugins for special authentication methods</p> <ul> <li>Reference external sources<ul> <li> <ul> <li>LDAP, GitHub, AWS IAM, etc.</li> </ul> </li> </ul> </li> </ul> <p>Authentication methods refer to external sources of authentication, things you already have in your environment like LDAP or Active Directory, maybe you want to use GitHub accounts, or you could use AWS IAM accounts as your external source for authentication. </p> <ul> <li>Token method is enabled by default</li> </ul> <p>Vault will trust those sources to perform the authentication and then pass the authentication process back to Vault server. </p> <p>When you first install and configure Vault server, the only authentication method that's enabled is the token method. And that's how the root token is generated.</p> <ul> <li>Used to obtain a token</li> </ul> <p>When a client wants to interact with your Vault cluster, they're going to need a token. </p> <p>Vault will trust those sources to perform the authentication and then pass the authentication process back to Vault server. </p> <p>When you first install and configure Vault server, the only authentication method that's enabled is the token method. And that's how the root token is generated. </p> <p>All the other authentication methods in Vault are really just there to obtain a token, and then the token is used for all subsequent requests to the Vault cluster. </p>"},{"location":"vault3/6basic_auth/#username-password","title":"Username &amp; Password","text":"<ul> <li>Meant for human operators</li> <li>Composed of a username and password</li> <li> <p>Internal to Vault</p> </li> <li> <p>The username and password authentication method is available on Vault server, and it's meant for human operators, someone like a Vault administrator perhaps. </p> </li> <li>The nice thing about username and password, which is also called userpass, is that it is internal to Vault. </li> <li>It doesn't rely on an external authentication source. Which means if something happens to your external authentication source, say Active Directory is down or you can't get out to AWS IAM, you can still use userpass to authenticate to Vault. </li> </ul>"},{"location":"vault3/6basic_auth/#authentication-method-configuration","title":"Authentication Method Configuration","text":"<ul> <li>All methods are enabled on <code>/sys/auth</code></li> <li>Methods are enabled on a path<ul> <li>Defaults to method name</li> </ul> </li> <li>Methods cannot be moved</li> </ul> <p>You could disable it and reenable it on a new path, but you'll lose all the data that was stored at the original path for the authentication method.</p> <ul> <li>Methods can be tuned and configured<ul> <li>Tuning settings are common for all methods</li> <li>Configuration settings are specific to a  method</li> </ul> </li> </ul> <p>An important thing to understand about authentication methods is that they cannot be moved after they've been enabled. </p> <p>You can't change the path where your authentication method is. </p> <p>Configuration settings are specific to a method. For instance, the settings you need for the AWS IAM authentication method are going to be a little bit different than what you use for LDAP, and those are configured with the write command along the path for the authentication method.</p>"},{"location":"vault3/6basic_auth/#auth-method-commands","title":"Auth Method Commands","text":"<pre><code># List existing auth methods\nvault auth list\n\n# Enable an auth method\nvault auth enable [options] TYPE\nvault auth enable \u2013path=globopass userpass\n\n\n# Tune an auth method\nvault auth tune [options] PATH\nvault auth tune \u2013description=\"First userpass\" globopass/\n\n# Disable an auth method\nvault auth disable [options] PATH\nvault auth disable globopass/\n</code></pre>"},{"location":"vault3/6basic_auth/#dev-requirements","title":"Dev Requirements","text":"<ul> <li>Revoke root tokens as soon as possible</li> <li>Well defined permissions for Vault admins</li> </ul>"},{"location":"vault3/6basic_auth/#auth-methods-demo-overview","title":"Auth Methods Demo Overview","text":"<pre><code># Set your Vault address environment variable\n# Ex. vault-vms.globomantics.xyz\nexport VAULT_ADDR=https://VAULT_SERVER_FQDN:8200\n\n# And log into Vault using the root token\nvault login \n\nKey                      Value\n---                      --- \ntoken                    s.lTiyARrCtkILBpMpJROhS418\ntoken_accessor    N7SOwDyvdVLYpKqLLBbiuDN3\ntoken_duration   \ntoken_renewable  false\ntoken_policies   [\"root\"]\nidentity_policies []\npolicies           [\"root\"]\n</code></pre> <pre><code># First let's see what auth methods are avilable now\nvault auth list\n\n$vault auth list\nPath       Type      Accessor            Description\ntoken/  token  auth_token_b8c48497  token based credentials\n</code></pre> <pre><code># Cool, now let's enable our first auth method using userpass\nvault auth enable userpass\n\n\n# Now let's check the list of auth methods again\n$vault auth list\nPath       Type      Accessor            Description\ntoken/     token  auth_token_b8c48497  token based credentials\nuserpass/ userpass auth_userpass_b6134075 n/a\n\n# add descriptions\nvault auth tune -description=\"Globomantics Userpass\" userpass/\nSuccess! Tuned the auth method at: userpass/\n\n# Now let's check the list of auth methods again\n$vault auth list\nPath       Type      Accessor            Description\ntoken/     token  auth_token_b8c48497  token based credentials\nuserpass/ userpass auth_userpass_b6134075 Globomantics Userpass\n</code></pre> <pre><code># Let's write some data to create a new user\n\nvault write auth/userpass/users/testadmin password=testpassword\n</code></pre>"},{"location":"vault3/6basic_auth/#vault-policies-review","title":"Vault Policies Review","text":"<p>Vault policies are the means by which permissions are assigned to tokens.</p> <ul> <li>Policies define permissions in Vault</li> <li>Multiple options for assignment<ul> <li> <ul> <li>Token, identity, auth methods</li> </ul> </li> </ul> </li> </ul> <p>Vault policies are what defines permissions in Vault, and you have multiple options for where policies can be assigned. </p> <p>You can assign a policy at the token level, you can use the internal Identity secrets engine or you can assign it within one of the authentication methods that you've enabled  </p> <ul> <li>Most specific wins</li> </ul> <p>If you have a situation where a token has multiple overlapping policies assigned to it, the most specific policy wins. </p> <ul> <li>No versioning</li> </ul> <p>Another important thing to note about Vault policies is that there's no versioning of policies. When you update a policy in Vault, it doesn't write a new version of the policy, it overwrites the existing policy in place.</p> <p>So if you're planning to version your policies, you're going to have to do that outside of the context of Vault</p> <ul> <li>Default policy</li> </ul> <p>The default policy can be edited, but it cannot be deleted. </p> <ul> <li>Root policy</li> </ul> <p>The other special policy is the root policy. The root policy is what's assigned to the root token, and it can do anything. You also cannot edit the root policy, and you cannot delete it.</p>"},{"location":"vault3/6basic_auth/#policy-syntax","title":"Policy Syntax","text":"<ul> <li>HCL or JSON</li> </ul> <p>Vault policies are written in either HCL or in JSON.</p> <ul> <li>Path</li> </ul> <p>The first one is a path. The path defines where you're specifying permissions in Vault server.</p> <ul> <li>Capabilities</li> </ul> <p>Within the configuration block for the path, you specify the capabilities that you want to allow or deny for that path. </p>"},{"location":"vault3/6basic_auth/#working-with-policies","title":"Working with Policies","text":"<pre><code># List existing policies\nvault policy list\n\n# Read the contents of a policy\nvault policy read [options] NAME\nvault policy read secrets-mgmt\n\n# Write a new policy or update an existing policy\nvault policy write [options] NAME PATH | &lt;stdin&gt;\nvault policy write secrets-mgmt secrets-mgmt.hcl\n\n# Delete a policy\nvault policy delete [options] NAME\nvault policy delete secrets-mgmt\n\n# Format a policy per HCL guidelines\nvault policy fmt [options] PATH\nvault policy fmt secrets-mgmt.hcl\n</code></pre>"},{"location":"vault3/6basic_auth/#polices-demo","title":"Polices Demo","text":"<ul> <li>Create an admin policy</li> <li>Assign the admin policy</li> <li>Revoke the current root token</li> </ul>"},{"location":"vault3/6basic_auth/#assigning-the-admin-policy","title":"Assigning the Admin Policy","text":"<pre><code># First we can check and see what policies exist right now\n$ vault policy list \ndefault\nroot\n</code></pre> <p>Now we'll create a policy for Vault administration </p> <p>This policy is based off an example provided by HashiCorp</p> <p><code>vault-admins.hcl</code></p> <pre><code># Allow managing leases\npath \"sys/leases/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# Manage auth backends broadly across Vault\npath \"auth/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# List, create, update, and delete auth backends\npath \"sys/auth/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"sudo\"]\n}\n\n# List existing policies\npath \"sys/policies\"\n{\n  capabilities = [\"read\"]\n}\n\n# Create and manage ACL policies broadly across Vault\npath \"sys/policies/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# List, create, update, and delete key/value secrets\npath \"secret/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# Manage and manage secret backends broadly across Vault.\npath \"sys/mounts/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# List existing secret engines.\npath \"sys/mounts\"\n{\n  capabilities = [\"read\"]\n}\n\n# Read health checks\npath \"sys/health\"\n{\n  capabilities = [\"read\", \"sudo\"]\n}\n</code></pre> <pre><code>vault policy write vault-admins vault-admins.hcl\n\n$ vault policy list\ndefault\nvault-admins\nroot\n\n# Next we can assign the policy to the globoadmin user\nvault write auth/userpass/users/testadmin token_policies=\"vault-admins\"\n\n# Now we can log in as testadmin and a few actions\nvault login -method=userpass username=testadmin\n\n# List all secrets engines\n$ vault secrets list\n\nPath       Type      Accessor     Description\ncubbyhole/ cubbyhole cubbyhole_06c1ad2e per-token private secret storage\nidentity/  identity  identity_5b5760de  identity store\nsys/       system    system_a66b4ae1    system endpoints used for control, policy and debugging\n\n\n# Enable a secrets engine\nvault secrets enable -path=testing -version=1 kv\n\n$ vault secrets list\nPath       Type      Accessor     Description\ncubbyhole/ cubbyhole cubbyhole_06c1ad2e per-token private secret storage\nidentity/  identity  identity_5b5760de  identity store\nsys/       system    system_a66b4ae1    system endpoints used for control, policy and debugging\ntesting/   kv       kv_f80de1d4    n/a\n\n\n\n# Let's revoke the current root token \n# and use the admin account from here on out\nvault token revoke ROOT_TOKEN\n\n$ vault token revoke s.ITiyARrCtkILBpMpJROhS418\nSuccess! Revoked token (if it existed)\n\n$vault login\nToken (will be hidden):\nError authenticating: error looking up token: Error making API request.\n</code></pre>"},{"location":"vault3/6basic_auth/#module-summary","title":"Module Summary","text":"<ul> <li>Auth methods are used to obtain a Vault token</li> <li>Policies define the permissions associated with a token</li> <li>Root tokens are not meant for administrative work</li> </ul>"},{"location":"vault3/7vaba_secret_engine/","title":"L7 Using Secrets Engines","text":""},{"location":"vault3/7vaba_secret_engine/#1-overview","title":"1 Overview","text":"<p>The whole purpose behind setting up Vault is to manage your sensitive data.</p> <p>We've set up our Vault cluster, we've configured access to that Vault cluster, now it's time to set up a couple secrets engines to manage sensitive data.</p>"},{"location":"vault3/7vaba_secret_engine/#2-vault-secrets-engines-review","title":"2 Vault Secrets Engines Review","text":"<p>Secrets engines are plugins used by Vault to handle sensitive data</p>"},{"location":"vault3/7vaba_secret_engine/#store","title":"Store","text":"<ul> <li>Sensitive data is stored</li> <li>securely by Vault</li> </ul> <p>The sensitive data is stored securely by Vault by one of the secrets engines.</p>"},{"location":"vault3/7vaba_secret_engine/#generate","title":"Generate","text":"<ul> <li>Vault generates and</li> <li>manages sensitive data</li> </ul> <p>You can also use Vault to generate and manage secret data.</p> <p>In this case, Vault doesn't just store the data, it actually generates it through one of these plugins.</p> <p>A good example of this would be the Azure identity secrets engine that has the capability to generate Azure credentials that you can use, and it also manages the lifecycle of those credentials.</p>"},{"location":"vault3/7vaba_secret_engine/#encrypt","title":"Encrypt","text":"<p>Vault provides encryption services for existing data</p> <p>It is simply providing encryption services for data you submit to Vault, and that actual data is never stored by Vault itself.</p>"},{"location":"vault3/7vaba_secret_engine/#2-key-value-engine","title":"2 Key Value Engine","text":"<p>Store key/value pairs at a path</p> <p>Version 1 and 2  available</p> <p>In particular, you can now version the key\u2011value pairs that are stored at a path. When you write a new key\u2011value pair to that path, it holds previous versions so you can revert to those.</p> <p>Versioning and metadata</p>"},{"location":"vault3/7vaba_secret_engine/#3-transit-engine","title":"3 Transit Engine","text":"<ul> <li>Encryption as a service</li> <li>Does not store data</li> <li> <p>Supported actions:</p> </li> <li> <p>Encrypt/decrypt</p> </li> <li>Sign and verify</li> <li>Generate hashes</li> <li>Create random bytes</li> <li>Engine manages keys</li> </ul>"},{"location":"vault3/7vaba_secret_engine/#exp-requirements","title":"Exp Requirements","text":"<ul> <li>Enable a K/V secrets engine for developers</li> <li>Enable a Transit secrets engine for DBAs</li> </ul>"},{"location":"vault3/7vaba_secret_engine/#enabling-secrets-engines","title":"Enabling Secrets Engines","text":""},{"location":"vault3/7vaba_secret_engine/#configuring-secrets-engines","title":"Configuring Secrets Engines","text":"<p>Engines are enabled on a path</p> <p>Defaults to engine name</p> <p>All engines are enabled on <code>/sys/mounts</code></p>"},{"location":"vault3/7vaba_secret_engine/#engines-can-be-moved","title":"Engines can be moved","text":"<ul> <li>Revokes all existing leases</li> <li>May impact policies</li> </ul> <p>This is a disruptive action. It's going to revoke all existing leases associated with that secrets engine, and it may also impact your ACL policies because those are defined by paths, and since the path is changing, the policies you have may no longer apply to the updated path for the secrets engine.</p>"},{"location":"vault3/7vaba_secret_engine/#engines-can-be-tuned-and-configured","title":"Engines can be tuned and configured","text":"<ul> <li>Tuning settings are common for all engines</li> <li>Configuration settings are specific to an engines</li> </ul> <p>tuning refers to settings that are common for all secrets engines, whereas configuration settings are specific to an engine.</p> <p>For instance, if you're using the AWS secrets engine, the configuration settings are going to be a little bit different than if you're using a MySQL secrets engine.</p>"},{"location":"vault3/7vaba_secret_engine/#working-with-secrets-engines","title":"Working with Secrets Engines","text":"<pre><code># List existing secrets engines\nvault secrets list\n\n# Enable a new secrets engine\nvault secrets enable [options] TYPE\nvault secrets enable \u2013path=GloboKV kv\n\n\n# Tune a secrets engine setting\nvault secrets tune [options] PATH\nvault secrets tune \u2013description=\"Globomantics Default KV\" GloboKV\n\n# Move an existing secrets engine\nvault secrets move [options] SOURCE DEST\nvault secrets move GloboKV GloboKV1\n\n\n# Disable a secrets engine\nvault secrets disable [options] PATH\nvault secrets disable GloboKV1\n</code></pre>"},{"location":"vault3/7vaba_secret_engine/#secrets-engines-demo","title":"Secrets Engines Demo","text":"<ul> <li>Enable the K/V engine</li> <li>Enable Transit engine</li> <li>Create policies for both engines</li> <li>Verify functionality</li> </ul> <pre><code># Set your Vault address environment variable\n# Ex. vault-vms.globomantics.xyz\nexport VAULT_ADDR=https://VAULT_SERVER_FQDN:8200\n\n# And log into Vault using the globoadmin user\nvault login -method=userpass username=globoadmin\n\n# We are going to enable a v2 KV secrets engine called website\n\n# Let's first see which secrets engines are enabled\n\nvault secrets list\n\n# Now let's get our secrets engines enabled\n\nvault secrets enable -path=website -version=2 kv\n\nvault secrets enable -path=dbas transit\n\n# And verify they exist\nvault secrets list\n</code></pre>"},{"location":"vault3/7vaba_secret_engine/#enabling-the-secrets-engines","title":"Enabling the Secrets Engines","text":"<pre><code># Now we'll create a policy for the two secrets engines\n\n# First up we'll create a policy for the devs to do whatever\n# they want in the website KV engine\nvault policy write website-devs kv-policy.hcl\n\n# Now we'll create one for the transit engine\n# Except we'll only allow encrypt and decrypt operations\nvault policy write transit-dbas transit-policy.hcl\n</code></pre>"},{"location":"vault3/7vaba_secret_engine/#kv-policyhcl","title":"<code>kv-policy.hcl</code>","text":"<pre><code># Allow access to all website secrets\npath \"website/data/*\" {\n    capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\n\n# Allow access to metadata for kv2\npath \"website/metadata/*\" {\n    capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\n</code></pre>"},{"location":"vault3/7vaba_secret_engine/#transit-policyhcl","title":"<code>transit-policy.hcl</code>","text":"<pre><code># Allow access to list keys\npath \"dbas/keys\" {\n    capabilities = [\"list\"]\n}\n\n# Allow access to encrypt and decrypt data\npath \"dbas/encrypt/*\" {\n    capabilities = [\"create\",\"update\"]\n}\n\npath \"dbas/decrypt/*\" {\n    capabilities = [\"update\"]\n}\n</code></pre>"},{"location":"vault3/7vaba_secret_engine/#creating-policies-for-the-secrets-engines","title":"Creating Policies for the Secrets Engines","text":"<pre><code># Generate a token for the website k/v engine\nvault token create -policy=\"website-devs\"\n</code></pre> <pre><code># Log in with the token\nvault login\n\n# Try to add a secret\nvault kv put website/apitokens/d101 token=8675309\n\n# Nice, let's read one of the values\nvault kv get website/apitokens/d101\n</code></pre> <pre><code># Finally we can delete it and let the devs do their thing\nvault kv delete website/apitokens/d101\n\n# Now let's generate a token to test the transit engine\n\n# Log back in as globoadmin\nvault login -method=userpass username=globoadmin\n</code></pre> <pre><code># Create the token \nvault token create -policy=\"transit-dbas\"\n\n# Log in with the token\nvault login\n</code></pre> <pre><code># First we'll encrypt some data\nvault write dbas/encrypt/key1 plaintext=$(base64 &lt;&lt;&lt; \"solongandthanks\")\n</code></pre> <pre><code># And now we'll try to decrypt the ciphertext\nciphertext=CIPHERTEXT\n\nvault write dbas/decrypt/key1 ciphertext=$ciphertext\n\necho PLAINTEXT | base64 -d\n</code></pre>"},{"location":"vault3/7vaba_secret_engine/#module-summary","title":"Module Summary","text":"<ul> <li>Secrets engines are Vault plug-ins that can store, generate, and encrypt data.</li> <li>The K/V engine stores static values as key value pairs</li> <li>The Transit engine provides encryption as a service</li> </ul>"},{"location":"vault3/8vaba_monitor/","title":"L8 Configuring Auditing and Monitoring","text":"<ul> <li>Vault server logging</li> <li>Auditing activity</li> <li>Hardening Vault server</li> </ul>"},{"location":"vault3/8vaba_monitor/#monitoring-disambiguation","title":"Monitoring Disambiguation","text":"<p>Monitoring</p>"},{"location":"vault3/8vaba_monitor/#telemetry","title":"Telemetry","text":"<p>These are metrics that you collect about your system, how many IOPS your disk system is using, how much memory is being utilized, how many transactions you can process per minute. It's about health, and performance, and metrics</p>"},{"location":"vault3/8vaba_monitor/#logging","title":"Logging","text":"<p>Then there's logging, and logging is just writing down in a file or in some sort of collection utility what is happening with the system</p> <p>And the logging can come from the operating system itself, or it could come from the applications that are running on the system.</p> <p>It is specific to what's happening with those services and that system.</p>"},{"location":"vault3/8vaba_monitor/#auditing","title":"Auditing","text":"<p>Auditing likes to take a look at how users are utilizing the system, what actions they're performing on the system</p>"},{"location":"vault3/8vaba_monitor/#vault-server-logs","title":"Vault Server Logs","text":"<ul> <li>Configuration file, environment variables, or CLI</li> <li>Writes to standard log locations</li> <li>Captures Vault server events</li> </ul> <p>What is captured in those logs is Vault server events, things like initializing, unsealing, the generation of root tokens, all things that are happening with the Vault service and its underlying components.</p> <ul> <li>Real time view with monitor command</li> </ul> <p>If you want to get a real\u2011time view of what's going on with the Vault logging, you can run vault monitor and that will pull up a real\u2011time feed of the Vault logs for whatever you have <code>VAULT_ADDR</code> set to.</p>"},{"location":"vault3/8vaba_monitor/#auditing-on-vault","title":"Auditing on Vault","text":"<ul> <li>Captures all requests and responses through the API</li> </ul> <p>Vault auditing is there to capture all the requests and responses that go through the API, and since we know that all interaction with Vault has to happen through the API, that means any clients that want to interact with the Vault service are going to go through that API in the form of requests, and then they will get responses back from the Vault server.</p> <ul> <li>Implemented through device types</li> <li>File, socket, syslog</li> </ul> <p>The auditing data is captured by audit devices, and there's a few different device types available to you.</p> <p>There's the file device type, which writes data to a local file that you indicate.</p> <p>There's the socket, which will write to a UNIX socket.</p> <p>And then there's syslog, which will write to syslog, and you can specify options for each of these to customize how the device is handled.</p> <ul> <li>One device MUST be available</li> <li>Sensitive data hashed</li> <li>Verified with <code>/sys/audit-hash</code></li> </ul>"},{"location":"vault3/8vaba_monitor/#audit-data-capture-and-commands","title":"Audit Data Capture and Commands","text":"<ol> <li>And that API is going to send that request to Vault Core, which is behind the barrier.</li> <li>Behind that barrier, it's going to validate that the developers have access to that secret, and then go to retrieve that secret.</li> <li>At the same time, it's going to write that request data to an audit device.</li> <li>It's first going to create an audit entry, which is in JSON, and then it's going to apply a device salt to any sensitive data that's in that entry, and then finally, write that entry out to the audit device.</li> <li>Once the audit entry has been successfully written, Vault will now return that secret data to the developers and write the response to the audit device as well.</li> </ol> <p>In this way, the entire interaction has been captured by the audit device.</p>"},{"location":"vault3/8vaba_monitor/#audit-commands","title":"Audit Commands","text":"<pre><code># Enable audit device\nvault audit enable [options] TYPE [settings]\nvault audit enable \u2013path=file-audit file file_path=/opt/vault/logs/auditlog\n\n# Disable audit device\nvault audit disable PATH\nvault audit disable file-audit\n\n# List audit devices\nvault audit list [options]\n</code></pre> <ul> <li>Capture audit logs with Azure Log Analytics</li> <li>Ensure at least one audit device is available</li> <li>Sensitive values should not be in clear text</li> </ul>"},{"location":"vault3/8vaba_monitor/#audit-device-demo-overview","title":"Audit Device Demo Overview","text":"<p>We're going to set up a file type audit device to capture the logs on the local systems that are part of our vault cluster.</p> <p>Because the local file system should always be available, we can be relatively certain that we're not going to start dropping requests because the audit device is not available, but Globomantics also wants us to capture our audit data with log analytics.</p> <p>We can do that by setting up a second audit device writing to syslog and then we can use the OMS agent, which is an agent that runs on each Azure VM, to collect the syslog data and send that up to a workspace in log analytics.</p>"},{"location":"vault3/8vaba_monitor/#deploying-the-workbook-and-extensions","title":"Deploying the Workbook and Extensions","text":"<p><code>log_analytics.tf</code></p> <pre><code>variable \"oms_agent_version\" {\n  type = string\n  description = \"Version of OMS Linux Agent to install\"\n  default = \"1.13\"\n}\n\nresource \"azurerm_log_analytics_workspace\" \"vault\" {\n  name                = local.vault_vm\n  location            = azurerm_resource_group.vault.location\n  resource_group_name = azurerm_resource_group.vault.name\n  sku                 = \"PerGB2018\"\n  retention_in_days   = 30\n}\n\nresource \"azurerm_virtual_machine_extension\" \"tfazmon_ext\" {\n  count = var.vault_vm_count\n  name                 = \"OmsAgentForLinux-${count.index}\"\n  virtual_machine_id   = azurerm_linux_virtual_machine.vault[count.index].id\n  publisher            = \"Microsoft.EnterpriseCloud.Monitoring\"\n  type                 = \"OmsAgentForLinux\"\n  type_handler_version = var.oms_agent_version\n  auto_upgrade_minor_version = true\n\n  settings = &lt;&lt;SETTINGS\n    {\n        \"workspaceId\": \"${azurerm_log_analytics_workspace.vault.workspace_id}\"\n    }\nSETTINGS\n\n    protected_settings = &lt;&lt;PROTECTEDSETTINGS\n    {\n        \"workspaceKey\": \"${azurerm_log_analytics_workspace.vault.primary_shared_key}\"\n    }\nPROTECTEDSETTINGS\n}\n</code></pre> <pre><code>\n\n# Now we'll update our deployment\n# Make sure to change the YOUR_CERTIFICATE_CN to the fqdn on\n# your TLS certificate. Ex. vault-vms.globomantics.xyz\ncertificate_cn=YOUR_CERTIFICATE_CN\n</code></pre> <pre><code>terraform plan -var leader_tls_servername=$certificate_cn -out azurevm.tfplan\n\n# Now we'll apply the plan to create the resources\nterraform apply azurevm.tfplan\n</code></pre> <p></p> <p>The next step has to be done in the UI or by altering the syslog config files.</p> <p>It's easier to go to the UI and update the agent settings to include facility LOCAL7</p> <p></p> <p></p> <pre><code>ssh -i ~/.ssh/azure_vms_private_key2.pem -p 2022 azureuser@20.62.217.163\n</code></pre> <pre><code>ssh -i ~/.ssh/azure vms private kev2.pem -p 2022 azureuser@20.62.217.163\n</code></pre> <pre><code># Check on the config file\nsudo cat /etc/rsyslog.d/95-omsagent.conf\n</code></pre> <p></p> <pre><code># Restart agent if desired\nsudo /opt/microsoft/omsagent/bin/service_control restart\n\n# And the wa-agent as well\nsudo systemctl restart walinuxagent\n</code></pre>"},{"location":"vault3/8vaba_monitor/#deploying-the-workbook-and-extensions_1","title":"Deploying the Workbook and Extensions","text":""},{"location":"vault3/8vaba_monitor/#configuring-local-file-auditing","title":"Configuring local file auditing","text":"<p>Head back to this folder</p> <pre><code># Set your Vault address environment variable\n# Ex. vault-vms.globomantics.xyz\nexport VAULT_ADDR=https://VAULT_SERVER_FQDN:8200\n\n\n# And log into Vault using the globoadmin user\nvault login -method=userpass username=testadmin\n\n# First we need to update our admin policy!\nvault policy write vault-admins vault-admins.hcl\n</code></pre> <p><code>vault-admins.hcl</code></p> <pre><code># Allow managing leases\npath \"sys/leases/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# Manage auth backends broadly across Vault\npath \"auth/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# List, create, update, and delete auth backends\npath \"sys/auth/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"sudo\"]\n}\n\n# List existing policies\npath \"sys/policies\"\n{\n  capabilities = [\"read\"]\n}\n\n# Create and manage ACL policies broadly across Vault\npath \"sys/policies/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# List, create, update, and delete key/value secrets\npath \"secret/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# Manage and manage secret backends broadly across Vault.\npath \"sys/mounts/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# List existing secret engines.\npath \"sys/mounts\"\n{\n  capabilities = [\"read\"]\n}\n\n# Read health checks\npath \"sys/health\"\n{\n  capabilities = [\"read\", \"sudo\"]\n}\n\n# Configure auditing\npath \"sys/audit\"\n{\n  capabilities = [\"list\", \"sudo\"]\n}\n\npath \"sys/audit/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n</code></pre> <pre><code># Enable a file location for an audit device\nvault audit enable file file_path=/opt/vault/audit.log\n</code></pre> <p>Now go back to the Azure portal and the log analytics workspace we created earlier.</p> <p>You can query the logs capture and verify that event have started to show up</p> <p></p> <pre><code># Run the following query on Logs\nSyslog\n| where Facility == \"local7\" \n</code></pre> <pre><code># Add some entries to the audit log by issuing\n# Vault requests\nvault secrets list\n\nvault policy list\n\nvault secrets enable -path=audittest kv\n</code></pre> <p></p> <p></p>"},{"location":"vault3/8vaba_monitor/#vault-hardening","title":"Vault Hardening","text":""},{"location":"vault3/8vaba_monitor/#system-level","title":"System level","text":"<ul> <li>Run unprivileged</li> <li>That means not running as root.</li> <li>When we installed Vault on our Azure Virtual Machines, it already created a Vault user for us, and that is the user that we've used to run the service.</li> <li>Run single tenant</li> <li>Disable swap and command history</li> <li>In the configuration of your operating system, you should try to disable swap and command history.</li> <li>Swap typically writes memory to some sort of persistent data when it needs to swap out pages of memory.</li> <li>Disable core dumps</li> <li>Protect storage</li> <li>Use SELinux or AppArmor</li> </ul>"},{"location":"vault3/8vaba_monitor/#networking","title":"Networking","text":"<ul> <li>Disable remote access</li> <li>Restrict network traffic</li> <li>End-to-end TLS</li> </ul>"},{"location":"vault3/8vaba_monitor/#vault-configuration","title":"Vault configuration","text":"<ul> <li>Enable auditing</li> <li>Avoid root tokens</li> <li>Immutable and frequent upgrades</li> </ul>"},{"location":"vault3/8vaba_monitor/#module-summary","title":"Module Summary","text":"<ul> <li>Vault logging can be set in multiple places and captures server activity.</li> <li>Auditing captures all requests and responses from the API.</li> <li>Sensitive data is hashed by default and can be confirmed with the audit-hash API endpoint</li> <li>Apply proper hardening to your Vault servers per HashiCorp and your organization.</li> </ul>"},{"location":"vault4/1mag_vt_intro/","title":"L1 Secrets in HashiCorp Vault Introduction","text":""},{"location":"vault4/1mag_vt_intro/#1-why-encryption-as-a-service","title":"1 Why Encryption as a Service?","text":"<p>The company has created a number of successful digital products and services, and continues to expand its portfolio as demand surges higher and higher year over year.</p> <p></p>"},{"location":"vault4/1mag_vt_intro/#secrets-examples","title":"Secrets Examples","text":"<ul> <li>Usernames &amp; Passwords</li> <li>Database Credentials</li> <li>API Tokens</li> <li>TLS Certificates</li> </ul> <p>Some common examples of credentials can be usernames and passwords, database credentials, API tokens, or Transport Layer Security, or TLS certificates. </p>"},{"location":"vault4/1mag_vt_intro/#secrets-management","title":"Secrets Management","text":"<ul> <li>Access List - who is granted access</li> <li>Audit Trail - previous usage</li> <li>Secrets Rotation - change them regularly</li> </ul> <p>When it comes to managing these secrets, </p> <ul> <li>we usually want to know who has access to them,</li> <li>who's been using them, </li> <li>when, and how to periodically rotate them, or change them on a regular basis</li> </ul>"},{"location":"vault4/1mag_vt_intro/#secrets-sprawl","title":"Secrets Sprawl","text":"<p>When it comes to secrets management, companies and organizations usually experience something called a secret sprawl. </p> <p>Source Code - in headers</p> <ul> <li>Secrets end up in plain text in our source code, usually hardcoded inside headers like username and password. In places like Configuration Management. </li> </ul> <p>Software Configuration Management Files - Chef, Puppet, Ansible</p> <ul> <li>These are plain text files for tools like Chef, Puppet, or Ansible, where anyone with a login can see what these credentials are. </li> </ul> <p>Version Control - GitHun, BitBucket, Sub-Version</p> <p>And finally, in version control systems like GitHub, BitBucket, Sub\u2011version, etc. So this is the actual secrets sprawl, they are all over your IT infrastructure. </p>"},{"location":"vault4/1mag_vt_intro/#centralized-secrets-management","title":"Centralized Secrets Management","text":"<p>Centralized Secrets Management</p> <p>Enter Encryption as a Service with Vault, which is a way to centralize secrets management and standardize the usage of an ever\u2011growing array of security systems and mechanisms. </p> <p>Vault handles both encryption at rest \u2011 when the secrets are persisted in some sort of storage</p> <p>In transit \u2011 when secrets are transmitted over the network to remote locations. </p>"},{"location":"vault4/1mag_vt_intro/#2-vault-architecture-explained","title":"2 Vault Architecture Explained","text":""},{"location":"vault4/1mag_vt_intro/#vault-architecture","title":"Vault Architecture","text":"<p>We see that Vault can be accessed by applications and users, usually via web clients such as web browsers or operators via the Vault CLI.</p> <p>Vault relies on the Transport Layer Security protocol, or TLS, to ensure your secrets are safe in transit, that is, they're sent and received securely.</p> <p>Once secrets arrive securely over the wire, they reach the Vault's HTTP RESTful API. The API helps users interact with Vault and carry the secrets through the barrier.</p> <p>The secrets are then passed to the core components for encryption and decryption.</p> <p>An encrypted data never enters or leaves the barrier through the HTTP API or between Vault and the storage back ends.</p> <p>The internal back\u2011end components talk to the storage back ends. Vault provides several mechanisms to store secrets. It handles different types of secrets by offering a pluggable architecture where a set of secrets engines provides storage and interaction implementations for specific types of secrets.</p>"},{"location":"vault4/1mag_vt_intro/#vault-backend","title":"Vault Backend","text":"<p>Please note that except for its own operational data that includes tokens, policies, and system data, vault does not itself store secrets. </p> <p>It delegates that responsibility to a wide array of back ends. </p> <p>This is how Vault handles secrets at rest. At the bottom of this diagram, we have depicted the main types of secrets back ends, file system; key\u2011value pair type, such as console and etcd; cloud solutions by major hyperscalers like AWS, Azure, and GCP; and databases, for example, Postgres, MySQL, Oracle, and many more. </p> <p>Storage back ends see only encrypted data. </p> <p>If a Vault backend is compromised, the data stored there is unreadable without the Vault server to decrypt it.</p> <p></p> <p>Vault uses the AES\u2011256 standard to encrypt and decrypt secrets internally. </p> <p>Symmetric algorithms are considerably faster than asymmetric ones. </p> <p>Vault encrypts data in 256 blocks. </p> <p>Secrets are then stored durably or transmitted securely. </p> <p>Once encryption operations are complete, Vault handles further processing by performing security policy application, auditing, token generation, and path routing to manage and store secrets.</p> <p></p>"},{"location":"vault4/1mag_vt_intro/#quick-install-with-package-managers","title":"Quick Install with Package Managers","text":""},{"location":"vault4/1mag_vt_intro/#install-on-windows","title":"Install on Windows","text":"<pre><code>choco install vault\nvault version\nvault -h\n</code></pre>"},{"location":"vault4/1mag_vt_intro/#install-on-linux","title":"Install on Linux","text":"<pre><code># Install on Linux - Ubuntu\n# For other Linux distributions, check out this link: \n# https://www.hashicorp.com/blog/announcing-the-hashicorp-linux-repository#curl-fssl-https-apt-releases-hashicorp-com-gpg-sudo-apt-key-add\n\ncurl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository \"deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main\"\nsudo apt-get update &amp;&amp; sudo apt-get install vault\n</code></pre> <pre><code># Verify installation\nls -l /etc/apt/sources.list.d/ | grep hashi\nvault -v\n</code></pre> <pre><code># Create a SystemD unit file called vault.service\nsudo vim /etc/system/system/vault.service\n</code></pre> <p><code>vault.service</code></p> <pre><code>[Unit]\nDescription=Vault-DEV-Instance\nDocumentation=https://www.vaultproject.io/docs\n\n[Service]\nExecStart=/usr/bin/vault server -dev\nExecReload=/bin/kill -HUP $MAINPID\nLimitNOFILE=65536\n\n[Install]\nWantedBy=mult-.user.target\n</code></pre> <p>In the future, change the value ExecStart to work with the -config flag, and point to Vaults configuration file, when you want to run a Production instance of Vault</p> <p>Vault as a Service on Linux With SystemD</p> <pre><code># Reload SystemD configuration \nsystemctl daemon-reload\n\n# Start Vault service\nsystemctl start vault \n\n# Enable Vault service to run on system boot\nsystemctl enable vault \n\n# Check Vault service status - active (running | waiting | exited), inactive \n# (stopped), enabled | disabled \u2026, see citation below\nsystemctl status vault\n</code></pre>"},{"location":"vault4/1mag_vt_intro/#install-on-mac-os","title":"Install on Mac OS","text":"<pre><code># If you don't have Homebrew installed, use this command first\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\nbrew install hashicorp/tap/vault\nvault version\n</code></pre>"},{"location":"vault4/1mag_vt_intro/#install-consul-on-other-linux-distributions","title":"Install Consul on Other Linux Distributions","text":"<pre><code># Install Consul as well\nbrew install consul\n</code></pre> <pre><code># Ubuntu \nsudo apt-get install -y consul\n\n# Open SUSE\nsudo snap install consul\n\n# RedHat\nsudo yum install -y consul\n\n# Debian - official repository added in 2020\nsudo yum install -y consul\n\n# Download module resources for full details and references\n</code></pre>"},{"location":"vault4/1mag_vt_intro/#vault-cli","title":"Vault CLI","text":"<pre><code>$ vault -h\nUsage: vault &lt;command&gt; [args]\n...\n</code></pre> <pre><code># List first level commands \nvault -h\n\n# Get help on first level commands\nvault &lt;command&gt; -h\n\n# Get help on subcommands\nvault &lt;command&gt; &lt;subcommand&gt; -h\n\n# Sample subcommand\nvault lease renew -h\n</code></pre> <pre><code>$ vault renew -h\nUsage: vault &lt;command&gt; [args]\n\nCommon commands:\n    read        Read data and retrieves secrets\n    write       Write data, configuration, and secrets\n    delete      Delete secrets and configuration\n    list        List data or secrets\n    login       Authenticate locally\n    agent       Start a Vault agent\n    server      Start a Vault server\n    status      Print seal and HA status\n    unwrap      Unwrap a wrapped secret\n\n...\n</code></pre>"},{"location":"vault4/1mag_vt_intro/#vault-general-commands","title":"Vault General Commands","text":"<pre><code># General command format \nvault &lt;command&gt; [options] [path] [args]\n\n\n# Sample command\nvault write -address=\u201chttp://127.0.0.1:8200\u201d auth/userpass/users/gsmith password=\u201cpwd123\u201d\n\n\n# Sample command with multiple options and args\nvault write -address=\u201chttp://127.0.0.1:8200\u201d -namespace=\u201cmy-organization\u201d \\\nauth/userpass/users/gsmith password=\u201cpwd123\u201d policies=\u201cadmin\u201d\n\n# Auto complete installation\nvault -autocomplete-install\n\n\n# After that execute Ctrl+C to stop Vault, then restart the dev server\nvault server -dev\n# Now vault read + tab will show you the autocomplete options for the \"read\" command\n</code></pre>"},{"location":"vault4/1mag_vt_intro/#features","title":"Features","text":"<ul> <li>Exit Codes</li> </ul> <p>The Vault CLI aims to be consistent and well-behaved unless documented otherwise.</p> <ul> <li>Local errors such as incorrect flags, failed validations, or wrong numbers of arguments return an exit code of 1.</li> <li>Any remote errors such as API failures, bad TLS, or incorrect API parameters return an exit status of 2</li> </ul> <p>Some commands override this default where it makes sense. These commands document this anomaly.</p> <p>When you get an exit code of 2, this is usually related to remote errors such as API failures, bad TLS, or incorrect API parameters. </p> <p>Another very useful feature is the token helper. This is a mechanism to cache a Vault token after authentication</p> <ul> <li>Token Helper</li> </ul> <p>By default, the Vault CLI uses a \"token helper\" to cache the token after authentication. This is conceptually similar to how a website securely stores your session information as a cookie in the browser. Token helpers are customizable, and you can even build your own.</p> <p>The default token helper stores the token in <code>~/.vault-token</code> . You can delete this file at any time to \"logout\" of Vault.</p> <p>Different Ways to Authenticate a Web Application</p> <ul> <li>The token helper is very similar to a cookie that stores user\u2011session information in the browser. </li> <li>Token helpers are customizable and you can build your own if needed.</li> <li>Take a look at the <code>vault\u2011token</code> hidden file under your home directory. </li> <li>This is where the default token helper stores its token. </li> <li> <p>Deleting this file is equivalent to logging out. </p> </li> <li> <p>Environment Variables</p> </li> </ul> <p>The CLI reads the following environment variables to set behavioral defaults. This can alleviate the need to repetitively type a flag. </p> <p>Flags always take precedence over the environment variables.</p> <p>They are very useful for sending behavioral defaults such as the <code>VAULT_ADDR</code>, <code>VAULT_TOKEN</code>, <code>VAULT_CACERT</code>, <code>VAULT_CLIENT_KEY</code>, <code>VAULT_CLUSTER_ADDR</code>, and <code>VAULT_FORMAT</code>, and many more. </p>"},{"location":"vault4/2vt_auth_method/","title":"2 Installing and Configuring Authentication Methods","text":"<p><code>vault login hvs.HOd7xIuvGVsiIhDYeOHO5BsV</code></p>"},{"location":"vault4/2vt_auth_method/#1-authentication-for-entities-and-identities","title":"1 Authentication for Entities and identities","text":""},{"location":"vault4/2vt_auth_method/#legal-entities-corporate-structure","title":"Legal Entities - Corporate Structure","text":"<p>Legal entities behave like individuals. </p> <p>They purchase products, consume services, and perform work, but they differ in that they have a corporate structure, like divisions, departments, teams, and so on, and internal rules. </p> <p>Organizations also have members who play different roles, system administrators, developers, and project managers. </p>"},{"location":"vault4/2vt_auth_method/#users-groups","title":"Users &amp; Groups","text":"<p>File System Permissions Analogy</p> <p></p> <p>Both individuals and members of organizations can assume one or more identities. </p> <p>Each identity consists of or can be described with one or more attributes, again, a one\u2011to\u2011many relationship.</p>"},{"location":"vault4/2vt_auth_method/#vault-authentication-integrations","title":"Vault &amp; Authentication Integrations","text":"<p>Vault can integrate with authentication platforms </p> <ul> <li>LDAP: Business directory services</li> <li>Active Directory: For Microsoft workloads</li> <li>GitHub: Version control authentication</li> <li>AWS: One of the cloud methods</li> <li>AppRole: For business systems and  CI/CD tools</li> </ul> <p>This includes business systems that require secrets access and continuous integration tools that build and deploy software. </p>"},{"location":"vault4/2vt_auth_method/#authentication-flow","title":"Authentication Flow","text":"<p>There are many authentication methods that Vault supports, but regardless of the one being used, a successful authentication request always produces and returns a token. </p> <p>Token authentication is the default method, and it allows read and write access to secrets. </p> <ul> <li>1, the client, which can be an individual or an application, sends an authentication request to Vault. Vault calls LDAP to authenticate the request. </li> <li>2, Vault extracts the necessary information from the request and submits it to the identity provider for authentication, in this case, LDAP. </li> <li>3, If the credentials are valid, LDAP confirms them. Then on success</li> <li>4, Vault returns a newly minted token to the client. </li> <li>5 Using that token, the client can request access to the secrets covered by the permissions granted by the token. We will discuss permissions shortly after we talk about policies.</li> <li>6 Vault validates the lease of the token, or it's time to live, commonly referred to as TTL. And if the lease is still good, Vault returns the requested secret in step </li> <li>7 Vault provides a number of authentication methods. </li> </ul>"},{"location":"vault4/2vt_auth_method/#authentication-methods","title":"Authentication Methods","text":"<p>Human Users</p> <ul> <li>Userpass <ul> <li>built\u2011in authentication system to Vault that supports username and password combinations</li> </ul> </li> <li>LDAP and Active Directory </li> <li>Cloud providers - AWS, GCP, Azure<ul> <li>AWS</li> <li>Azure</li> <li>Google Cloud</li> </ul> </li> <li>GitHub</li> </ul> <p>Userpass is suitable for testing. Not the best option for Production</p> <p>Active Directory and GitHub are suitable for Production environments</p> <p>Non-human Users</p> <ul> <li>AppRole </li> <li>Kubernetes</li> </ul> <p>The tokens returned by these methods are keys of limited use. </p> <p>These keys are associated with the user, possibly with the group, and with a policy which determines the secrets that are readable and/or writable by the token. </p> <p>In Vault parlance, the actions allowed by a policy are called capabilities. </p> <p>Common capabilities are create, read, update, delete, and list.</p>"},{"location":"vault4/2vt_auth_method/#vault-built-in-authentication-methods","title":"Vault Built-in Authentication Methods","text":"<p>On this diagram, you can see the supported authentication methods on the left. Token is the default authentication method, followed by the different cloud identity providers, GitHub, JWT, Kubernetes, Okta, RADIUS, and so on. </p>"},{"location":"vault4/2vt_auth_method/#vault-built-in-authentication-methods_1","title":"Vault Built-in Authentication Methods","text":"<p>Token</p> <p>The default authentication method in Vault</p> <p>Userpass</p> <p>Built-in method using usernames and passwords,stored in Vault</p>"},{"location":"vault4/2vt_auth_method/#demo-authentication-for-entities-and-identities","title":"Demo: Authentication for Entities and Identities","text":"<pre><code>$ vault server -dev\n==&gt; Vault server configuration:\n\n             Api Address: http://127.0.0.1:8200\n                     Cgo: disabled\n         Cluster Address: https://127.0.0.1:8201\n              Go Version: go1.19.3\n              Listener 1: tcp (addr: \"127.0.0.1:8200\", cluster address: \"127.0.0.1:8201\", max_request_duration: \"1m30s\", max_request_size: \"33554432\", tls: \"disabled\")\n               Log Level: info\n                   Mlock: supported: false, enabled: false\n           Recovery Mode: false\n                 Storage: inmem\n                 Version: Vault v1.12.2, built 2022-11-23T12:53:46Z\n             Version Sha: 415e1fe3118eebd5df6cb60d13defdc01aa17b03\n...\nYou may need to set the following environment variables:\n\n    $ export VAULT_ADDR='http://127.0.0.1:8200'\n\nThe unseal key and root token are displayed below in case you want to\nseal/unseal the Vault or re-authenticate.\n\nUnseal Key: 80fhgSyxE0PrDrkr6yVcUV1HmjW+1uKX8sLv2lGpCn4=\nRoot Token: hvs.HOd7xIuvGVsiIhDYeOHO5BsV\n\nDevelopment mode should NOT be used in production installations!\n</code></pre> <pre><code>export VAULT_ADDR='http://127.0.0.1:8200'\n</code></pre>"},{"location":"vault4/2vt_auth_method/#vault-status","title":"<code>vault status</code>","text":"<pre><code>$ vault status\nKey             Value\n---             -----\nSeal Type       shamir\nInitialized     true\nSealed          false\nTotal Shares    1\nThreshold       1\nVersion         1.12.2\nBuild Date      2022-11-23T12:53:46Z\nStorage Type    inmem\nCluster Name    vault-cluster-bbbb4ade\nCluster ID      f8d55404-3393-f04d-da5e-7b9ee659ea22\nHA Enabled      false\n</code></pre> <pre><code>$ vault auth list\nPath      Type     Accessor               Description                Version\n----      ----     --------               -----------                -------\ntoken/    token    auth_token_eff89ca7    token based credentials    n/a\n</code></pre> <pre><code>$ vault login hvs.HOd7xIuvGVsiIhDYeOHO5BsV\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                hvs.HOd7xIuvGVsiIhDYeOHO5BsV\ntoken_accessor       hB9GYswMqIDKgocQx9TQKtTF\ntoken_duration       \u221e\ntoken_renewable      false\ntoken_policies       [\"root\"]\nidentity_policies    []\npolicies             [\"root\"]\n</code></pre>"},{"location":"vault4/2vt_auth_method/#enable-userpass","title":"<code>enable userpass</code>","text":"<pre><code># Enable on path auth/userpass\n$ vault auth enable userpass\n\nSuccess! Enabled userpass auth method at: userpass/\n\n$ vault auth list\nPath         Type        Accessor                  Description                Version\n----         ----        --------                  -----------                -------\ntoken/       token       auth_token_eff89ca7       token based credentials    n/a\nuserpass/    userpass    auth_userpass_75046b90    n/a                        n/a\n\n# Enable on path auth/userpass\n\nvault auth enable -description='UID/PWD Authentication Method' -max-lease-ttl=2m userpass/\n\n\n$ vault write auth/userpass/users/vuser password=vpwd123\nSuccess! Data written to: auth/userpass/users/vuser\n</code></pre> <pre><code>$ vault login -method=userpass username=vuser password=vpwd123\n\n$ vault login -method=userpass username=vuser password=vpwd123\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIBJgn8bBIIby7AvO60o8oVX4mCfW7gve6JLO92N0f5G1Gh4KHGh2cy5QdUdDRlpDT1hyUHJQdkw4RTZBTHJWWVA\ntoken_accessor         SUxhDQRTklekYriVIIBfX5xf\ntoken_duration         768h\ntoken_renewable        true\ntoken_policies         [\"default\"]\nidentity_policies      []\npolicies               [\"default\"]\ntoken_meta_username    vuser\n\n$ vault login  hvs.CAESIBJgn8bBIIby7AvO60o8oVX4mCfW7gve6JLO92N0f5G1Gh4KHGh2cy5QdUdDRlpDT1hyUHJQdkw4RTZBTHJWWVA\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIBJgn8bBIIby7AvO60o8oVX4mCfW7gve6JLO92N0f5G1Gh4KHGh2cy5QdUdDRlpDT1hyUHJQdkw4RTZBTHJWWVA\ntoken_accessor         SUxhDQRTklekYriVIIBfX5xf\ntoken_duration         767h57m30s\ntoken_renewable        true\ntoken_policies         [\"default\"]\nidentity_policies      []\npolicies               [\"default\"]\ntoken_meta_username    vuser\n</code></pre> <p>Enable the Vault Ul in Production by creating a configuration file</p> <pre><code>sudp vim /etc/hashicorp/vault/vault_config.hcl\n</code></pre> <pre><code>storage \"consul\" {\n    address = \"127.0.0.1:8500\"\n    path = \"vault\"\n}\n\nlistener \"tcp\" {\n    address = \"127.0.0.1:8200\"\n    tls_disable = 1\n}\n\n\ntelemetry {\n    statsite_address = \"127.0.0.1:8125\"\n    disable hostname = true\n}\n\nui = true\n</code></pre>"},{"location":"vault4/2vt_auth_method/#3-enabling-and-configuring-authentication-methods","title":"3 Enabling and Configuring Authentication Methods","text":"<pre><code>vault auth tune -description='UID/PWD Authentication Method' -max-lease-ttl=2m userpass/\n\n$ vault auth tune -description='UID/PWD Authentication Method' -max-lease-ttl=2m userpass/\nSuccess! Tuned the auth method at: userpass/\n</code></pre>"},{"location":"vault4/2vt_auth_method/#enable-ldap-auth-method","title":"Enable LDAP auth method","text":"<pre><code>vault auth enable ldap\n\n$ vault auth enable ldap\nSuccess! Enabled ldap auth method at: ldap/\n\n# Configure LDAP auth method - basic parameters\nvault write auth/ldap/config \\\n    url=\"ldap://ldap.testvault.com\" \\\n    userdn=\"ou=Users,dc=testvault,dc=com\" \\\n    groupdn=\"ou=Groups,dc=testvault,dc=com\" \\\n    groupfilter=\"(&amp;(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))\" \\\n    groupattr=\"cn\" \\\n    upndomain=\"testvault.com\"\n\nSuccess! Data written to: auth/ldap/config  \n</code></pre> <p>Configure LDAP auth method - with CA cert enabled </p> <pre><code>vault write auth/ldap/config \\\n    url=\"ldap://ldap.testvault.com\" \\\n    userdn=\"ou=Users,dc=testvault,dc=com\" \\\n    groupdn=\"ou=Groups,dc=testvault,dc=com\" \\\n    groupfilter=\"(&amp;(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))\" \\\n    groupattr=\"cn\" \\\n    upndomain=\"testvault.com\" \\\n    ertificate=@ldap_ca_cert.pem \\\n    insecure_tls=false \\\n    starttls=true\n</code></pre>"},{"location":"vault4/2vt_auth_method/#enable-aws-auth-method","title":"Enable AWS auth method","text":"<pre><code># Set env variables for AWS\nexport AWS_ACCESS_KEY=\"my_aws_account_access_key128h*Y73#12&lt;jd\";\nexport AWS_SECRET_KEY=\"my_aws_account_secret_key93jkd&amp;3)s&gt;sds1\";\n\n# Configure AWS auth method with the access and secret keys\nvault write auth/aws/config/client \\\n    secret_key=$AWS_SECRET_KEY \\\n    access_key=$AWS_ACCESS_KEY\n\n# Create a policy that gives db-role list and read capabilities\nvault policy write db-policy - &lt;&lt; EOF\npath \"database/creds/app-role\" {\n    capabilities = [\"list\", \"read\"]\n}\nEOF\n\nsuccess! Uploaded policy: db-policy\n\n</code></pre>"},{"location":"vault4/2vt_auth_method/#create-and-configure-app-db-role","title":"Create and configure app-db-role","text":"<pre><code>vault write \\\n    auth/aws/role/app-db-role \\\n    auth_type=ec2 \\\n    policies=db-policy \\\n    max_ttl=1h \\\n    disallow_reauthentication=false \\\n    bound_ami_id=ami-&lt;hash&gt;\n\n# Read the policy to verify it is correctly configured\nvault read auth/aws/role/app-db-role\n</code></pre> <pre><code>vault write \\\n    auth/aws/role/app-db-role\\\n    auth_type=ec2\\\n    policies=db-policy\\\n    max ttl=1h \\\n    disallow reauthentication=false\\\n    bound amiid=ami-asdf0139kfkw93ks53\n</code></pre>"},{"location":"vault4/2vt_auth_method/#policy-types","title":"Policy Types","text":""},{"location":"vault4/2vt_auth_method/#policy-types_1","title":"Policy Types","text":"<p>ACL Policies</p> <ul> <li>Defined in HCL </li> <li>Assigned to tokens by name</li> </ul> <p>The first and most common policy type is ACL, or Access Control List policies. These are written in HCL, the HashiCorp's JSON\u2011like configuration language.</p> <p>They apply to a path or paths and are linked to tokens by name.</p> <pre><code>vault policy write my-policy my-policy.hcl\n\nSuccess! Uploaded policy: my-policy\n\nvault policy write other-policy other-policy.hcl\n\nSuccess! Uploaded policy: other-policy\n</code></pre> <p><code>my-policy.hcl</code></p> <pre><code>### My Policy ###\n# Write any secret to these sub-paths secret/data/*\npath \"secret/data/*\" {\n  capabilities = [\"create\", \"update\"]\n}\n\n# Only read from this path\npath \"secret/data/globomantics\" {\n  capabilities = [\"read\"]\n}\n</code></pre> <p><code>other-policy.hcl</code></p> <pre><code>### My Policy ###\n# Write any secret to these sub-paths secret/data/*\npath \"secret/data/*\" {\n  capabilities = [\"create\", \"update\"]\n}\n\n# Read from and update secrets under this path\npath \"secret/data/globomantics/accounting\" {\n  capabilities = [\"read\", \"update\"]\n}\n</code></pre> <pre><code>vault token create -policy-my-policy-policy=other-policy\n</code></pre> <pre><code>$ vault token create -policy=my-policy -policy=other-policy\nKey                  Value\n---                  -----\ntoken                hvs.CAESIE6IZcV9vkIsQ3YfPrPKBC8z24-R_40SOksX4CDvDy3GGh4KHGh2cy50cWNhUm9LdjREckZBekttRXg3S2dFMWw\ntoken_accessor       DSwrEQIzxUbb6hgFgJPDsXs1\ntoken_duration       768h\ntoken_renewable      true\ntoken_policies       [\"default\" \"my-policy\" \"other-policy\"]\nidentity_policies    []\npolicies             [\"default\" \"my-policy\" \"other-policy\"]\n</code></pre> <p>logging into Vault with a particular identity, certain aspects of it, like your LDAP group membership or your IAM role will be linked to such policies, as the policies will be assigned to your token by name <p>Endpoint Governing Policies</p> <ul> <li>Defined in Sentinel</li> <li>Assigned to API endpoints irrespective of identity</li> </ul> <p>The second type are endpoint governing policies. They're written in Sentinel, which is available only in the enterprise commercial version of Vault</p> <p>Governing policies is that they apply to API endpoints regardless of identity or regardless of who is trying to access the endpoint.</p> <p></p> <p>To understand this better, here's a quick example  The cidrcheck rule ensures login requests originate only from a specific IP range. </p> <p>The <code>ping_valid</code> rule enforces ping multi\u2011factor authentication. Finally, the main rule combines the first to rules and applies a logical AND, but only when the request path starts with auth/ldap/login or for LDAP login attempts only</p> <p>Every Sentinel policy has a main rule, which is evaluated to determine the result of the policy.</p> <p>Role Governing Policies</p> <ul> <li>Defined in Sentinel</li> <li>Assigned to tokens by name</li> </ul> <p>Root Policies</p> <ul> <li>Apply to root tokens only </li> <li>Used in an emergency or when no other policies are available</li> </ul> <pre><code> vault token lookup\nKey                 Value\n---                 -----\naccessor            hB9GYswMqIDKgocQx9TQKtTF\ncreation_time       1671289536\ncreation_ttl        0s\ndisplay_name        root\nentity_id           n/a\nexpire_time         &lt;nil&gt;\nexplicit_max_ttl    0s\nid                  hvs.HOd7xIuvGVsiIhDYeOHO5BsV\nmeta                &lt;nil&gt;\nnum_uses            0\norphan              true\npath                auth/token/root\npolicies            [root]\nttl                 0s\ntype                service\n</code></pre>"},{"location":"vault4/2vt_auth_method/#advanced-policies-explained","title":"Advanced Policies Explained","text":"<p>Policies determine</p> <ul> <li>Which secrets a token can access</li> <li>Whether the token can be used to Read/Write secrets to a path</li> </ul>"},{"location":"vault4/2vt_auth_method/#tokens-policies","title":"Tokens &amp; Policies","text":"<p>The relationship between tokens and policies, a single token can be linked to one or more policies. Policies determine which secrets a token is allowed to access and whether that token can be used to read or write secrets to a path in Vault</p> <p>Vault treats paths in a way similar to how a file system treats files</p> <p>It assigns a set of permissions. </p> <p></p> <p>Vault exposes paths and manages control to the resources behind those paths via policies, the equivalent of file system permissions</p>"},{"location":"vault4/2vt_auth_method/#vault-paths","title":"Vault Paths","text":"<p>Structure &amp; Samples</p> <pre><code># Auth method: userpass\nauth/userpass/users/:username/password \nauth/userpass/users/:username\nauth/userpass/login/:username \nauth/userpass/mfa_config \nauth/userpass/policies\n\n\n# Auth method: aws\nauth/aws/config/client \nauth/aws/config/rotate-root\nauth/aws/config/identity\nauth/aws/config/certificate \nauth/aws/config/certificate/:cert_name \nauth/aws/config/certificates # Plural \nauth/aws/config/sts \nauth/aws/config/sts/:account_id\n</code></pre>"},{"location":"vault4/2vt_auth_method/#vault-rest-ful-http-api-call","title":"Vault REST-ful HTTP API Call","text":"<pre><code># Call with curl\ncurl \\ \n\u00a0\u00a0\u00a0\u00a0--header \"X-Vault-Token: $VAULT_TOKEN\" \\ \n\u00a0\u00a0\u00a0\u00a0--request POST \\ \n\u00a0\u00a0\u00a0\u00a0--data '{\"policies\": [\"my-policy\"]}' \\ \n\u00a0\u00a0\u00a0\u00a0http://127.0.0.1:8200/v1/auth/approle/role/my-role\n</code></pre>"},{"location":"vault4/2vt_auth_method/#issuing-tokens","title":"Issuing Tokens","text":"<p>Vault uses policies to govern the behavior of clients and instrument Role-Based Access Control (RBAC) by specifying access privileges (authorization)</p> <p>Policies are associated with tokens when those tokens are minted. </p> <p>And tokens are issued to users or groups The precise mechanism for this depends on the authentication method being used: userpass, GitHub, database, AWS, Okta, and so on. Here is an HCL policy file that defines capabilities for a path.</p>"},{"location":"vault4/2vt_auth_method/#policies","title":"Policies","text":"<p>Capabilities</p> <ul> <li>Create - HTTP [PUT or POST] </li> <li>Read - HTTP [GET] </li> <li>Update - HTTP [PUT or POST] </li> <li>Delete - HTTP [DELETE] </li> <li>List - HTTP [LIST] </li> <li>SUDO - access to root-protected paths </li> <li>Deny - explicitly denies a capability</li> </ul> <p>Vault comes with two built\u2011in policies, root and default. </p> <ul> <li>Root can access all paths, including the ones that begin with sys, otherwise known as Vault's internal paths. </li> </ul> <p>The only exception to that is a path to a cubbyhole. </p> <p>The only secret the root token cannot acmes is the one stored in a cubbyhole</p> <ul> <li>The default policy includes capabilities that allow tokens to read their own metadata. This policy can be modified, if needed. </li> </ul> <p><code>ecommdev-policy.hcl</code></p> <pre><code># The \"data\" path semement is required by KVv2\npath \"secret/data/ecommdev\" {\n    capabilities = [\"create\", \"update\", \"read\", \"list\"]\n}\n</code></pre> <p>The one can be used to generate tokens for E\u2011commerce developers or for Vault admins.</p> <pre><code>vault policy write profileapp-policy profileapp-policy.hcl \nvault policy write ecommdev-policy ecommdev-policy.hcl\n</code></pre> <p><code>profileapp-policy.hcl</code></p> <pre><code># The \"data\" path semement is required by KVv2\npath \"secret/data/profileapp\" {\n    capabilities = [\"read\"]\n}\n</code></pre>"},{"location":"vault4/2vt_auth_method/#complexity","title":"Complexity","text":"<ul> <li>Glob - aka <code>*</code> asterisk</li> <li>Wild card - aka <code>+</code> sign</li> <li>Templating</li> </ul> <p><code>templated_policy1.hcl</code></p> <pre><code>path \"secret/data/{{identity.entity.id}}/*\" {\n  capabilities = [\"create\", \"update\", \"read\", \"delete\"]\n}\n\npath \"secret/metadata/{{identity.entity.id}}/*\" {\n  capabilities = [\"list\"]\n}\n</code></pre> <p>Fine-Grained Control with Parameter Constraints</p> <ul> <li>Required parameters</li> <li>Allowed parameters</li> <li>Denied parameters</li> </ul>"},{"location":"vault4/2vt_auth_method/#configuring-and-testing-advanced-policies","title":"Configuring and Testing Advanced Policies","text":""},{"location":"vault4/2vt_auth_method/#advanced-policies-features","title":"Advanced Policies Features","text":"<p>Glob / Wild Card (segment) / Templating / Allowed Parameters / Denied Parameters (disallowed) / Required Parameters</p> <p>Focus on the top three advanced features: glob, segment, and templating. </p> <p>And we will also cover advanced parameter constraints: allowed, disallowed, and required. Glob is specified with an asterisk at the end of a path in an ACL policy rule</p> <ul> <li><code>demo_glob_myorg_ops_policy.hcl</code></li> </ul> <pre><code># Glob - prefix match\npath \"secret/data/myorg/*\" {\n    capabilities = [\"read\", \"create\", \"list\"]\n}\n\n# Restrict a specific subpath to only org-level admins\npath \"secret/data/myorg/admin-secret\" {\n    capabilities  = [\"deny\"]\n}\n\n</code></pre> <ul> <li><code>demo_glob_myorg_admins_policy1.hcl</code></li> </ul> <pre><code># Allow admin users to create org-level secrets\npath \"secret/data/myorg/admin-secret\" {\n    capabilities  = [\"create\", \"update\", \"delete\", \"list\"]\n}\n</code></pre> <p>Glob ( * ) is not equivalent to a its RegEx counterpart</p> <pre><code>vault policy write demo_glob_myorg_ops_policy demo_glob_myorg_ops_policy.hcl\n\nvault policy write demo_glob_myorg_admins_policy1 demo_glob_myorg_admins_policy1.hcl\n</code></pre> <pre><code>$ vault policy write demo_glob_myorg_ops_policy demo_glob_myorg_ops_policy.hclSuccess! Uploaded policy: demo_glob_myorg_ops_policy\n\n$ vault policy write demo_glob_myorg_admins_policy1 demo_glob_myorg_admins_policy1.hcl\nSuccess! Uploaded policy: demo_glob_myorg_admins_policy1\n</code></pre> <p>we define a separate policy that will allow an admin user to create admin secrets on the path we denied in the previous policy</p> <pre><code>$ vault policy list\ndefault\ndemo_glob_myorg_admins_policy1\ndemo_glob_myorg_ops_policy\nmy-policy\nother-policy\nroot\n</code></pre>"},{"location":"vault4/2vt_auth_method/#create-orgops-user-and-assign-a-policy","title":"Create orgops user and assign a policy","text":"<pre><code>vault write auth/userpass/users/orgops password=orgops policies=demo_glob_myorg_ops_policy\n\n$ vault write auth/userpass/users/orgops password=orgops policies=demo_glob_myorg_ops_policy\nSuccess! Data written to: auth/userpass/users/orgops\n</code></pre> <pre><code>$ vault list auth/userpass/users\nKeys\n----\norgops\nvuser\n</code></pre> <pre><code># Login with orgops user\nvault login -method=userpass username=orgops password=orgops\n\n vault login -method=userpass username=orgops password=orgops\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nWARNING! The following warnings were returned from Vault:\n\n  * TTL of \"768h\" exceeded the effective max_ttl of \"2m\"; TTL value is capped\n  accordingly\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIC1UzNx8fvZcPo9wZWbDLA9hIVUf8ouxx7CBlcoUtucUGh4KHGh2cy5oS3dDUXVCdktUUUpIaHRwaWV1T1FUSWI\ntoken_accessor         DjnOpVxFWkMEgnpak0sulX2r\ntoken_duration         2m\ntoken_renewable        true\ntoken_policies         [\"default\" \"demo_glob_myorg_ops_policy\"]\nidentity_policies      []\npolicies               [\"default\" \"demo_glob_myorg_ops_policy\"]\ntoken_meta_username    orgops\n\n# policies               [\"default\" \"demo_glob_myorg_ops_policy\"]\n\n# Write to myorg\n$ vault kv put secret/myorg/opsorgsecret1 key=opsbadge2371 value=super13secret45pwd\n\n$ vault kv put secret/myorg/opsorgsecret1 key=opsbadge2371 value=super13secret45pwd\n\n========= Secret Path =========\nsecret/data/myorg/opsorgsecret1\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-19T07:49:03.794412Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n\n\n# Write to myorg/mydepartment\n\n\nvault kv put secret/myorg/mydepartment/opsdeptsecret1 key=opsbadge2371 value=super13secret45pwd\n\n\n$ vault kv put secret/myorg/mydepartment/opsdeptsecret1 key=opsbadge2371 value=super13secret45pwd\n================ Secret Path ================\nsecret/data/myorg/mydepartment/opsdeptsecret1\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-19T07:49:40.48448Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n\n# Expected error - permission denied - when attempting to write to myorg/admin-secert\nvault kv put secret/myorg/admin-secret key=opsbadge2371 value=super13secret45pwd\n\n$ vault kv put secret/myorg/admin-secret key=opsbadge2371 value=super13secret45pwd\nError making API request.\n\nURL: GET http://127.0.0.1:8200/v1/sys/internal/ui/mounts/secret/myorg/admin-secret\nCode: 403. Errors:\n\n* permission denied\n</code></pre>"},{"location":"vault4/2vt_auth_method/#login-with-orgadmin-user","title":"Login with orgadmin user","text":"<pre><code>$ vault login hvs.HOd7xIuvGVsiIhDYeOHO5BsV (root)\n\n# Create orgadmin user and assign a policy\nvault write auth/userpass/users/orgadmin password=orgadmin policies=demo_glob_myorg_admins_policy,demo_glob_myorg_ops_policy\n\nSuccess! Data written to: auth/userpass/users/orgadmin\n\n$ vault list auth/userpass/users\nKeys\n----\norgadmin\norgops\nvuser\n\n\n# demo_glob_myorg_admins_policy1\n\n# Write to myorg\nvault kv put secret/myorg/adminorgsecret1 key=adminsbadge007 value=doubleO13secret45pwd\n\n$ vault list auth/userpass/users\nKeys\n----\norgadmin\norgops\nvuser\n\n\n# Login with orgops user\nvault login -method=userpass username=orgadmin password=orgadmin\n\n vault login -method=userpass username=orgadmin password=orgadmin\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nWARNING! The following warnings were returned from Vault:\n\n  * TTL of \"768h\" exceeded the effective max_ttl of \"2m\"; TTL value is capped\n  accordingly\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESICsA44fDvC-zOkfk4J0E4Ss61vMH-Zq5kmpqwPvO_ptDGh4KHGh2cy43TnltcVV2RUtBSUhKM1U1Z2g4UWJQY2E\ntoken_accessor         9aCLtVOR8Ie5QMyU8xx8fulk\ntoken_duration         2m\ntoken_renewable        true\ntoken_policies         [\"default\" \"demo_glob_myorg_admins_policy\" \"demo_glob_myorg_ops_policy\"]\nidentity_policies      []\npolicies               [\"default\" \"demo_glob_myorg_admins_policy\" \"demo_glob_myorg_ops_policy\"]\ntoken_meta_username    orgadmin\n\n\n# Write to myorg\nvault kv put secret/myorg/adminorgsecret1 key=adminsbadge007 value=doubleO13secret45pwd\n\n\n\n$ vault kv put secret/myorg/mydepartment/admindeptsecret1 key=adminsbadge007 value=doubleO13secret45pwd\n================= Secret Path =================\nsecret/data/myorg/mydepartment/admindeptsecret1\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-19T08:06:07.124181Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n</code></pre>"},{"location":"vault4/2vt_auth_method/#vault-rest-ful-http-api-call_1","title":"Vault REST-ful HTTP API Call","text":"<pre><code># Everything under:\n\nsecret/data/myorg/mydepartment\n\nsecret/data/myorg/mydepartment/myteam\n\nsecret/data/org2/technology/unit2/team1\n\nsecret/data/org2/procurement/unit1/team2\n</code></pre>"},{"location":"vault4/2vt_auth_method/#create-orgrep-user-and-assign-a-wildcard-policy","title":"Create orgrep user and assign a wildcard policy","text":"<ul> <li><code>demo_wildcard_policy.hcl</code></li> </ul> <pre><code># Handle multiple paths with wildcards\npath \"secret/data/org2/+/+/team*\" {\n    capabilities = [\"create\", \"read\"]\n}\n</code></pre> <pre><code>$ vault login hvs.HOd7xIuvGVsiIhDYeOHO5BsV (root)\n\nvault policy write demo_wildcard_policy demo_wildcard_policy.hcl\n\nSuccess! Uploaded policy: demo_wildcard_policy\n\n$ vault write auth/userpass/users/orgrep password=orgrep policies=demo_wildcard_policy\n\nSuccess! Data written to: auth/userpass/users/orgrep\n\nvault kv put secret/org2/unit1/accounting/team1 key=orgrepbadge1010 value=010734\nvault kv put secret/org2/unit2/finance/team3 key=orgrepbadge1111 value=050501\n\n\n$ vault kv put secret/org2/unit1/accounting/team1 key=orgrepbadge1010 value=010734\n============= Secret Path =============\nsecret/data/org2/unit1/accounting/team1\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-19T08:19:28.240573Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n$ vault kv put secret/org2/unit2/finance/team3 key=orgrepbadge1111 value=050501\n============ Secret Path ============\nsecret/data/org2/unit2/finance/team3\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-19T08:19:37.927417Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\nvault kv get secret/org2/unit1/accounting/team1\nvault kv get secret/org2/unit2/finance/team3\n\n\n$ vault kv get secret/org2/unit1/accounting/team1\n============= Secret Path =============\nsecret/data/org2/unit1/accounting/team1\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-19T08:19:28.240573Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n==== Data ====\nKey      Value\n---      -----\nkey      orgrepbadge1010\nvalue    010734\n\n\n$ vault kv get secret/org2/unit2/finance/team3\n============ Secret Path ============\nsecret/data/org2/unit2/finance/team3\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-19T08:19:37.927417Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n==== Data ====\nKey      Value\n---      -----\nkey      orgrepbadge1111\nvalue    050501\n\nvault kv put secret/org2/unit3/finance/loans/team4 key=orgrepbadge2222 value=060606\nvault kv get secret/org2/unit3/finance/loans/team4\n\n\n]$ vault kv put secret/org2/unit3/finance/loans/team4 key=orgrepbadge2222 value=060606\n=============== Secret Path ===============\nsecret/data/org2/unit3/finance/loans/team4\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-19T08:20:30.829915Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n\n$ vault kv get secret/org2/unit3/finance/loans/team4\n=============== Secret Path ===============\nsecret/data/org2/unit3/finance/loans/team4\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-19T08:20:30.829915Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n==== Data ====\nKey      Value\n---      -----\nkey      orgrepbadge2222\nvalue    060606\n\n#  User for testing policy with parameters\nvault write auth/userpass/users/paramtester password=paramtester policies=demo_policy_with_parameters\n\nSuccess! Data written to: auth/userpass/users/paramtester\n</code></pre>"},{"location":"vault4/2vt_auth_method/#configuring-and-testing-advanced-policies-parameters","title":"Configuring and Testing Advanced Policies: parameters","text":"<p>vault login root</p> <pre><code>vault login hvs.HOd7xIuvGVsiIhDYeOHO5BsV\n\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                hvs.HOd7xIuvGVsiIhDYeOHO5BsV\ntoken_accessor       hB9GYswMqIDKgocQx9TQKtTF\ntoken_duration       \u221e\ntoken_renewable      false\ntoken_policies       [\"root\"]\nidentity_policies    []\npolicies             [\"root\"]\n\n\nvault auth enable userpass # If not yet enabled\n\nvault secrets enable -version=1 -path=secretv1 -description=\"KVv1 for Policy Parameter Testing\" kv\n\nSuccess! Enabled the kv secrets engine at: secretv1/\n</code></pre> <pre><code> vault secrets list\nPath          Type         Accessor              Description\n----          ----         --------              -----------\ncubbyhole/    cubbyhole    cubbyhole_018ad743    per-token private secret storage\nidentity/     identity     identity_7ab8d5df     identity store\nsecret/       kv           kv_7f3f9a79           key/value secret storage\nsecretv1/     kv           kv_5c801065           KVv1 for Policy Parameter Testing\nsys/          system       system_e49aa9b9       system endpoints used for control, policy and debugging\n</code></pre> <p>Policy Parameters Limitations</p> <ul> <li>Parameters NOT supported in KVv2</li> <li>HashiCorp documentation NOT complete</li> </ul>"},{"location":"vault4/2vt_auth_method/#allowed-parameters","title":"Allowed Parameters","text":"<ul> <li>Only the allowed keys are white-listed</li> <li> <p>Must specify at least one of those keys</p> </li> <li> <p><code>demo_policy_with_parameters_allowed.hcl</code></p> </li> </ul> <pre><code># The user that was assigned this policy can only create secrets\n# under the specified path(s)\npath \"secretv1/constrained-allowed/*\" {\n    capabilities = [\"create\"]\n    allowed_parameters = {\n        \"uid\" = []\n        \"title_name\" = [\"King-*\",\"Queen-*\"]\n    }\n}\n</code></pre> <pre><code># 1) Allowed\n# Upload the  with allowed parameters - contains only \"create\" capability (important)\n# This policy is for a user who can only create secrets\nvault policy write demo_policy_with_parameters_allowed demo_policy_with_parameters_allowed.hcl\n\nSuccess! Uploaded policy: demo_policy_with_parameters_allowed\n</code></pre> <ul> <li><code>demo_policy_with_parameters_allowed_readonly.hcl</code></li> </ul> <pre><code># Read-only policy that allows a user to only read secrets\n# created by another user who only had \"create\" capability in a policy with constraining parameters\npath \"secretv1/constrained-allowed/*\" {\n    capabilities = [\"read\"]\n}\n</code></pre> <pre><code># Create two users - one to create (write) secrets and the other to read those secrets\n\nvault write auth/userpass/users/aptester password=aptester policies=demo_policy_with_parameters_allowed\n\n$ vault write auth/userpass/users/aptester password=aptester policies=demo_policy_with_parameters_allowed\nSuccess! Data written to: auth/userpass/users/aptester\n\nvault write auth/userpass/users/aptesterro password=aptesterro policies=demo_policy_with_parameters_allowed_readonly\n\n\n$ vault write auth/userpass/users/aptesterro password=aptesterro policies=demo_policy_with_parameters_allowed_readonly\nSuccess! Data written to: auth/userpass/users/aptesterro\n</code></pre> <pre><code>vault login -method=userpass username=aptester password=aptester\n\n$ vault login -method=userpass username=aptester password=aptester\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nWARNING! The following warnings were returned from Vault:\n\n  * TTL of \"768h\" exceeded the effective max_ttl of \"2m\"; TTL value is capped\n  accordingly\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIHVZ8ZWlYBQg6ZXGO3LZ1yq2yp-Apr9IjKK4p_fySpTRGh4KHGh2cy5STzFEOXdUdERIMDBhODdzOXlpM0pIUVY\ntoken_accessor         nkdUEyfiwbQBFcMRQvnUcCPz\ntoken_duration         2m\ntoken_renewable        true\ntoken_policies         [\"default\" \"demo_policy_with_parameters_allowed\"]\nidentity_policies      []\npolicies               [\"default\" \"demo_policy_with_parameters_allowed\"]\ntoken_meta_username    aptester\n\n\n$ vault kv put secretv1/constrained-allowed/secret1 # Fails with \"Must supply data\" error message\n\nMust supply data\n\n\nvault kv put secretv1/constrained-allowed/secret1 uid=1 # Works\n\n vault kv put secretv1/constrained-allowed/secret1 uid=1\nSuccess! Data written to: secretv1/constrained-allowed/secret1\n</code></pre> <pre><code>vault kv put secretv1/constrained-allowed/secret2 title_name=Prince-Harry # Fails with 403: permission denied\n\n vault kv put secretv1/constrained-allowed/secret2 title_name=Prince-Harry\nError writing data to secretv1/constrained-allowed/secret2: Error making API request.\n\nURL: PUT http://127.0.0.1:8200/v1/secretv1/constrained-allowed/secret2\nCode: 403. Errors:\n\n* 1 error occurred:\n        * permission denied\nDenied Parameters\n\n\n$ vault kv put secretv1/constrained-allowed/secret2 title_name=Queen-Latifah\nSuccess! Data written to: secretv1/constrained-allowed/secret2\n\nvault kv put secretv1/constrained-allowed/secret3 uid=3 title_name=King-George # Works\n\n$ vault kv put secretv1/constrained-allowed/secret3 uid=3 title_name=King-George\nSuccess! Data written to: secretv1/constrained-allowed/secret3\n\nt]$ vault kv put secretv1/constrained-allowed/secret4 status=ruling \nError writing data to secretv1/constrained-allowed/secret4: Error making API request.\n\nURL: PUT http://127.0.0.1:8200/v1/secretv1/constrained-allowed/secret4\nCode: 403. Errors:\n\n* 1 error occurred:\n        * permission denied\n</code></pre>"},{"location":"vault4/2vt_auth_method/#readonly-user","title":"Readonly user","text":"<pre><code>$ vault login -method=userpass username=aptesterro password=aptesterro\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nWARNING! The following warnings were returned from Vault:\n\n  * TTL of \"768h\" exceeded the effective max_ttl of \"2m\"; TTL value is capped\n  accordingly\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIDzk--GR7yht6B2k9n_JDjD-Bbu0JVvaCClekEv4Gt7PGh4KHGh2cy5DSnE1NmRNWllWelEzQ21YRzBpSDJzNGQ\ntoken_accessor         9IsSCfH6XNjeS0YdkMIsFWDm\ntoken_duration         2m\ntoken_renewable        true\ntoken_policies         [\"default\" \"demo_policy_with_parameters_allowed_readonly\"]\nidentity_policies      []\npolicies               [\"default\" \"demo_policy_with_parameters_allowed_readonly\"]\ntoken_meta_username    aptesterro\n\n\n\n\n$ vault kv put secretv1/constrained-allowed/secret2 title_name=Prince-Harry\nError making API request.\n\nURL: GET http://127.0.0.1:8200/v1/sys/internal/ui/mounts/secretv1/constrained-allowed/secret2\nCode: 403. Errors:\n\n* preflight capability check returned 403, please ensure client's policies grant access to path \"secretv1/constrained-allowed/secret2/\"\n\n$ vault kv put secretv1/constrained-allowed/secret2 title_name=Queen-Latifah\nError making API request.\n\nURL: GET http://127.0.0.1:8200/v1/sys/internal/ui/mounts/secretv1/constrained-allowed/secret2\nCode: 403. Errors:\n\n* permission denied\n</code></pre> <pre><code>vault kv get secretv1/constrained-allowed/secret1\n\n\nvault kv get secretv1/constrained-allowed/secret2\n</code></pre>"},{"location":"vault4/2vt_auth_method/#deny-policy","title":"Deny Policy","text":"<pre><code>$ vault server -dev \n\nhvs.EiYGguIh98HdbF3NkfrzQhM6\n\n\n</code></pre> <pre><code>export VAULT_ADDR='http://127.0.0.1:8200'\n&lt;!--export root=hvs.EiYGguIh98HdbF3NkfrzQhM6--&gt;\nvault login hvs.EiYGguIh98HdbF3NkfrzQhM6\n\n\n$ vault login hvs.EiYGguIh98HdbF3NkfrzQhM6\n\n\nKey                  Value\n---                  -----\ntoken                hvs.EiYGguIh98HdbF3NkfrzQhM6\ntoken_accessor       TrsQs8oybr7vyHRuJOJGGohH\ntoken_duration       \u221e\ntoken_renewable      false\ntoken_policies       [\"root\"]\nidentity_policies    []\npolicies             [\"root\"]\n\n\nvault auth enable userpass # If not yet enabled\n\nvault secrets enable -version=1 -path=secretv1 -description=\"KVv1 for Policy Parameter Testing\" kv\n</code></pre> <ul> <li><code>demo_policy_with_parameter_required_readonly.hcl</code></li> </ul> <pre><code># Read-only policy that allows a user to only read secrets\n# created by another user who only had \"create\" capability in a policy with constraining parameters\npath \"secretv1/constrained-required/*\" {\n    capabilities = [\"read\"]\n}\n</code></pre> <pre><code>vault policy write demo_policy_with_parameters_required_readonly demo_policy_with_parameters_required_readonly.hcl \n\nSuccess! Uploaded policy: demo_policy_with_parameters_required_readonly\n\n\nvault policy write demo_policy_with_parameters_required_readonly demo_policy_with_parameters_required_readonly.hcl \n\n$ vault auth enable userpass\n\nvault write auth/userpass/users/rptester password=rptester policies=demo_policy_with_parameters_denied_readonly\n\nSuccess! Data written to: auth/userpass/users/rptester\n\nvault write auth/userpass/users/rptesterro password=rptestero policies= demo_policy_with_parameters_required_readonly.hcl\n</code></pre>"},{"location":"vault4/2vt_auth_method/#denied-parameters","title":"Denied Parameters","text":"<ul> <li>Specified keys are black-listed</li> <li> <p>All other keys are allowed</p> </li> <li> <p><code>demo_policy_with_parameters_denied_readonly.hcl</code></p> </li> </ul> <pre><code># Read-only policy that allows a user to only read secrets\n# created by another user who only had \"create\" capability in a policy with constraining parameters\npath \"secretv1/constrained-denied/*\" {\n    capabilities = [\"read\"]\n}\n</code></pre> <ul> <li><code>demo_policy_with_parameters_denied.hcl</code></li> </ul> <pre><code># The user that was assigned this policy can only create secrets\n# under the specified path(s)\npath \"secretv1/constrained-denied/*\" {\n    capabilities = [\"create\"]\n    denied_parameters = {\n        \"account_id\" = []\n        \"auditor_name\" = [\"Starsky\", \"Hutch\"]\n    }\n}\n</code></pre> <pre><code>vault policy write demo_policy_with_parameters_denied demo_policy_with_parameters_denied.hcl\n\nSuccess! Uploaded policy: demo_policy_with_parameters_denied\n\n\nvault policy write demo_policy_with_parameters_denied_readonly demo_policy_with_parameters_denied_readonly.hcl\n\nSuccess! Uploaded policy: demo_policy_with_parameters_denied_readonly\n</code></pre> <pre><code>vault write auth/userpass/users/dptester password=dptester policies=demo_policy_with_parameters_denied\n\nSuccess! Data written to: auth/userpass/users/dptester\n\nvault write auth/userpass/users/dptesterro password=dptesterro policies=demo_policy_with_parameters_denied_readonly\n\nSuccess! Data written to: auth/userpass/users/dptesterro\n</code></pre> <pre><code>vault login -method=userpass username=dptester password=dptester\n\n$ vault login -method=userpass username=dptester password=dptester\n\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIDa7YzUO0xLj4TwbkCDtXLOjyBm8kHKRvAulsNoqcI3fGh4KHGh2cy5vWkZ2R1JYak1HOXdUQlRZb0gyV0d0S1A\ntoken_accessor         HOera9vmLFhItRdJ951K7Jpi\ntoken_duration         768h\ntoken_renewable        true\ntoken_policies         [\"default\" \"demo_policy_with_parameters_denied\"]\nidentity_policies      []\npolicies               [\"default\" \"demo_policy_with_parameters_denied\"]\ntoken_meta_username    dptester\n\n# Works\n$ vault kv put secretv1/constrained-denied/secret1 status=ready\nSuccess! Data written to: secretv1/constrained-denied/secret1  \n\n\n# Fails\n$ vault kv put secretv1/constrained-denied/secret2 auditor_name=\"Hutch\"\nError writing data to secretv1/constrained-denied/secret2: Error making API request.\n\nURL: PUT http://127.0.0.1:8200/v1/secretv1/constrained-denied/secret2\nCode: 403. Errors:\n\n* 1 error occurred:\n        * permission denied\n\n\n# Fails\n$ vault kv put secretv1/constrained-denied/secret1 account_id=6\nError writing data to secretv1/constrained-denied/secret1: Error making API request.\n\nURL: PUT http://127.0.0.1:8200/v1/secretv1/constrained-denied/secret1\nCode: 403. Errors:\n\n* 1 error occurred:\n        * permission denied\n\n# Works\n$ vault kv put secretv1/constrained-denied/secret2 auditor_name=\"Smith\"\nSuccess! Data written to: secretv1/constrained-denied/secret2\n</code></pre>"},{"location":"vault4/2vt_auth_method/#denied-readonly","title":"Denied readonly","text":"<pre><code>$ vault login -method=userpass username=dptesterro password=dptesterro\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIH83GP4KeicPiUTB6KqZSxZNKp7zgzk3FeGPXwRguIXsGh4KHGh2cy5rRW9SUXREbHpicmNlaXduaTRQbEJiYnU\ntoken_accessor         Akq5kgkrbPaMcBg59OM4d167\ntoken_duration         768h\ntoken_renewable        true\ntoken_policies         [\"default\" \"demo_policy_with_parameters_denied_readonly\"]\nidentity_policies      []\npolicies               [\"default\" \"demo_policy_with_parameters_denied_readonly\"]\n\n$ vault kv get secretv1/constrained-denied/secret1\n===== Data =====\nKey       Value\n---       -----\nstatus    ready\n vault kv get secretv1/constrained-denied/secret2\n======== Data ========\nKey             Value\n---             -----\nauditor_name    Smith\n</code></pre>"},{"location":"vault4/2vt_auth_method/#required","title":"Required","text":"<ul> <li>Required parameters must be specified </li> <li>with every secret creation</li> </ul> <pre><code>$ vault login hvs.EiYGguIh98HdbF3NkfrzQhM6\n</code></pre> <ul> <li><code>demo_policy_with_parameters_required.hcl</code></li> </ul> <pre><code># The user that was assigned this policy can only create secrets\n# under the specified path(s)\npath \"secretv1/constrained-required/*\" {\n    capabilities = [\"create\"]\n    required_parameters = [\"date\", \"purpose\"]\n}\n</code></pre> <ul> <li><code>demo_policy_with_parameters_required_readonly.hcl</code></li> </ul> <pre><code># Read-only policy that allows a user to only read secrets\n# created by another user who only had \"create\" capability in a policy with constraining parameters\npath \"secretv1/constrained-required/*\" {\n    capabilities = [\"read\"]\n}\n\n</code></pre> <pre><code>$ vault policy write demo_policy_with_parameters_required demo_policy_with_parameters_required.hcl\nSuccess! Uploaded policy: demo_policy_with_parameters_required\n\n$ vault policy write demo_policy_with_parameters_required_readonly demo_policy_with_parameters_required_readonly.hcl\nSuccess! Uploaded policy: demo_policy_with_parameters_required_readonly\n</code></pre> <pre><code>$ vault write auth/userpass/users/rptester password=rptester policies=demo_policy_with_parameters_required\n\n$ vault write auth/userpass/users/rptesterro password=rptesterro policies=demo_policy_with_parameters_required_readonly\n</code></pre> <pre><code>$ vault login -method=userpass username=rptester password=rptester\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIE6Vi1YsJae7d8RP1XSFUd8u_253Fn3M6o2yBwoElaWRGh4KHGh2cy5pa1I2bG4zY2twY2FBQmptUkgzU1JiYW4\ntoken_accessor         nj1ckyrOr7Dj7RwCQumLFcka\ntoken_duration         768h\ntoken_renewable        true\ntoken_policies         [\"default\" \"demo_policy_with_parameters_required\"]\nidentity_policies      []\npolicies               [\"default\" \"demo_policy_with_parameters_required\"]\ntoken_meta_username    rptester\n</code></pre> <pre><code>vault kv put secretv1/constrained-required/secret1 \nMust supply data\n\nvault kv put secretv1/constrained-required/secret1 date=20221221\n\n$ vault kv put secretv1/constrained-required/secret1 date=20221221\nError writing data to secretv1/constrained-required/secret1: Error making API request.\n\nURL: PUT http://127.0.0.1:8200/v1/secretv1/constrained-required/secret1\nCode: 403. Errors:\n\n* 1 error occurred:\n        * permission denied\n</code></pre> <pre><code>$ vault kv put secretv1/constrained-required/secret1 date=20221221 purpose=test\nSuccess! Data written to: secretv1/constrained-required/secret1\n</code></pre> <pre><code>$ vault login -method=userpass username=rptesterro password=rptesterro\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIJHUnAY8-GBzkmfbxIe-JznzHlFXCU4x423Xz7oB0RQgGh4KHGh2cy5yQ0loSlplNTMxejBpSjhqSDExbUw3VnM\ntoken_accessor         xLJwQlA0A5Jbf1r90jltzXc9\ntoken_duration         768h\ntoken_renewable        true\ntoken_policies         [\"default\" \"demo_policy_with_parameters_required_readonly\"]\nidentity_policies      []\npolicies               [\"default\" \"demo_policy_with_parameters_required_readonly\"]\ntoken_meta_username    rptesterro\n</code></pre> <pre><code>vault kv get secretv1/constrained-required/secret1\n\n vault kv get secretv1/constrained-required/secret1\n===== Data =====\nKey        Value\n---        -----\ndate       20221221\npurpose    test\n</code></pre>"},{"location":"vault4/2vt_auth_method/#observe-policy-syntax-rules","title":"Observe Policy Syntax Rules","text":""},{"location":"vault4/2vt_auth_method/#identity-revisited","title":"Identity Revisited","text":"<p>External group serves as a mapping to a group that is outside of the identity store. External groups can have one (and only one) alias. This alias should map to a notion of group that is outside of the identity store.</p> <p><code>$ vault login hvs.EiYGguIh98HdbF3NkfrzQhM6</code></p> <pre><code>vault auth enable userpass\n</code></pre> <ul> <li><code>base_policy.hcl</code></li> </ul> <pre><code># Applies to all accounts - entity level\npath \"secret/data/base_*\" {\n   capabilities = [\"create\", \"read\"]\n}\n</code></pre> <ul> <li><code>devteam_policy.hcl</code></li> </ul> <pre><code># Dev Team policy that allows members to do anythig with secrets related to this path\npath \"secret/data/devteam\" {\n   capabilities = [ \"create\", \"read\", \"update\", \"delete\" ]\n}\n</code></pre> <ul> <li><code>training_policy.hcl</code></li> </ul> <pre><code># Training policy\npath \"secret/data/training\" {\n   capabilities = [ \"create\", \"read\", \"update\", \"delete\" ]\n}\n</code></pre> <pre><code>vault policy write base_policy base_policy.hcl\n\nvault policy write devteam_policy devteam_policy.hcl\n\nvault policy write training_policy training_policy.hcl\n\n$ vault policy list\nbase_policy\ndefault\n...\ndevteam_policy\ntraining_policy\nroot\n</code></pre> <p></p>"},{"location":"vault4/2vt_auth_method/#create-users-aka-identities","title":"Create users, aka identities","text":"<pre><code>vault write auth/userpass/users/developer password=\"devpwd\" policies=\"devteam\"\n\nvault write auth/userpass/users/trainer password=\"trainpwd\" policies=\"training\"\n</code></pre> <pre><code># Find the mount accessor for the userpass authentication - Path Column = userpass/, Accessor Column = auth_userpass_&lt;id_string&gt;\nvault auth list -detailed\n\n\n$ vault auth list -detailed\nPath         Plugin      Accessor                  Default TTL    Max TTL    Token Type         Replication    Seal Wrap    External Entropy Access    Options    Description                UUID                                    Version    Running Version          Running SHA256    Deprecation Status\n----         ------      --------                  -----------    -------    ----------         -----------    ---------    -----------------------    -------    -----------                ----                                    -------    ---------------          --------------    ------------------\ntoken/       token       auth_token_2117498c       system         system     default-service    replicated     false        false                      map[]      token based credentials    34ce2682-187e-6ea2-5373-0773700663d2    n/a        v1.12.2+builtin.vault    n/a               n/a\nuserpass/    userpass    auth_userpass_c82872e5    system         system     default-service    replicated     false        false                      map[]      n/a                        c17a4dc4-db8d-26c6-b1bf-f8d2d3fa41a4    n/a        v1.12.2+builtin.vault    n/a               supported\n</code></pre> <pre><code>$ vault auth list -format=json | jq -r '.[\"userpass/\"].accessor' &gt; userpass_accessor.txt\n\n</code></pre> <pre><code># Create entity; generated ID: ff013036-eb35-9096-ff54-a7a2e822a3c9\n\nvault write identity/entity name=\"george-smith\" policies=\"base\" \\\n        metadata=organization=\"SAPUBS Inc.\" \\\n        metadata=devteam=\"The A Team\" \\\n        metadata=secondrole=\"trainer\"\n\nKey        Value\n---        -----\naliases    &lt;nil&gt;\nid         ff013036-eb35-9096-ff54-a7a2e822a3c9\nname       george-smith\n\n\n\n# Add users to entity as aliases\nvault write identity/entity-alias name=\"developer\" \\\n        canonical_id=\"ff013036-eb35-9096-ff54-a7a2e822a3c9\" \\\n        mount_accessor=$(cat userpass_accessor.txt)\n\nKey             Value\n---             -----\ncanonical_id    ff013036-eb35-9096-ff54-a7a2e822a3c9\nid              f81bca34-818d-ba9a-1dd6-c30d797e316e       \n</code></pre> <pre><code>vault write identity/entity-alias name=\"trainer\" \\\n        canonical_id=\"ff013036-eb35-9096-ff54-a7a2e822a3c9\" \\\n        mount_accessor=$(cat userpass_accessor.txt)\n</code></pre> <pre><code># Verify users are present as aliases within the entity\nvault read identity/entity/id/ff013036-eb35-9096-ff54-a7a2e822a3c9      \n\n\n vault read identity/entity/id/ff013036-eb35-9096-ff54-a7a2e822a3c9     \nKey                    Value\n---                    -----\naliases                [map[canonical_id:ff013036-eb35-9096-ff54-a7a2e822a3c9 creation_time:2022-12-21T03:35:13.385434Z custom_metadata:map[] id:f81bca34-818d-ba9a-1dd6-c30d797e316e last_update_time:2022-12-21T03:35:13.385434Z local:false merged_from_canonical_ids:&lt;nil&gt; metadata:&lt;nil&gt; mount_accessor:auth_userpass_c82872e5 mount_path:auth/userpass/ mount_type:userpass name:developer]]\ncreation_time          2022-12-21T03:31:20.107359Z\ndirect_group_ids       []\ndisabled               false\ngroup_ids              []\nid                     ff013036-eb35-9096-ff54-a7a2e822a3c9\ninherited_group_ids    []\nlast_update_time       2022-12-21T03:31:20.107359Z\nmerged_entity_ids      &lt;nil&gt;\nmetadata               map[devteam:The A Team organization:SAPUBS Inc. secondrole:trainer]\nname                   george-smith\nnamespace_id           root\npolicies               [base]\n</code></pre> <pre><code># Log in as \"trainer\" and write a secret\nvault login -method=userpass username=trainer password=trainpwd\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIGJ-P9SriYmGYr3LMPL8Bn7OvsRSCU8GxhhIdzmJnEiQGh4KHGh2cy4xQnc1YmhHMGpxWmZrd2d1N3JIWGtQUUk\ntoken_accessor         EZcYnIxrda03BU38yyHoovNo\ntoken_duration         768h\ntoken_renewable        true\ntoken_policies         [\"default\" \"training\"]\nidentity_policies      []\npolicies               [\"default\" \"training\"]\ntoken_meta_username    trainer\n\n\nvault kv put secret/training created_by=\"trainer\"\n\n==== Secret Path ====\nsecret/data/training\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-21T03:51:59.472203Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n\n\nvault token capabilities secret/data/devteam # Fails with \"deny\" error message; we need to login as \"developer\"\n</code></pre> <pre><code># Log in as \"developer\" and write a secret\nvault login -method=userpass username=developer password=devpwd\n\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIASeuQPWHvZt4T49z9b8f8v4c7wmiYDepEgJEm_NLOlDGh4KHGh2cy54TXBVSldXMjFyZzlyTXdxbVV2RTg0ZXk\ntoken_accessor         l27v79pKeELYUppPKXsM09We\ntoken_duration         768h\ntoken_renewable        true\ntoken_policies         [\"default\" \"devteam\"]\nidentity_policies      [\"base\"]\npolicies               [\"base\" \"default\" \"devteam\"]\ntoken_meta_username    developer\n\n\nvault kv put secret/devteam created_by=\"developer\"\n</code></pre>"},{"location":"vault4/2vt_auth_method/#auditing-devices-explained","title":"Auditing Devices Explained","text":"<p>Auditing</p> <ul> <li> <ol> <li>Log</li> </ol> </li> <li> <ol> <li>Audit (search) </li> </ol> </li> <li> <ol> <li>Diagnose</li> </ol> </li> </ul> <p>Common security requirement is auditing access to secrets, and Vault fulfills this requirement perfectly by offering capabilities to create an audit record of every usage of every token in the system. </p> <p>Every operation with vault is an API request with a corresponding response, and the audit log contains every authenticated interaction with Vault, which includes errors</p>"},{"location":"vault4/2vt_auth_method/#audit-device","title":"Audit Device","text":"<p>An audit device is responsible for managing audit logs. </p> <p>Every request to Vault and response from Vault goes through the configured audit devices. </p> <p>This provides a simple way to integrate Vault with multiple audit logging destinations of different types.</p>"},{"location":"vault4/2vt_auth_method/#high-level-overview","title":"High-Level Overview","text":"<p>Two Types of Devices</p> <ul> <li>Blocked: Device may stop working</li> <li>Non-Blocked</li> </ul>"},{"location":"vault4/2vt_auth_method/#blocked-audit-devices","title":"Blocked Audit Devices","text":"<p>If there are any audit devices enabled, Vault requires that at least one be able to persist the log before completing a Vault request.</p> <p>If you have only one audit device enabled, and it is blocking (network block, etc.), then Vault will be unresponsive.</p> <p>Vault will not complete any requests until the audit device can write.</p> <p>If you have more than one audit device, then Vault will complete the request as long as one audit device persists the log.</p> <p>Vault will not respond to requests if audit devices are blocked because audit logs are critically important and ignoring blocked requests opens an avenue for attack. Be absolutely certain that your audit devices cannot block.</p>"},{"location":"vault4/2vt_auth_method/#back-blocking-devices-with-other-ones","title":"Back blocking devices with other ones","text":"<p>Blocked audit device behavior</p> <p></p>"},{"location":"vault4/2vt_auth_method/#blocked-file-audit-device","title":"Blocked file audit device","text":"<p>A common condition that can arise to block a file audit device is lack of capacity on the storage device containing the audit device log file. </p> <p>If the storage capacity is exhausted, the audit device will effectively be blocked and Vault will stop servicing requests until sufficient storage capacity is made available.</p>"},{"location":"vault4/2vt_auth_method/#audit-device-demos","title":"Audit Device Demos","text":"<p>File Audit Device</p> <ul> <li>Local logging </li> <li>NFS Logging</li> </ul> <p>Socket Audit Device</p> <ul> <li>Log streaming </li> <li>Log management</li> </ul> <pre><code>$ vault login hvs.EiYGguIh98HdbF3NkfrzQhM6\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                hvs.EiYGguIh98HdbF3NkfrzQhM6\ntoken_accessor       TrsQs8oybr7vyHRuJOJGGohH\ntoken_duration       \u221e\ntoken_renewable      false\ntoken_policies       [\"root\"]\nidentity_policies    []\npolicies             [\"root\"]\n</code></pre> <pre><code># Create log file and change its permissions to make it writable by Vault\nsudo touch /var/log/vault_audit.log &amp;&amp; sudo chown gsyyl:staff /var/log/vault_audit.log\n\n\n# Log in as root and enable the file audit device\nvault login root &amp;&amp; vault audit enable file file_path=/var/log/vault_audit.log\n\n# Enable socket audit device\nvault audit enable socket address=127.0.0.1:9090 socket_type=tcp log_raw=true\n</code></pre> <p></p>"},{"location":"vault4/2vt_auth_method/#log-message-transformations","title":"Log Message Transformations","text":"<ul> <li>JSON</li> <li>Filter</li> <li>Enrich</li> <li>Split</li> <li>Combine</li> <li>Generate Reports</li> </ul> <p>Log Message Storage</p> <ul> <li>Database - times series, relational, NoSQL, etc.</li> <li>XML files - for legacy applications</li> <li>JSON format - e.g. to analyze the behavior of micro services</li> </ul>"},{"location":"vault4/3vt_token/","title":"L3 Working with Tokens","text":""},{"location":"vault4/3vt_token/#many-users-systems-all-using-tokens","title":"Many Users &amp; Systems - All Using Tokens","text":"<p>All users, applications, and systems rely on tokens to create and obtain secrets from Vault. </p> <p>First, they get the tokens and then use them to gain access to target systems at the proper authorization levels.</p> <p>External users and systems also rely on Vault for authentication and authorization.</p> <p>These include cloud users, applications, and services, as well as mobile apps and remote employees. </p>"},{"location":"vault4/3vt_token/#token-types","title":"Token Types","text":""},{"location":"vault4/3vt_token/#service-token","title":"Service Token","text":"<ul> <li> <p>Regular</p> <ul> <li>ttl <code>and/or</code> </li> <li>max-ttl </li> <li>stored</li> </ul> </li> </ul> <p>Regular tokens with time to live that can also have a max time to live, which are stored internally by Vault. </p> <p>Regular tokens with time to live that can also have a max time to live, which are stored internally by Vault.</p> <ul> <li> <p>Use Limit</p> <ul> <li><code>ttl &amp; max-ttl</code> </li> <li><code># of uses</code> </li> <li>Expire @ maxttl or max # use</li> </ul> </li> </ul> <p>Use limit tokens that also have time to live and max time to live, but also add a number of times the token can be used into the mix.</p> <p>These tokens expire either when the max number of uses is reached or when their ttl period expires. </p> <ul> <li> <p>Periodic</p> <ul> <li>ttl</li> <li>No max-ttl</li> <li>Long-running services</li> </ul> </li> </ul> <p>Periodic tokens can only be created by root and sudo users. </p> <p>They have a ttl and no max\u2011ttl, and thus can be renewed indefinitely before they expire</p> <p>This token type is suitable for long\u2011running services whose ability to regenerate a token is problematic. </p> <ul> <li> <p>Short-lived</p> <ul> <li>Short ttl </li> <li>No max-ttl</li> </ul> </li> </ul> <p>Short\u2011lived tokens simply have a very short time to live, for example, 60 seconds, and no max time to live.</p> <ul> <li>Orphan<ul> <li>Do NOT expire when parent expires</li> </ul> </li> </ul> <p>These can be of any of the other service subtypes, but get revoked the moment their parent is revoked, either when its tto expires or a Vault admin manually revokes their parent.</p> <ul> <li>Root<ul> <li>Do NOT expire</li> </ul> </li> </ul>"},{"location":"vault4/3vt_token/#batch","title":"Batch","text":"<ul> <li>Not stored - in-memory only </li> <li>Light weight - limited features </li> <li>Fixed ttl</li> <li>No accessor </li> <li>Cannot be renewed </li> <li>Must be expressly created: <code>-type=batch</code></li> <li>Cannot be root tokens (the latter never expire)</li> <li>ID begins with \u201cb.\u201d </li> <li>Can be used across Vault clusters </li> <li>Designed for scalability</li> </ul> <p>Batch tokens are not persisted in backend storage. they're only kept in\u2011memory while in use. </p> <p>They're lightweight, which means they have limited features, like a fixed time to live and no accessor.</p> <p>They cannot be renewed and must be expressly created with the <code>\u2011type=batch</code> option</p> <p>Their ID begins with a \"b,\" followed by a dot. </p> <p>Can be used across Vault clusters with performance replication enabled. This feature is only available in Vault Enterprise and allows for batch tokens to be encrypted and sent across the barrier to other clusters.</p> <p>Finally, they are designed for scalability, or more specifically, for cases where your application needs to scale quickly to hundreds or thousands of instances. </p> <p></p> <p>Performance Replication - Vault Enterprise</p> <p></p>"},{"location":"vault4/3vt_token/#demo-token-types-and-token-lifecycle","title":"Demo: Token Types and Token Lifecycle","text":""},{"location":"vault4/3vt_token/#token-lease","title":"Token Lease","text":"<p>Leases don't live forever. </p> <p>They have a time to live, or a TTL, which determines how long a token has access to secrets. </p> <p>When the lease TTL is up, Vault expires the token by revoking it. </p> <p>Administrators can also revoke tokens manually using the CLI or API. </p> <p>Tokens can also be issued with a limited number of uses. </p> <p>Leases force clients to periodically authenticate to Vault to maintain access to secrets.</p> <p>This prevents long\u2011lived secrets from being used to compromise data security. </p> <p>For token lifecycle management, just refer to this slide that illustrates TTL, explicit Max TTL, and token renewal</p>"},{"location":"vault4/3vt_token/#leases","title":"Leases","text":"<ul> <li>Tokens can be issued with limited number of uses</li> <li>Leases require clients to re-authenticate</li> </ul> <ul> <li><code>devteam_policy.hcl</code></li> </ul> <pre><code># Dev Team policy that allows members to do anythig with secrets related to this path\npath \"secret/data/devteam\" {\n   capabilities = [ \"create\", \"read\", \"update\", \"delete\" ]\n}\n</code></pre> <pre><code># Create a policy for testing\nvault policy write devteam devteam_policy.hcl\n\n# Create a regular token without specifying a ttl or a max - we specify policy to avoid creating another root token\nvault token create -policy=devteam_policy\n\n$ vault token create -policy=devteam_policy\nKey                  Value\n---                  -----\ntoken                hvs.CAESIH1u8Sj9UWGjhqCWXQy-JQyeLnYTxn6GmNCbdf4slRN4Gh4KHGh2cy5IVVJBbmoxdVNUT2RjQUhLaUxaank5Qnc\ntoken_accessor       ZoRcoLZbklHz3uNItCynNybS\ntoken_duration       768h\ntoken_renewable      true\ntoken_policies       [\"default\" \"devteam_policy\"]\nidentity_policies    []\n\n$ vault token lookup hvs.CAESIH1u8Sj9UWGjhqCWXQy-JQyeLnYTxn6GmNCbdf4slRN4Gh4KHGh2cy5IVVJBbmoxdVNUT2RjQUhLaUxaank5Qnc\nKey                 Value\n---                 -----\naccessor            ZoRcoLZbklHz3uNItCynNybS\ncreation_time       1671715446\ncreation_ttl        768h\ndisplay_name        token\nentity_id           n/a\nexpire_time         2023-01-23T21:24:06.922434+08:00\nexplicit_max_ttl    0s\nid                  hvs.CAESIH1u8Sj9UWGjhqCWXQy-JQyeLnYTxn6GmNCbdf4slRN4Gh4KHGh2cy5IVVJBbmoxdVNUT2RjQUhLaUxaank5Qnc\nissue_time          2022-12-22T21:24:06.922439+08:00\nmeta                &lt;nil&gt;\nnum_uses            0\norphan              false\npath                auth/token/create\npolicies            [default devteam_policy]\nrenewable           true\nttl                 767h59m38s\ntype                service\n\n$ vault policy list | grep dev\ndevteam_policy\n</code></pre> <pre><code># Create regular token with ttl equal to 30 seconds and max ttl equalt to 60 seconds\nvault token create -policy=devteam -ttl=30s -explicit-max-ttl=60s\n\n$ vault token create -policy=devteam -ttl=30s -explicit-max-ttl=60s\nKey                  Value\n---                  -----\ntoken                hvs.CAESIDBOJ6glyIN2JeCq4cdW8BrnHTtLVRc5HxsmT8oC2FbEGh4KHGh2cy5zMm9vbWRGMlkySWZacmh5S1NBQmR4ZDU\ntoken_accessor       A30nfwE746aVSdhw8QtFW1In\ntoken_duration       30s\ntoken_renewable      true\ntoken_policies       [\"default\" \"devteam\"]\nidentity_policies    []\npolicies             [\"default\" \"devteam\"]\n</code></pre> <pre><code> vault token create -policy=devteam -ttl=30s -explicit-max-ttl=60s\nKey                  Value\n---                  -----\ntoken                hvs.CAESINGSFhX_Vc5wEnnFTw9qMb0V1BQrp46ukq572m6iqejSGh4KHGh2cy5lWXk4N2FhbkVLQnF3SUF1Nm5tSW5SS2c\ntoken_accessor       IYghxZIunASGjp662CxNLPol\ntoken_duration       30s\ntoken_renewable      true\ntoken_policies       [\"default\" \"devteam\"]\nidentity_policies    []\npolicies             [\"default\" \"devteam\"]\n\n\n$ vault token lookup hvs.CAESINGSFhX_Vc5wEnnFTw9qMb0V1BQrp46ukq572m6iqejSGh4KHGh2cy5lWXk4N2FhbkVLQnF3SUF1Nm5tSW5SS2c\nKey                 Value\n---                 -----\naccessor            IYghxZIunASGjp662CxNLPol\ncreation_time       1671715594\ncreation_ttl        30s\ndisplay_name        token\nentity_id           n/a\nexpire_time         2022-12-22T21:27:04.477516+08:00\nexplicit_max_ttl    1m\nid                  hvs.CAESINGSFhX_Vc5wEnnFTw9qMb0V1BQrp46ukq572m6iqejSGh4KHGh2cy5lWXk4N2FhbkVLQnF3SUF1Nm5tSW5SS2c\nissue_time          2022-12-22T21:26:34.477522+08:00\nmeta                &lt;nil&gt;\nnum_uses            0\norphan              false\npath                auth/token/create\npolicies            [default devteam]\nrenewable           true\nttl                 16s\ntype                service\n</code></pre>"},{"location":"vault4/3vt_token/#vault-token-renew","title":"<code>vault token renew</code>","text":"<pre><code>$  vault token renew hvs.CAESIDhAEwP-pMqGQpe5Z9tPHHQ5PLoUc8SwhZ6eFkkK244CGh4KHGh2cy51dTRaTWFiY1Byd1pUT05BdW91WlVTbGk\nKey                  Value\n---                  -----\ntoken                hvs.CAESIDhAEwP-pMqGQpe5Z9tPHHQ5PLoUc8SwhZ6eFkkK244CGh4KHGh2cy51dTRaTWFiY1Byd1pUT05BdW91WlVTbGk\ntoken_accessor       FWaIz6NW4zMCBLIydMbF1nIn\ntoken_duration       30s\ntoken_renewable      true\ntoken_policies       [\"default\" \"devteam\"]\nidentity_policies    []\npolicies             [\"default\" \"devteam\"]\n</code></pre> <pre><code>$  vault token lookup hvs.CAESIFhcTv6ykU4Kw7Zu016QKlsXsf3gBpVRrxI0_5A80ijRGh4KHGh2cy5qdWxncVk3N2xiVW5iU0UxR2NqVXVIcEg\n\n\n....\nlast_renewal         2022-12-22T21:30:21.783806+08:00\nlast_renewal_time    1671715821\n...\n</code></pre>"},{"location":"vault4/3vt_token/#create-use-limit-token","title":"Create Use Limit token","text":"<pre><code>vault token create -policy=devteam -ttl=30s -explicit-max-ttl=60s -use-limit=3\n\n\nvault token create -policy=devteam -ttl=2m -explicit-max-ttl=4m -use-limit=3\n</code></pre> <pre><code> vault token create -policy=devteam -ttl=30s -explicit-max-ttl=60s -use-limit=3\nKey                  Value\n---                  -----\ntoken                hvs.CAESIAEL8l_QR6PkgBQKoTU7gjCvvG2wBWiklq4LgOMN1zckGh4KHGh2cy5PcG9GcjdqN2dFaUJBazNuajV0bng1NnE\ntoken_accessor       RJQUfOWBZGlxdg58x0BE3Pj3\ntoken_duration       30s\ntoken_renewable      true\ntoken_policies       [\"default\" \"devteam\"]\nidentity_policies    []\npolicies             [\"default\" \"devteam\"]\n\n$ vault login hvs.CAESIAEL8l_QR6PkgBQKoTU7gjCvvG2wBWiklq4LgOMN1zckGh4KHGh2cy5PcG9GcjdqN2dFaUJBazNuajV0bng1NnE\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                hvs.CAESIAEL8l_QR6PkgBQKoTU7gjCvvG2wBWiklq4LgOMN1zckGh4KHGh2cy5PcG9GcjdqN2dFaUJBazNuajV0bng1NnE\ntoken_accessor       RJQUfOWBZGlxdg58x0BE3Pj3\ntoken_duration       20s\ntoken_renewable      true\ntoken_policies       [\"default\" \"devteam\"]\nidentity_policies    []\npolicies             [\"default\" \"devteam\"]\n</code></pre> <p>Over 30s</p> <pre><code>$ vault login hvs.CAESIAEL8l_QR6PkgBQKoTU7gjCvvG2wBWiklq4LgOMN1zckGh4KHGh2cy5PcG9GcjdqN2dFaUJBazNuajV0bng1NnE\nError authenticating: error looking up token: Error making API request.\n\nURL: GET http://127.0.0.1:8200/v1/auth/token/lookup-self\nCode: 403. Errors:\n\n* permission denied\n</code></pre>"},{"location":"vault4/3vt_token/#use-limit","title":"Use limit","text":"<pre><code>$ vault login hvs.EiYGguIh98HdbF3NkfrzQhM6\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                hvs.EiYGguIh98HdbF3NkfrzQhM6\ntoken_accessor       TrsQs8oybr7vyHRuJOJGGohH\ntoken_duration       \u221e\ntoken_renewable      false\ntoken_policies       [\"root\"]\nidentity_policies    []\npolicies             [\"root\"]\n</code></pre> <pre><code>vault token create -policy=devteam -ttl=2m -explicit-max-ttl=4m -use-limit=3\n\n$ vault token create -policy=devteam -ttl=2m -explicit-max-ttl=4m -use-limit=3\nKey                  Value\n---                  -----\ntoken                hvs.CAESIG_fDU4XR2uronpEiwVkHWMWO8GqR0ubRnLQnMoTUaH1Gh4KHGh2cy5rUm9FNG9TOVJQMGRMcW40SlJ3RlV6SlA\ntoken_accessor       EmVPTaGsZzJINQzVQL1N16Fj\ntoken_duration       2m\ntoken_renewable      true\ntoken_policies       [\"default\" \"devteam\"]\nidentity_policies    []\npolicies             [\"default\" \"devteam\"]\n</code></pre> <pre><code>vault login hvs.CAESIG_fDU4XR2uronpEiwVkHWMWO8GqR0ubRnLQnMoTUaH1Gh4KHGh2cy5rUm9FNG9TOVJQMGRMcW40SlJ3RlV6SlA\n</code></pre> <pre><code>$ vault token lookup hvs.CAESIB3VTtkE7T_Xf5ALfsmzM6QHrWfoZkUQgqzwtbe2R0PsGh4KHGh2cy5scmEwSFduTExiVTdrWXRvajlmRzJjc2s\nKey                 Value\n---                 -----\n...\nnum_uses            3\n...\n</code></pre>"},{"location":"vault4/3vt_token/#enable-userpass-authentication-method","title":"Enable userpass authentication method","text":"<pre><code># Login as root\n# Enable userpass authentication method\n\nvault login  hvs.EiYGguIh98HdbF3NkfrzQhM6\n\nvault auth enable userpass\n\n# Create a sample user and log in with that user\nvault write auth/userpass/users/tokentester password=tokentester policies=devteam\n\nvault login -method=userpass username=tokentester password=tokentester\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESIIr8pythMlIOWgdOFdN46bTQxtiCYdE2ZLaxfiJOF7xbGh4KHGh2cy5OVUtBc2V6TWZrSVI0UFF4ZkhLQlZzOGs\ntoken_accessor         VdnFoTgvOUT78lSVXeiSqPYb\ntoken_duration         768h\ntoken_renewable        true\ntoken_policies         [\"default\" \"devteam\"]\nidentity_policies      []\npolicies               [\"default\" \"devteam\"]\ntoken_meta_username    tokentester\n\n\n# Attempt to create periodic token\nvault token create -policy=devteam -period=6h # Fails because we are not root or sudo user\n\nError creating token: Error making API request.\n\nURL: POST http://127.0.0.1:8200/v1/auth/token/create\nCode: 403. Errors:\n\n* 1 error occurred:\n        * permission denied\n\n# Try with root\n\n$ vault login hvs.EiYGguIh98HdbF3NkfrzQhM6\n\n$ vault token create -policy=devteam -period=6h # OK\nKey                  Value\n---                  -----\ntoken                hvs.CAESIHuf_jIdABA6VM78zqw9ReS51Kw1iy6LEl4GD5NTxqOOGh4KHGh2cy4wVUcxZEZCTTNzaDFRRkZrQVQxQzJmbDk\ntoken_accessor       6KSmLWarfZTEmClANRjnG37G\ntoken_duration       6h\ntoken_renewable      true\ntoken_policies       [\"default\" \"devteam\"]\nidentity_policies    []\npolicies             [\"default\" \"devteam\"]\n\n$ vault token lookup hvs.CAESIHuf_jIdABA6VM78zqw9ReS51Kw1iy6LEl4GD5NTxqOOGh4KHGh2cy4wVUcxZEZCTTNzaDFRRkZrQVQxQzJmbDk\n\n$ vault token lookup hvs.CAESIHuf_jIdABA6VM78zqw9ReS51Kw1iy6LEl4GD5NTxqOOGh4KHGh2cy4wVUcxZEZCTTNzaDFRRkZrQVQxQzJmbDk\nKey                 Value\n---                 -----\naccessor            6KSmLWarfZTEmClANRjnG37G\ncreation_time       1671717703\ncreation_ttl        6h\ndisplay_name        token\nentity_id           n/a\nexpire_time         2022-12-23T04:01:43.545968+08:00\nexplicit_max_ttl    0s\nid                  hvs.CAESIHuf_jIdABA6VM78zqw9ReS51Kw1iy6LEl4GD5NTxqOOGh4KHGh2cy4wVUcxZEZCTTNzaDFRRkZrQVQxQzJmbDk\nissue_time          2022-12-22T22:01:43.545971+08:00\nmeta                &lt;nil&gt;\nnum_uses            0\norphan              false\npath                auth/token/create\nperiod              6h\npolicies            [default devteam]\nrenewable           true\nttl                 5h58m5s\ntype                service\n</code></pre>"},{"location":"vault4/3vt_token/#periodic-tokens","title":"Periodic Tokens","text":"<ul> <li>Often No Max TTL</li> </ul> <p>Long one when they do week, month, etc.</p> <ul> <li>Fit for Systems / Apps</li> </ul> <p>Not Humans - password reset for them is different</p> <ul> <li>Repeated Actions</li> </ul> <p>Every 5 min, every week, every month, etc.</p> <ul> <li>Batch Jobs</li> </ul> <p>Payroll, reconciliation, processing returns, etc.</p> <ul> <li>Frequent Events</li> </ul> <p>Generating an insurance quote</p> <p>In some cases, having a token be revoked would be problematic -- for instance, if a long-running service needs to maintain its SQL connection pool over a long period of time. In this scenario, a periodic token can be used. </p> <p>Periodic tokens can be created in a few ways:</p> <ul> <li>By having sudo capability or a root token with the <code>auth/token/create</code> endpoint</li> <li>By using token store roles</li> <li>By using an auth method that supports issuing these, such as AppRole</li> </ul>"},{"location":"vault4/3vt_token/#token-role","title":"Token role","text":"<p>Please note that when we use token store role, the current value of the role's period setting will be used when the token is being renewed, </p> <p>Which implies that if you change the value by updating the role, that new value will be used next time the token is renewed. </p> <p>Max TTL specified - Vault will revoke token after the explicit max TTL expires</p> <p></p> <p></p> <pre><code># Create short-lived token\nvault token create -policy=devteam -ttl=15s\n\n\nvault login -method=userpass username=tokentester password=tokentester\n\n$ vault login -method=userpass username=tokentester password=tokentester\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                    Value\n---                    -----\ntoken                  hvs.CAESINPv9wsw2b73HrLJYBagYgcXN5hJCR-N2ReFCdAQy_xfGh4KHGh2cy5FRzVOcmcwb2NVQURURGRWclhHaG5TdXk\ntoken_accessor         wFij2qnXtytj2ze8z4LZElum\ntoken_duration         768h\ntoken_renewable        true\ntoken_policies         [\"default\" \"devteam\"]\nidentity_policies      []\npolicies               [\"default\" \"devteam\"]\ntoken_meta_username    tokentester\n\n\n$ vault token create -orphan\nError creating token: Error making API request.\n\nURL: POST http://127.0.0.1:8200/v1/auth/token/create\nCode: 403. Errors:\n\n* 1 error occurred:\n        * permission denied\n</code></pre> <p>After logging in with token tester, we attempt to create an orphan token, but we fail because our user does not have sudo privileges.</p> <pre><code>vault login hvs.EiYGguIh98HdbF3NkfrzQhM6\n\nvault token create -orphan\n\n$ vault token create -orphan\nKey                  Value\n---                  -----\ntoken                hvs.2V4XRoX99MV520WXmbIvKLiI\ntoken_accessor       TA23xPGQhuLnbpplszEt5xqM\ntoken_duration       \u221e\ntoken_renewable      false\ntoken_policies       [\"root\"]\nidentity_policies    []\npolicies             [\"root\"]\n</code></pre>"},{"location":"vault4/3vt_token/#root-tokens-best-practices","title":"Root Tokens Best Practices","text":"<ul> <li>Avoid creating additional root tokens</li> <li>Revoke root token(s) after initial configuration</li> </ul> <p>A parent token prevents the child tokens under it to be renewed indefinitely. When the parent token expires or gets manually revoked, all child tokens it spawned are also revoked</p> <p>By contrast, orphan tokens continue to exist independently of the token that was used to create them. </p>"},{"location":"vault4/3vt_token/#token-hierarchies","title":"Token Hierarchies","text":"<p>When parent TTL expires or parent is revoked, children also expire or are revoked</p>"},{"location":"vault4/3vt_token/#create-orphan-token","title":"Create orphan token","text":"<pre><code># Crate a batch token\nvault token create -type=batch -policy=devteam -ttl=30m\n</code></pre>"},{"location":"vault4/3vt_token/#response-wrapping","title":"Response Wrapping","text":""},{"location":"vault4/3vt_token/#response-wrapping_1","title":"Response Wrapping","text":"<ul> <li>Level of indirection - retrieve hidden secret\uff0c or a hidden token</li> <li>Secret / token retrieval happens only once</li> </ul>"},{"location":"vault4/3vt_token/#single-retrieval","title":"Single Retrieval","text":"<ul> <li>Single client can retrieve</li> </ul> <p>Reduced risk of secret exposure</p> <ul> <li>Trigger an alert</li> </ul> <p>In case of bad-actor intercept</p> <p>In case of bad actor intercepts the wrapping token and attempts to use it to get to the secret after our client has already used the wrapping token.</p>"},{"location":"vault4/3vt_token/#response-wrapping_2","title":"Response Wrapping","text":"<p>Response wrapping tends to be used in situations where you lack a reliable authentication mechanism like AWS Identity and Access Management or Azure's Active Directory.  </p> <ul> <li>Lack of reliable authentication method </li> <li>Additional layer of security - guaranteethe secret ends up with the target recipient</li> </ul>"},{"location":"vault4/3vt_token/#tokens-as-secrets","title":"Tokens as Secrets","text":"<p>As you can probably already suspect, tokens themselves become secrets and need to be protected. This is especially true for keys delivered via automation to applications and systems.</p> <p>There is a special term HashiCorp uses for the secure delivery of keys to deployed applications. It is called Secure Introduction. </p> <p>Secrets Delivered by Automation Systems</p> <p></p>"},{"location":"vault4/3vt_token/#automation-system-categories","title":"Automation System Categories","text":"<p>The keys are usually delivered by an automation system. The categories of such systems include: </p> <ul> <li>Container orchestrators, the main ones being Kubernetes and Docker Swarm, </li> <li>Continuous integration and continuous delivery systems like Jenkins, </li> <li>Configuration management systems like Chef, Puppet, and Ansible. </li> </ul> <p>These systems need to be configured to connect to Vault, then generate a token from Vault, and embed it in a software build or another construct with a high degree of automation. </p> <p></p>"},{"location":"vault4/3vt_token/#response-wrapping-cases","title":"Response Wrapping Cases","text":"<ul> <li>Wrap exiting secret</li> </ul> <p>Written to a path in Vault</p> <ul> <li>Secret does not yet exit</li> </ul> <p>Even Vault admins cannot see it</p> <p>Then the applications that need the secrets can request them directly from Vault using the embedded wrapping token. </p> <p>There are two cases that we can apply response wrapping to. </p> <ul> <li>The first one involves wrapping a secret that already exists and was written to a path in Vault. </li> <li>And the second case is when we want to generate a token or a secret that does not yet exist, and we don't want even the Vault administrator to be able to see it, unless of course, the administrator decides to go ahead and use the wrapping token that will also be generated. </li> </ul>"},{"location":"vault4/3vt_token/#wrapping-token-use-restrictions","title":"Wrapping Token Use Restrictions","text":"<p>For the second case, the wrapping token is limited to only two uses, once to write the wrapped token, and once to read it.</p> <ul> <li>Write wrapped token</li> </ul> <p>This happens when the new secret is generated</p> <ul> <li>Read wrapped token</li> </ul> <p>This happens when a client uses the wrapping token to get to the secret</p> <p>This wrapped or permanent token is stored in a cubbyhole of the cubbyhole secrets engine. </p> <pre><code># These are the general commands\nvault token renew [&lt;token_id&gt; | &lt;accessor_id&gt;]\nvault token revoke [&lt;token_id&gt; | &lt;accessor_id&gt;]\n</code></pre> <pre><code>\n# Create secret and then wrap existing secret\nvault kv put secret/db-admin pwd=dbadmin_pwd\n\n$ vault kv put secret/db-admin pwd=dbadmin_pwd\n==== Secret Path ====\nsecret/data/db-admin\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-12-23T15:19:31.896734Z\ncustom_metadata    &lt;nil&gt;\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\nvault kv get -wrap-ttl=420 secret/db-admin\n\n$ vault kv get -wrap-ttl=420 secret/db-admin\nKey                              Value\n---                              -----\nwrapping_token:                  hvs.CAESILdV_ojWejCHAOreO4P-I5SnQlVi5bBafTs97yjGvnbUGh4KHGh2cy5nNlBXWkd1bkQyVUxObktCcThUSWhLU08\nwrapping_accessor:               TdNcOIZiiwH6MbZSnrBTnNaw\nwrapping_token_ttl:              7m\nwrapping_token_creation_time:    2022-12-23 23:21:20.044418 +0800 CST\nwrapping_token_creation_path:    secret/data/db-admin\n</code></pre> <pre><code>curl --header \"X-Vault-Token: hvs.CAESILdV_ojWejCHAOreO4P-I5SnQlVi5bBafTs97yjGvnbUGh4KHGh2cy5nNlBXWkd1bkQyVUxObktCcThUSWhLU08\" --request POST $VAULT_ADDR/v1/sys/wrapping/unwrap | jq\n\n\n curl --header \"X-Vault-Token: hvs.CAESILdV_ojWejCHAOreO4P-I5SnQlVi5bBafTs97yjGvnbUGh4KHGh2cy5nNlBXWkd1bkQyVUxObktCcThUSWhLU08\" --request POST $VAULT_ADDR/v1/sys/wrapping/unwrap | jq\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   317  100   317    0     0  23165      0 --:--:-- --:--:-- --:--:--  103k\n{\n  \"request_id\": \"3f1e3232-081b-e056-3bf1-ca85fb48765f\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"data\": {\n      \"pwd\": \"dbadmin_pwd\"\n    },\n    \"metadata\": {\n      \"created_time\": \"2022-12-23T15:19:31.896734Z\",\n      \"custom_metadata\": null,\n      \"deletion_time\": \"\",\n      \"destroyed\": false,\n      \"version\": 1\n    }\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n</code></pre> <pre><code># Generate and store a token as a secret in a cubbyhole \nvault token create -wrap-ttl=420 -policy=devteam\n\n$ vault token create -wrap-ttl=420 -policy=devteam\nKey                              Value\n---                              -----\nwrapping_token:                  hvs.CAESIB6OZIdLlNUsLV7NrheNG9Q9zZxnH8vJb5Nc_OdovLb8Gh4KHGh2cy5PSFZaNVVIeGMyTnhqYUt1bzRSWFk3WVE\nwrapping_accessor:               BdCRU6wdKyLlyAMpQBvlTtdO\nwrapping_token_ttl:              7m\nwrapping_token_creation_time:    2022-12-23 23:23:32.440229 +0800 CST\nwrapping_token_creation_path:    auth/token/create\nwrapped_accessor:                AFcuSny3EAbOvw1GPpXRhOya\n\n\nvault unwrap hvs.CAESIB6OZIdLlNUsLV7NrheNG9Q9zZxnH8vJb5Nc_OdovLb8Gh4KHGh2cy5PSFZaNVVIeGMyTnhqYUt1bzRSWFk3WVE\n\n$ vault unwrap hvs.CAESIB6OZIdLlNUsLV7NrheNG9Q9zZxnH8vJb5Nc_OdovLb8Gh4KHGh2cy5PSFZaNVVIeGMyTnhqYUt1bzRSWFk3WVE\nKey                  Value\n---                  -----\ntoken                hvs.CAESIJke72mTeSOK1BtSqsUUbT6H_0I2omptwS_4V_slfQqgGh4KHGh2cy45MTF5WHowMElxbDVncHpsMDlaNzZyZko\ntoken_accessor       AFcuSny3EAbOvw1GPpXRhOya\ntoken_duration       768h\ntoken_renewable      true\ntoken_policies       [\"default\" \"devteam\"]\nidentity_policies    []\npolicies             [\"default\" \"devteam\"]\n</code></pre>"},{"location":"vault4/3vt_token/#ldap-authentication-method","title":"LDAP Authentication Method","text":"<p>We're going to use Vault in combination with Apache Directory Studio, which is a completely free, open\u2011source implementation of the LDAP protocol. </p> <p>First, enable the LDAP authentication method. Then, we need a policy for our dev team, so let's upload one. The policy itself just gives us the run\u2011of\u2011the\u2011mill CRUD capabilities on that path. </p> <pre><code> # Enable and configure LDAP authentication method; cn=vaultadmin sn=vaultadmin userPassword=vaultadmin\n# billykid, pwd=b1g23f0ot, same for gcharm user\n# groupdn=\"ou=groups,ou=system\" \\\n# groupfilter=\"(&amp;(objectClass=person)(cn={{.Username}}))\" \\\n</code></pre> <ul> <li>Configuring Vault to talk to our open source LDAP server. </li> <li>We are writing to the <code>auth/ldap/config</code> path, and as part of the configuration, we specify the URL that begins with the LDAP protocol, followed by the domain of our server and its port number, 10389. </li> <li>We set our username to cn, or common name, that is essentially equivalent to user id in our case. </li> <li>This is followed by the user distinguished name, the common identifier for entities in LDAP where the first component, cn, is set to vaultadmin. </li> <li><code>groupdn</code> that will be used to find out what group our user belongs to. </li> <li><code>binddn</code> here is the same as the userdn, which specified the bindpass.</li> <li>The value here needs to match what we have set up in LDAP.</li> <li>Groupattr is set to uniqueMember</li> <li>We set <code>insecure_tls</code> to true because for testing purposes, we don't need any encryption, and correspondingly, we specify false for starttls.</li> </ul> <pre><code>vault auth enable ldap\nvault write auth/ldap/config \\\nurl=\"ldap://example.com:10389\" \\\nuserattr=\"cn\" \\\nuserdn=\"cn=vaultadmin,ou=users,ou=system\" \\\ngroupdn=\"ou=groups,ou=system\" \\\ngroupfilter=\"(|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))\"\nbinddn=\"cn=vaultadmin,ou=users,ou=system\" \\\nbindpass=\"vaultadmin\" \\\ngroupattr=\"uniqueMember\" \\\ninsecure_tls=true \\\nstarttls=false\n</code></pre> <p>PRODUCTION</p> <ul> <li><code>insecure tls=false</code></li> <li><code>starttls=true</code></li> </ul> <p>For production, you will have to set the last two options to false and true respectively and specify the CA certificate with the certificate option whose value is a file name preceded by an at sign</p> <pre><code># Valid search base:\n# cn=vaultadmin,ou=users,ou=system\n# filter=\"(objectClass=*)\" \\ - to filter users but is not part of the Vault documentation\n</code></pre> <p><code>devteam_policy.hcl</code></p> <pre><code># Dev Team policy that allows members to do anythig with secrets related to this path\npath \"secret/data/devteam\" {\n   capabilities = [ \"create\", \"read\", \"update\", \"delete\" ]\n}\n</code></pre> <pre><code># Upload the policy\nvault policy write devteam devteam_policy.hcl\n</code></pre> <pre><code># Create a user group in vault to match the setup on the LDAP server\nvault write auth/ldap/groups/devstars policies=devteam\n</code></pre> <pre><code># No need to create a user in vault - vaultadmin with password \"vaultadmin\" was already created on the LDAP server\nvault login -method=ldap username=vaultadmin\n# vaultadmin\n\n# Log in with LDAP method\nvault login -method=ldap username=vaultadmin\n</code></pre> <p></p> <p></p> <p></p> <pre><code># Sample search\n# LDAP Search Example\nldapsearch -h localhost -p 10389 -x -b \"dc=example,dc=com\" 'cn=billykid'\n\n# which returned\n# extended LDIF\n#\n# LDAPv3\n# base &lt;dc=example,dc=com&gt; with scope subtree\n# filter: cn=billykid\n# requesting: ALL\n#\n\n# search result - \"my note: the next two lines did not have a comment #, I put it in.\"\n# search: 2\n# result: 0 Success\n\n# numResponses: 1\n</code></pre> <p></p>"},{"location":"vault4/3vt_token/#tls-certificates-and-pki","title":"TLS Certificates and PKI","text":"<p>Using TLS certificates makes the connection between client and server.</p> <p>They're secure. </p> <p>The hard part about certificates is managing them. They need to be generated, distributed, configured for use, revoked, and kept track of, and finally, be renewed or reissued. </p>"},{"location":"vault4/3vt_token/#tls-certificate-management","title":"TLS Certificate Management","text":"<ul> <li>Generate</li> </ul> <p>Via OpenSSL or commercial tools</p> <ul> <li>Distributed</li> </ul> <p>You need to send them securely to many clients</p> <ul> <li>Configured for use</li> </ul> <p>Browsers and other clients need to be set up</p> <ul> <li>CRLs Management</li> </ul> <p>Certificate revocation lists need to be maintained</p> <ul> <li>Renew or Reissue</li> </ul> <p>Not easy to do on a mass scale. People often forget</p> <p></p> <p>TLS Certificate Chain</p> <p></p>"},{"location":"vault4/3vt_token/#letsencrypt","title":"Letsencrypt","text":"<ul> <li>Free TLS certificates with DNS zone</li> <li>DNS zone is is a distinct part of the domain namespace managed by a legal entity</li> </ul> <p><code>selfsigned.cfr</code></p> <pre><code>[req]\ndistinguished_name = req_distinguished_name\nx509_extensions = v3_req\nprompt = no\n\n[req_distinguished_name]\nC = CA\nST = BC\nL =  Vancouver\nO = Globomantics\nCN = *\n\n[v3_req]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer\nbasicConstraints = CA:TRUE\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = *\nDNS.2 = *.*\nDNS.3 = *.*.*\nDNS.4 = *.*.*.*\nDNS.5 = *.*.*.*.*\nDNS.6 = *.*.*.*.*.*\nDNS.7 = *.*.*.*.*.*.*\nIP.1 = 127.0.0.1\n</code></pre> <pre><code>$ openssl req -x509 -batch -nodes -newkey rsa:2048 -keyout selfsigned.key -out selfsigned.crt -config selfsigned.cfr -days 365\n\nGenerating a RSA private key\n\nwriting new private key to\n'selfsigned.key\n\n$ ll\ncert.pem\nkey.pem\nselfsigned.cfr\nselfsigned.crt\nselfsigned.key\n</code></pre> <pre><code>sudo cp -p selfsigned.* /opt/vault/tls\n\nsudo chown vault:vault /opt/vault/tls/selfsigned.crt\n\nsudo chown vault:vault /opt/vault/tls/selfsigned.kev\n\nsudo ls -1 /opt/vault/tis\n</code></pre> <p><code>vault.hcl</code></p> <pre><code># Full configuration options can be found at https://www.vaultproject.io/docs/configuration\n\nui = true\n\n#mlock = true\n#disable_mlock = true\n\nstorage \"file\" {\n  path = \"/opt/vault/data\"\n}\n\n#storage \"consul\" {\n#  address = \"127.0.0.1:8500\"\n#  path    = \"vault\"\n#}\n\n# HTTP listener\n#listener \"tcp\" {\n#  address = \"127.0.0.1:8200\"\n#  tls_disable = 1\n#}\n\n# HTTPS listener\nlistener \"tcp\" {\n  address       = \"127.0.0.1:8200\"\n  tls_cert_file = \"/opt/vault/tls/selfsigned.crt\"\n  tls_key_file  = \"/opt/vault/tls/selfsigned.key\"\n}\n</code></pre> <pre><code>sudo vault server -config=/etc/vault.d/vault.hel\n</code></pre> <p></p> <pre><code>vault operator init\n\nUnseal Key 1: GYeeavH0KXykZb7TgDYGlz8mTxbch6nGGcrUipLMiws]\nUnseal Key 2: 1DHyX/RXg61paJ4wyfWxv08PU+9501dMJ70AA/puCP15\nUnseal Key 3: 2uP6GJdQECq0L2fuRBTNx3q7A0PO+pdpqUXpmgeVq+jn\nUnseal Key 4: usqDmFy6n(3MEDQwaj 7kGbXkfKYNq13WusVPsOlsSWVG\nUnseal Key 5: wFrUAfFKFLiRO/dgRDt5gaTcYq3ckDXPB202qLIBH6SZ\n\n\nInitial Root Token: s.HF5qwhddBJj1dvLU82Br1HDc\nVault initialized with 5 key shares and a key threshold of 3. Please securely\ndistribute the key shares printed above. When the Vault is re-sealed,\nrestarted, or stopped, you must supply at least 3 of these keys to unseal it\nbefore it can start servicing requests.\nVault does not store the generated master key. Without at least 3 keys to\nreconstruct the master key, Vault will remain permanently sealed!\nIt is possible to generate new unseal keys, provided you have a quorum of\nexisting unseal keys shares. See \"vault operator rekey\" for more information.\n</code></pre> <pre><code>$ vault operator unseal GYeeavH0KXykZb7TgDYGlz8mTxbch6nGGcrUipLMiws]\n\n$ vault operator unseal 1DHyX/RXg61paJ4wyfWxv08PU+9501dMJ70AA/puCP15\n\n$ vault operator unseal 2uP6GJdQECq0L2fuRBTNx3q7A0PO+pdpqUXpmgeVq+jn\n</code></pre>"},{"location":"vault4/3vt_token/#set-up-root-ca","title":"Set up Root CA","text":"<pre><code>###########################\n#      Set up Root CA     #\n###########################\n\n# Enable cert secrets engine\nvault secrets enable pki\n\n# Bump up the max lease ttl to 10 years\nvault secrets tune -max-lease-ttl=87600h pki\n\n Generate root cert\nvault write -format=json pki/root/generate/internal \\\ncommon_name=\u201dvault-ca-root-pki\u201d | tee \\\n&gt;(jq -r .data.certificate &gt; vault-ca-root-pki.pem) \\\n&gt;(jq -r .data.issuing_ca &gt; vault-ca-root-pki-issuing.pem) \\\n&gt;(jq -r .data.private_key &gt; vault-ca-root-pki-key.pem)\n</code></pre> <pre><code># Setup CRL and issuing URL\nvault write pki/config/urls issuing_certificates=\"http://127.0.0.1:8300/v1/pki/ca\" crl_distribution_points=\"http://127.0.0.1:8300/v1/pki/crl\"\n\n# Create intermediate CA\nvault secrets enable -path=pki_int pki\nvault secrets tune -max-lease-ttl=43800h pki_int\n\n# Generate intermediate CA signed request\nvault write -format=json pki_int/intermediate/generate/internal \\\ncommon_name=\"vault-ca-root-pki Intermediate Authority\" \\\n| jq -r '.data.csr' &gt; vault-ca-root-pki-int.csr\n\n# Setting up our Intermediate CA requires signing our CSR using our Root CA\nvault write -format=json pki/root/sign-intermediate csr=@vault-ca-root-pki-int.csr \\\ncommon_name=\"vault-ca-root-pki-int\" \\\nformat=pem_bundle ttl=\"43800h\" \\\n| jq -r '.data.certificate' &gt; vault-ca-root-pki-int.pem\n\n#  Inject intermediate certificate into Intermediate CA config\nvault write pki_int/intermediate/set-signed certificate=@vault-ca-root-pki-int.pem\n\n# Configure URL\nvault write pki_int/config/urls issuing_certificates=\"http://127.0.0.1:8300/v1/pki_int/ca\" crl_distribution_points=\"http://127.0.0.1:8300/v1/pki_int/crl\"\n</code></pre>"},{"location":"vault4/3vt_token/#authenticate-with-cert","title":"Authenticate with Cert","text":"<pre><code>###########################\n# Authenticate with Cert  #\n###########################\n# Enable cert auth method\nvault auth enable cert\n\n\n# Enable the PKI secrets engine at path \"pki_int\"\nvault secrets enable -path=pki_int pki # Done previously because I executed the command as part of authentication below\n# Create a role\nvault write pki_int/roles/vault-cert allow_any_name=true max_ttl=\"1440h\" generate_lease=true\n\n# Upload the policy\nvault policy write vault-cert vault-cert.hcl\n</code></pre> <ul> <li><code>vault-cert.hcl</code></li> </ul> <pre><code>path \"pki_int/issue/*\" {\n    capabilities = [\"create\", \"update\"]\n}\n\npath \"pki_int/certs\" {\n    capabilities = [\"list\"]\n}\n\npath \"pki_int/revoke\" {\n    capabilities = [\"create\", \"update\"]\n}\n\npath \"pki_int/tidy\" {\n    capabilities = [\"create\", \"update\"]\n}\n\npath \"pki/cert/ca\" {\n    capabilities = [\"read\"]\n}\n\npath \"auth/token/renew\" {\n    capabilities = [\"update\"]\n}\n\npath \"auth/token/renew-self\" {\n    capabilities = [\"update\"]\n}\n\n# Roles to create, update secrets\npath \"/sys/mounts\" {\n    capabilities = [\"read\", \"update\", \"list\"]\n}\n\npath \"/sys/mounts/*\" {\ncapabilities = [\"update\", \"create\"]\n}\n\npath \"sys/policies/acl\" {\n    capabilities = [\"read\"]\n}\n\npath \"secret/*\" {\n    capabilities = [\"read\", \"create\", \"update\", \"delete\"]\n}\n</code></pre> <pre><code># Generate certificates\nvault write -format=json pki_int/issue/vault-cert \\\ncommon_name=\"vault-cert\" | tee \\\n&gt;(jq -r .data.certificate &gt; vault-cert-certificate.pem) \\\n&gt;(jq -r .data.issuing_ca &gt; vault-cert-issuing-ca.pem) \\\n&gt;(jq -r .data.private_key &gt; vault-cert-private-key.pem)\n\n$ Upload the certificate to Vault and specify the policy for the users of that certificate\nvault write auth/cert/certs/vault-cert \\\ndisplay_name=vault-cert \\\npolicies=vault-cert \\\ncertificate=@vault-cert-certificate.pem\n\n# Log in with our certs\nvault login -method=cert -client-cert=vault-cert-certificate.pem -client-key=vault-cert-private-key.pem name=vault-cert \n</code></pre>"},{"location":"vault4/3vt_token/#using-the-approle-authentication-method-with-jenkins","title":"Using the AppRole Authentication Method with Jenkins","text":""},{"location":"vault4/3vt_token/#approle-with-jenkins-and-vault","title":"AppRole with Jenkins and Vault","text":"<pre><code># Install the latest LTS version \nbrew install jenkins-lts\n\n# Get intiial admin password\nsudo cat /Users/$(whoami)/.jenkins/secrets/initialAdminPassword\n\n# Install a specific LTS version: \nbrew install jenkins-lts@YOUR_VERSION\n\n# Start/restart/stop/ the Jenkins service: \nbrew services start jenkins-lts\nbrew services restart jenkins-lts\nbrew services stop jenkins-lts\n\n# Upgrade the Jenkins version: \nbrew upgrade jenkins-lts\n\nsudo cat /Users/$(whoami)/.jenkins/secrets/initialAdminPassword\n\n\n4d21978f240c41a5aa482323994a1162\n</code></pre>"},{"location":"vault4/3vt_token/#install-vault-plugin-and-configure-vault-secret","title":"Install Vault plugin and configure vault secret","text":"<pre><code>vault login root\n\n# Create a secret\nvault kv put secret/devops/jenkinssecret uid=dbadmin pwd=sup3rb@dsEcr1t\nSuccess! Data written to: secret/devops/jenkinssecret\n\n# Enable AppRole authentication method\nvault auth enable approle\n</code></pre> <p>Upload Jenkins policy to Vault</p> <pre><code>vault policy write jenkins jenkins.hcl\nSuccess! Uploaded policy: jenkins\n</code></pre> <p><code>jenkins.hcl</code></p> <pre><code># Ability to login\npath \"auth/approle/login\" {\n    capabilities = [\"create\", \"read\", \"list\"]\n}\n\n# List and read devops secrets\npath \"secret/devops/*\" {\n    capabilities = [\"read\", \"list\"]\n}\n</code></pre> <pre><code>$ vault policy write jenkins jenkins.hcl\nSuccess! Uploaded policy: jenkins\n\n$ vault write auth/approle/role/jenkins policies=jenkins\nSuccess! Data written to: auth/approle/role/jenkins\n\n# Get the role-id a and generate a secret-id\n$ vault read auth/approle/role/jenkins/role-id\n\n$ vault write -f auth/approle/role/jenkins/secret-id\n# role_id    97bab030-871b-31ba-1f7c-3b1036d7cc55\n# secret_id             8805d584-c12e-9b34-4f33-bb596b968467\n# secret_id_accessor    f75eef4e-fb88-f745-dafa-3ee5b671a87c\n# secret_id_ttl         0s\n# Description: Jenkins will use these credentials to authenticate to Vault\n</code></pre> <pre><code>vault read auth/approle/role/jenkins/role-id\nKey       Value\nrole_id   97bab030-871b-31ba-1f7c-3b1036d7cc55\n</code></pre>"},{"location":"vault4/3vt_token/#unlock-jenkins","title":"Unlock Jenkins","text":""},{"location":"vault4/3vt_token/#create-jenkisn-pipeline-to-test","title":"Create Jenkisn pipeline to test","text":"<p><code>Test_ Jenkins_to_Vault</code></p> <p></p> <p>Vault plugin</p> <ul> <li>VAULT URL: http://127.0.0.1:8200</li> <li>Path\uff1a <code>secret/devops/jenkinssecret</code></li> <li>Environment Variable: <code>VAULT_PROVIDED_SECRET</code></li> <li>Key Name: uid</li> <li>K/V Engine Version : 1</li> </ul> <p></p> <p></p>"},{"location":"vault4/3vt_token/#aws-authentication-method","title":"AWS Authentication Method","text":"<p>With the AWS authentication method, we'll be relying on AWS entities, and I repeat, AWS entities to help with the authentication. These are users, groups, and so on, which have more or less permanent credentials. </p> <ul> <li>These entities can assume roles, which serve as containers for a set of permissions grouped into policies that allow the entities to perform certain actions like reading AWS RDS instance metadata, starting and stopping EC2 instances, etc. </li> </ul>"},{"location":"vault4/3vt_token/#authenticate-and-play-with-secrets","title":"Authenticate and Play with Secrets","text":"<p>Entities</p> <ul> <li>Users - have more or less permanent credentials</li> <li>Groups - users can become members of groups</li> <li>Roles - users can assume roles to perform actions</li> </ul>"},{"location":"vault4/3vt_token/#authentication-workflow","title":"Authentication Workflow","text":"<p>There are two authentication types present in the aws auth method: <code>iam</code> and <code>ec2</code></p> <p>With the <code>iam</code> method, a special AWS request signed with AWS IAM credentials is used for authentication. </p> <p>The IAM credentials are automatically supplied to AWS instances in AM instance profiles, Lambda functions, and others, and it is this information already provided by AWS which Vault can use to authenticate clients.</p> <p>With the ec2 method AWS is treated as a Trusted Third Party and cryptographically signed dynamic metadata information that uniquely represents each EC2 instance is used for authentication. This metadata information is automatically supplied by AWS to all EC2 instances.</p> <p>Based on how you attempt to authenticate, Vault will determine if you are attempting to use the <code>iam</code> or <code>ec2</code> type. Each has a different authentication workflow, and each can solve different use cases.</p> <p>Note: The <code>ec2</code> method was implemented before the primitives to implement the <code>iam</code> method were supported by AWS. </p> <p>The <code>iam</code> method is the recommended approach as it is more flexible and aligns with best practices to perform access control and authentication. See the section on comparing the two auth methods below for more information.</p> <p></p> <p></p>"},{"location":"vault4/3vt_token/#aws-authentication-method_1","title":"AWS Authentication Method","text":"<ul> <li>Set up AWS credentials and Vault role and policy</li> <li>Create related AWS role and policy plus an IAM user</li> <li>Link the vault role to the AWS role or user</li> <li>Log in using AWS as a Trusted 3rd party</li> </ul>"},{"location":"vault4/3vt_token/#demo","title":"Demo","text":"<ul> <li>Set up AWS credentials and Vault role and policy</li> <li>Create related AWS role and policy plus an IAM user</li> <li>Link the vault role to the AWS role or user</li> <li>Log in using AWS as a Trusted 3rd party</li> </ul> <pre><code>$ vault secrets list\nPath          Type         Accessor              Description\n----          ----         --------              -----------\ncubbyhole/    cubbyhole    cubbyhole_05f910b5    per-token private secret storage\nidentity/     identity     identity_a798004e     identity store\nsecret/       kv           kv_cca718d1           key/value secret storage\nsecretv1/     kv           kv_205e10b5           KVv1 for Policy Parameter Testing\nsys/          system       system_c13790f5       system endpoints used for control, policy and debugging\n\nvault secrets enable -path=secret kv\nSuccess! Enabled the kv secrets engine at: secret/\n\n# Write some test data\nvault kv put secret/awsauthdemo/config ttl=10m username=devuser password=b3st4secret\n\n# Enable AWS authentication method\nvault auth enable aws\nSuccess! Enabled aws auth method at: aws/\n\nvault policy write awsauth awsauth.hcl\n</code></pre> <ul> <li><code>awsauth.hcl</code></li> </ul> <pre><code># Demo AWS authentication method policy\npath \"secret/awsauthdemo/*\" {\n    capabilities = [\"read\", \"list\"]\n}\n</code></pre> <pre><code>\n# Configure the AWS credentials\nvault write auth/aws/config/client secret_key=N8F8L3CmthvxwHrGPjoALBjRe9khWFxrfbCma/y9 access_key=AKIATPLNME26BEGUOLUL\n</code></pre>"},{"location":"vault4/3vt_token/#create-a-separate-am-user-and-generate-access-and-secret-keys","title":"Create a separate AM user and generate access and secret keys","text":"<p>Vault looks for access and secret keys at the default locations, e.g. <code>~/.aws/credentials</code></p> <p>Override AWS Key Set Values</p> <pre><code># Create AWS policy and role, then attach the policy to the role\naws iam create-policy --policy-name vault-docs-awsauth-policy --policy-document file://awsauth_recommended_policy.json\n</code></pre> <ul> <li><code>awsauth_recommended_policy.json</code></li> </ul> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n      {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n          \"ec2:DescribeInstances\",\n          \"iam:GetInstanceProfile\",\n          \"iam:GetUser\",\n          \"iam:GetRole\"\n        ],\n        \"Resource\": \"*\"\n      },\n      {\n        \"Effect\": \"Allow\",\n        \"Action\": [\"sts:AssumeRole\"],\n        \"Resource\": [\"arn:aws:iam::239136941756:role/vault-aws-auth-role\"]\n      },\n      {\n        \"Sid\": \"ManageOwnAccessKeys\",\n        \"Effect\": \"Allow\",\n        \"Action\": [\n          \"iam:CreateAccessKey\",\n          \"iam:DeleteAccessKey\",\n          \"iam:GetAccessKeyLastUsed\",\n          \"iam:GetUser\",\n          \"iam:ListAccessKeys\",\n          \"iam:UpdateAccessKey\"\n        ],\n        \"Resource\": \"arn:aws:iam::*:user/${aws:username}\"\n      }\n    ]\n}\n</code></pre> <pre><code>aws iam create-role --role-name vault-aws-auth-role --assume-role-policy-document file://vault-aws-auth-role.json\n</code></pre> <ul> <li><code>vault-aws-auth-role.json</code></li> </ul> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n      {\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n          \"Service\": \"iam.amazonaws.com\"\n        },\n        \"Action\": \"sts:AssumeRole\"\n      },\n      {\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n          \"AWS\": \"arn:aws:iam::239136941756:root\"\n        },\n        \"Action\": \"sts:AssumeRole\"\n      }\n    ]\n  }\n</code></pre>"},{"location":"vault4/3vt_token/#attach-policy-to-iam-role","title":"Attach policy to iam role","text":"<pre><code>aws iam attach-role-policy --role-name vault-aws-auth-role --policy-arn arn:aws:iam::239136941756:policy/vault-docs-awsauth-policy\n</code></pre> <pre><code> Create the vault-aws-auth-role manually in AWS IAM console and attach to it the vault-docs-awsauth-policy just created above\n# Or user the attach-role-policy iam command, as shown above\n# To use this: delete prior versions: aws iam delete-policy --policy-arn arn:aws:iam::&lt;aws_account_number&gt;:policy/vault-docs-awsauth-policy\n# Create a Vault role and associate it with an AWS role that has the custom policy we create previously\n# bound_iam_principal_arn=\"arn:aws:iam::&lt;aws_account_number&gt;:role/vault-aws-auth-role\" \\\n# /RoleSessionName\n# bound_iam_principal_arn=\"arn:aws:iam::&lt;aws_account_number&gt;:user/*\" \\\n# bound_iam_principal_arn=\"arn:aws:iam::&lt;aws_account_number&gt;:role/vault-aws-auth-role\" \\\n# vault write auth/aws/role/awsauth-role-iam \\\n#     auth_type=iam \\\n#     bound_iam_principal_arn=\"arn:aws:iam::&lt;aws_account_number&gt;:role/vault-aws-auth-role\" resolve_aws_unique_ids=true \\\n#     policies=awsauth ttl=24h\n</code></pre> <pre><code># Works OK, with IAM user vaultiam (created manually via IAM console)\nvault write auth/aws/role/awsauth-role-iam \\\n    auth_type=iam \\\n    bound_iam_principal_arn=\"arn:aws:iam::239136941756:user/vaultiam\" resolve_aws_unique_ids=true \\\n    policies=awsauth ttl=48h\n</code></pre> <pre><code># Allow any Principal to log in - tested OK\nvault write auth/aws/role/awsauth-role-iam \\\n    auth_type=iam \\\n    bound_iam_principal_arn=\"arn:aws:iam::239136941756:*\" resolve_aws_unique_ids=true \\\n    policies=awsauth ttl=48h\n</code></pre> <pre><code># Configure X-Vault-AWS-IAM-Server-ID Header - recommended\nvault write auth/aws/config/client iam_server_id_header_value=vault.example.com\n</code></pre> <pre><code># Log in - IAM auth method\nvault login -method=aws header_value=vault.example.com role=awsauth-role-iam\n</code></pre> <ul> <li>AWS accound ID</li> </ul> <pre><code>vault login -method=aws header_value=vault.example.com role=awsauth-role-iam aws_access_key_id=AKIATPLNME26BEGUOLUL aws_secret_access_key=N8F8L3CmthvxwHrGPjoALBjRe9khWFxrfbCma/y9\n</code></pre> <pre><code>$ vault login -method=aws header_value=vault.example.com role=awsauth-role-iam aws_access_key_id=&lt;IAM_user_access_key&gt; aws_secret_access_key=&lt;IAM_user_secret_key&gt;\n</code></pre>"},{"location":"vault4/3vt_token/#azure-and-gcp-authentication-methods-and-summary","title":"Azure and GCP Authentication Methods and Summary","text":"<ul> <li>First enabled the Azure method, then we write its configuration under <code>auth/azure/config</code>.</li> <li>We provide values for <code>tenant id</code>, resource, and most importantly, the <code>client_id</code> and <code>client_secret</code> that Vault will use to log in and make API calls against Azure. </li> <li>Finally, just as we did with AWS, we create the role involved where we specify the policies that will apply, the bound Azure subscription IDs and resource groups. </li> </ul> <p>Enable Azure authentication in Vault:</p> <pre><code>$ vault auth enable azure\n</code></pre> <p>Configure the Azure auth method:</p> <pre><code>$ vault write auth/azure/config \\\n    tenant_id=7cdlf227-ca67-4fc6-ala4-9888ea7f388c \\\n    resource=https://vault.hashicorp.com\\\n    client_id=dd794de4-4c6c-40b3-a930-d84cd32e9699 \\\n    client_secret=IT3B2XfZvWnfB98slcie8EMe7zWg483Xy8zY004=\n</code></pre> <p>For the complete list of configuration options, please see the API documentation.</p> <p>Create a role:</p> <pre><code>$ vault write auth/azure/role/dev-role\n    policies=\"prod, dev\"\n    bound_subscription_ids=6a1d5988-5917-4221-b224-904cd7e24a25 \\\n    bound_resource_groups=vault\n</code></pre>"},{"location":"vault4/3vt_token/#azure-and-aws-accounts-and-subscriptions","title":"Azure and AWS accounts and subscriptions","text":"<p>Azure subscriptions are a grouping of resources with an assigned owner responsible for billing and permissions management.</p> <p>Unlike AWS, where any resources created under the AWS account are tied to that account, subscriptions exist independently of their owner accounts, and can be reassigned to new owners as needed.</p> <p></p>"},{"location":"vault4/3vt_token/#google","title":"Google","text":"<p>IAM login applies only to roles of type iam . The Vault authentication workflow for AM service accounts looks like this:</p> <p></p> <ul> <li>3 Create a named role:</li> </ul> <pre><code>$ vault write auth/gcp/role/my-iam-role \\\n    type=\"iam\"\n    policies=\"dev, prod\"\n    bound_service accounts=\"my-service@my-project.iam.gserviceaccount.com\"\n</code></pre> <p>For a gce <code>-type</code> role:</p> <pre><code>$ vault write auth/qcp/role/my-gce-role\\\n    type=\"gce\"\\\n    policies=\"dev, prod\"\n    bound_projects=\"my-projectl, my-project2\" \\\n    bound_zones=\"us-eastl-b\"\\\n    bound_labels=\"foo: bar, zip: zap\"\n    bound_service accounts=\"my-service@my-project.iam.gserviceaccount.com\"\n</code></pre> <p>Note that <code>bound_service_accounts</code> is only required for <code>iam</code> <code>-type</code> roles.</p> <pre><code>vault login -method=gcp \\\n    role=\"my-role\"\\\n    service_account=\"authenticating-account@my-project.iam.gserviceaccount.com\"\\\n    jwt_exp=\"15m\" \\\n    credentials=apath/to/signer/credentials.json\n</code></pre>"},{"location":"vault4/3vt_token/#summary","title":"Summary","text":"<ul> <li>Tokens and token types </li> <li>Response wrapping </li> <li>Traditional authentication methods </li> <li>Cloud authentication methods </li> <li>AppRole with Jenkins</li> </ul>"},{"location":"vault4/4vt_secret_engine/","title":"L4 Managing Secrets with Secrets Engines","text":"<ul> <li>Database secrets engine at Globomantics</li> <li>SSH secrets engine - manage SSH servers</li> <li>PKI secrets engine - run your own Certificate Authority</li> </ul>"},{"location":"vault4/4vt_secret_engine/#using-the-database-secrets-engine","title":"Using the Database Secrets Engine","text":""},{"location":"vault4/4vt_secret_engine/#vault-database-secrets-engines","title":"Vault Database Secrets Engines","text":"<ul> <li>Don\u2019t store secrets in relational databases </li> <li>Function as simple authentication mechanisms</li> </ul>"},{"location":"vault4/4vt_secret_engine/#distribute-username-password-secrets","title":"Distribute Username / Password Secrets","text":""},{"location":"vault4/4vt_secret_engine/#using-vault-to-generate-dynamic-credentials","title":"Using Vault to Generate Dynamic Credentials","text":""},{"location":"vault4/4vt_secret_engine/#best-practices","title":"Best Practices","text":"<ul> <li>Dynamic secrets </li> <li>Leases to control secrets lifecycle</li> </ul>"},{"location":"vault4/4vt_secret_engine/#demo","title":"Demo","text":"<p>Using the Database Secrets Engine</p> <ul> <li>Enable DB secrets engine </li> <li>Configure its database connection </li> <li>Set roles in the database secrets engine </li> <li>Create related policies in Vault </li> <li>Generate tokens </li> <li>Use tokens to log into the database</li> </ul> <p></p> <pre><code>$ vault server -dev\n...\nYou may need to set the following environment variables:\n\n    $ export VAULT_ADDR='http://127.0.0.1:8200'\n\nThe unseal key and root token are displayed below in case you want to\nseal/unseal the Vault or re-authenticate.\n\nUnseal Key: H65WnFroE99hEp17qQ/qYG8+T1TF/6seryMoG6q52PI=\nRoot Token: hvs.mkzvtZeivMkg6SSpdA3Wfk1m\n...\n\n\n\n$ vault operator unseal H65WnFroE99hEp17qQ/qYG8+T1TF/6seryMoG6q52PI=\nKey             Value\n---             -----\nSeal Type       shamir\nInitialized     true\nSealed          false\nTotal Shares    1\nThreshold       1\nVersion         1.12.2\nBuild Date      2022-11-23T12:53:46Z\nStorage Type    inmem\nCluster Name    vault-cluster-f56d0349\nCluster ID      4694a9ba-acf0-89b2-98f3-90657f4d52af\nHA Enabled      false\n</code></pre>"},{"location":"vault4/4vt_secret_engine/#install-mysql","title":"install MySQL","text":"<pre><code># Install MySQL\nbrew install mysql\n\n# Start the database - runs as a daemon\nbrew services start mysql\n\n# To start it on the foreground\nmysql.server start\nmysql.server stop\n\n\n# Secure the database - by default there is not root password\nmysql_secure_installation\n# Press y|Y for Yes, any other key for No: Type N, as this database is just for testing purposes, and thus you don't need to test password strength\n# Remove anonymous users? (Press y|Y for Yes, any other key for No) : again type N\n# Disallow root login remotely? (Press y|Y for Yes, any other key for No) : type N\n# Remove test database and access to it? (Press y|Y for Yes, any other key for No) : type N\n# Reload privilege tables now? (Press y|Y for Yes, any other key for No) : type Y\n# Success.\n# All done!\n\n# Test the installation\nmysql -u root -p   \n</code></pre>"},{"location":"vault4/4vt_secret_engine/#enable-vailt-database","title":"Enable vailt database","text":"<pre><code># Enable the database secrets engine\nvault secrets enable database\n\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n\n\n# Configure the db engine\nvault write database/config/mysql \\\n    plugin_name=mysql-database-plugin \\\n    connection_url=\"{{username}}:{{password}}@tcp(localhost:3306)/\" \\\n    allowed_roles=\"reader,writer\" \\\n    username=\"root\" \\\n    password=\"sup3rm1sqlp@ss0rd\"\n\n\n# Create reader role\nvault write database/roles/reader \\\n    db_name=mysql \\\n    creation_statements=\"CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}'; GRANT SELECT ON *.* TO '{{name}}'@'%';\" \\\n    default_ttl=\"2h\" \\\n    max_ttl=\"48h\"\n\n\n# Create writer role\nvault write database/roles/writer \\\n    db_name=mysql \\\n    creation_statements=\"CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}'; GRANT ALL ON *.* TO '{{name}}'@'%';\" \\\n    default_ttl=\"2h\" \\\n    max_ttl=\"48h\" \n</code></pre> <ul> <li><code>reader.hcl</code></li> </ul> <pre><code># Allow the reader role access to the path that generates the credentials\npath \"database/creds/reader\" {\n    policy = \"read\"\n}\n</code></pre> <ul> <li><code>writer.hcl</code></li> </ul> <pre><code># Allow the writer role access to the path that generates the credentials\npath \"database/creds/writer\" {\n    policy = \"read\"\n}\n</code></pre> <pre><code># Upload the policies\nvault policy write reader reader.hcl\nSuccess! Uploaded policy: reader\n\n\nvault policy write writer writer.hcl\nSuccess! Uploaded policy: writer\n</code></pre>"},{"location":"vault4/4vt_secret_engine/#reader-role-with-read-policy","title":"Reader role with read policy","text":"<pre><code># Create tokens, log in, and create credentials with the reader role\n$ vault token create -policy=reader\n\n$ vault token create -policy=reader\n\nKey       Value\ntoken    S.CMFwtkvmgubnhzLVLgBARAP9\ntoken_accessor  deELtZVqUfXrEjmMYFBLWy6M\ntoken_duration  768h\ntoken_renewable true\ntoken_policies  [\u201cdefault\" \u201creader\u201d]\nidentity_policies   []\npolicies        [\"default\u201d\u201creader\u201d]\n</code></pre> <pre><code># Create tokens, log in, and create credentials with the reader role\nvault token create -policy=reader\n\n$ vault login s.CMFWtkvmgubnhzlVLgBARAP9\n\n$ vault read database/creds/reader\nKey   Value\nLease_id    database/creds/reader/va4tpxgvbgSiQqkoE476BX2\nLease_duration  2h\nLease_renewable true\npassword    nJsaAAZtO-CLOpjIUwZV\nusername    V-token-reader-20mJBKAAIg4AKWKOy\n</code></pre> <pre><code>mysql -uv-token-reader-20mJBKAAIg4AKwKOy -pnJsaAAZto-CL0pjIUwzV -h localhost\n\nmysql&gt; show databases;\n+-------\u2014---------\u2014--+\n| Database           |\n+-------\u2014---------\u2014--+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+-------\u2014---------\u2014--+\n4 rows in set (0.00 sec)\n\nmysql\u00bb use mysql;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\n\nmysql\u00bb create database globomanticsdb;\nERROR 1044 (42000): Access denied for user 'v-token-reader-20mJBKAAIg4AKwKOy'a'%' to database 'globomanticsdb\n</code></pre>"},{"location":"vault4/4vt_secret_engine/#writer-role-with-write-policy","title":"Writer role with write policy","text":"<pre><code># as root\n$ vault login hvs.mkzvtZeivMkg6SSpdA3Wfk1m\nSuccess! You are now authenticated. The token information displayed below\nis already stored in the token helper. You do NOT need to run \"vault login\"\nagain. Future Vault requests will automatically use this token.\n\nKey                  Value\n---                  -----\ntoken                hvs.mkzvtZeivMkg6SSpdA3Wfk1m\ntoken_accessor       sL3wVBYzguqLCVVuaDPjl0ur\ntoken_duration       \u221e\ntoken_renewable      false\ntoken_policies       [\"root\"]\nidentity_policies    []\npolicies             [\"root\"]\n\n$ vault token create -policy=writer\n\nKey             Value\ntoken           s.9i1yhhTocogoR7WULCVQ02\ntoken_accessor  KVvQYY9tX6bd4QkYL4dvtp\ntoken_duration  768h\ntoken_renewable true\ntoken_poicies   [\u201cdefault\u201d\"writer\"]\nidentity_policies []\npolicies    [\u201cdefault\" \"writer]\n</code></pre> <pre><code>vault login s.9i1yhhTocogoR7WULCVQ02\n\nvault read database/creds/writer\nKey Value\nLease_id    database/creds/writer/Ic10U9KzL5ECCNmN4gDILjjL\nLease_duration  2h\nLease_renewable true\npassword    nRG7iHGRC6-dVhru5uvh\nusername    v-token-writer-x43SOMOPjCEL6Zvkb\n</code></pre> <p>Success; the writer role and its corresponding user have create (ALL) privileges</p> <pre><code># Now log in to the database with the generated credentials\nmysql -uv-token-writer-x43s0MOPjCEl6zvkb -pnRG7iHGRC6-dVhrU5uVh -h localhost\n\nmysql\u00bb create database globomanticsdb;\nQuery OK, 1 row affected (0.04 sec)\n\nmysql&gt; create database globomanticsdb; \n\nmysql&gt; show databases;\n+-------\u2014---------\u2014--+\n| Database           |\n+-------\u2014---------\u2014--+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+-------\u2014---------\u2014--+\n4 rows in set (0.00 sec)\n\nshow databases;\n</code></pre> <p></p>"},{"location":"vault4/4vt_secret_engine/#working-with-the-ssh-secrets-engine","title":"Working with the SSH Secrets Engine","text":""},{"location":"vault4/4vt_secret_engine/#why-would-end-users-request-otps","title":"Why would end-users request OTPs?","text":"<ul> <li>Mission-critical access</li> <li>Minimal amount of time for credentials validity</li> </ul>"},{"location":"vault4/4vt_secret_engine/#vault-otp-dynamics","title":"Vault OTP Dynamics","text":"<ol> <li>Enable ssh secrets engine</li> <li>Create a role to connect to SSH servers</li> <li>Install Vault SSH Helper</li> <li>Reconfigure SSHD to use helper</li> <li>Test Helper to Vault link</li> <li>Generate OT dynamically</li> <li>Present OTP to SSH Server</li> <li>Validate OTP</li> <li>Authenticate and revoke OTP</li> </ol>"},{"location":"vault4/4vt_secret_engine/#ssh-secrets-engine","title":"SSH Secrets Engine","text":"<p>The Vault SSH secrets engine provides secure authentication and authorization for access to machines via the SSH protocol. </p> <p>The Vault SSH secrets engine helps manage access to machine infrastructure, providing several ways to issue SSH credentials.</p> <p>The Vault SSH secrets engine supports the following modes. Each mode is individually documented on its own page</p> <ul> <li>Signed SSH Certificates</li> <li>One-time SSH Passwords</li> <li>Dynamic SSH Keys (DEPRECATED)</li> </ul> <p>Vault can create a one-time password (OTP) for SSH authentication on a network every time a client wants to SSH into a remote host using a helper command on the remote host to perform verification.</p> <p></p>"},{"location":"vault4/4vt_secret_engine/#why-would-end-users-request-otps_1","title":"Why would end-users request OTPs?","text":"<ul> <li>Mission-critical access</li> <li>Minimal amount of time for credentials validity</li> </ul>"},{"location":"vault4/4vt_secret_engine/#enable-ssh-integrate-with-vault","title":"Enable SSH integrate with Vault","text":"<pre><code>#!/bin/bash\n\n# The instructions below were tested on Ubuntu 20.04\nwget https://releases.hashicorp.com/vault-ssh-helper/0.2.1/vault-ssh-helper_0.2.1_linux_386.zip\nunzip vault-ssh-helper_0.2.1_linux_386.zip\nmv vault-ssh-helper /usr/local/bin\nexport VAULT_ADDR=http://localhost:8200/\nrm vault-ssh-helper_0.2.1_linux_386.zip\n</code></pre>"},{"location":"vault4/4vt_secret_engine/#enable-vault-ssh-secret","title":"Enable vault-ssh secret","text":"<pre><code>$ vault secrets enable ssh\nSuccess! Enabled the ssh secrets engine at: ssh/\n</code></pre>"},{"location":"vault4/4vt_secret_engine/#on-ubuntu","title":"ON UBUNTU","text":"<pre><code># .bashrc\nexport VAULT_ADDR=http://localhost:8200\n</code></pre> <ul> <li><code>install_vault_ssh_helper.sh</code></li> </ul> <pre><code># Allow you terminal (or your IDE, like VS Code, if you prefer) full disk access - see the screenshot: enable_full_disk_access_on_mac.png\n\n# Enable/disable SSHD on Mac by executing\nsudo systemsetup -setremotelogin on\n\n# Execute install_vault_ssh_helper.sh as root\nsudo -s\nchmod +x install_vault_ssh_helper.sh \n\n./install_vault_ssh_helper.sh \n</code></pre> <pre><code>#ls -l /usr/local/bin/\n\n-rwxr-xr-x1 root root 8383402 Dec 15 2020 vault-ssh-helper\n</code></pre> <pre><code># Install SSHD\napt-get update &amp;&amp; apt-get install -y openssh-server\n\n# Modify SSH Config\nauth requisite pam_exec.so quiet expose_authtok log=/tmp/vaultsshhelper.log /usr/local/bin/vault-ssh-helper -dev -config=/etc/vault-ssh-helper.d/config.hcl\nauth optional pam_unix.so not_set_pass use_first_pass nodelay\n</code></pre> <p><code>config.hcl</code></p> <pre><code>vault_addr = \"http://localhost:8200\"\ntls_skip_verify = true\n# ca_cert = \"&lt;PEM_ENCODED_CA_CERT&gt;\"\nssh_mount_point = \"ssh\"\n# namespace = \"my_namespace\"\nallowed_roles = \"*\"\n</code></pre> <pre><code>systemctl restart ssh.service\n\nsystemctl status ssh.service\n</code></pre> <p></p> <pre><code># Create user that will connect to Vault server\nadduser vsshuser\n\n# Create vaultadmin role; vsshuser is the username we will specify when connecting to the ssh server\n# cidr_list=0.0.0.0/0,0.0.0.0/0 - this range specifies we can connect from anywhere to the ssh server\nvault write ssh/roles/vaultadmin \\\n    key_type=otp \\\n    default_user=vsshuser cidr_list=0.0.0.0/0,0.0.0.0/0\n</code></pre> <pre><code>cd ../conf/\n# Create config director for the Vault SSH Helper and place the its config file in it\nsudo mkdir /etc/vault-ssh-helper.d/\nsudo cp -p vault-ssh-helper.hcl\n\n# Test Vault SSH Helper\n$ vault-ssh-helper -dev -verify-only -config=/etc/vault-ssh-helper.d/config.hcl\n2021/09/15 12:49:11 ==&gt; WARNING: Dev mode is enabled!\n2021/09/15 12:49:11 (INFO] using SSH mount point: ssh\n2021/09/15 12:49:11 (INF0] using namespace:\n2021/09/15 12:49:11 (INFO] vault-ssh-helper verification successful!\n</code></pre> <pre><code>$ ifconfig\ninet 10.0.2.15| netmask 255.255.255.0 broadcast 10.0.2.255\n</code></pre> <p></p> <pre><code># Generate one-time password (OTP)\nvault write ssh/creds/vaultadmin ip=10.0.2.15\n\nKey                     Value\nlease_id            ssh/creds/vaultadmin/dU1IHrGwtdaUP17p8LzNMOID\nlease_duration    768h\nlease_renewable false\nip              10.0.2.15\nkey         05dbd824-b832-5454-ac87-7b88f2bc6abf\nkey_type    otp\nport            22\nusername    vsshuser\n</code></pre> <pre><code>ssh vsshuser@127.0.0.1 -p 2222\n\nroot@jaguargs:/home/gsmith/vault/conf#cat/tmp/vaultsshhelper.log\nwed Sep 15 15:12:23 Z0ZT\n2021/09/15 15:12:23 ==&gt; WARNING: Dev mode is enabled!\n2021/09/15 15:12:23 (INFO] using SSH mount point: ssh\n2021/09/15 15:12:23 (INFO] using namespace:\n2021/09/15 15:12:23 [INFO] vsshuser@10.0.2.15 authenticated!\nroot@jaguargs:/home/gsmith/vault/conf#ls-l/tmp/vaultsshhelper.log\n-rw-r..r.- 1 root root 243 Sep 15 15:12 /tmp/vaultsshhelper.log\nroot@jaguargs:/home/gsmith/vault/conf# usermod -aG sudo username\nusermod: user\n\"username' does not exist\n\n# usermod -aG sudo vsshuser\n\n# su - vsshuser\nTo run a command as administrator (user \"root\"), use \"sudo &lt;command&gt;\"\nSee \"man sudo root\" for details.\n\n$ sudo ls -la /root\n\n$ exit\nlogout\n</code></pre> <pre><code>ssh vsshuser@127.0.0.1 -p 2222\nvsshuser@127.0.0.1's password:\nPermission denied, please try again.\nvsshuser@127.0.0.1's password:\nPermission denied, please try again.\nvsshuser@127.0.0.1's password:\n</code></pre> <p>Create new one with sudo permisssion</p> <pre><code>vault write ssh/creds/vaultadminip=10.0.2.15\n\n# After you connect successfully, log out, and try connecting again using the same passowrd\n# That will fail because you alerady used the password once\n# Enable port forwarding in VirtualBox - VM &gt; Settings &gt; Network  &gt; Port Forwarding - open port 22 on 127.0.1.1 \n# and that will forward traffic to port 22 of 10.0.2.15 - internal address of your VM\n# OTP: 05dbd824-b832-5454-ac87-7b88f2bc6abf\nssh vsshuser@localhost -p 2222\n\n\n\ncat /tmp/vaultsshhelper. log\n*** Fri Sep 17 01:03:36 2021\n2021/09/17 01:03:36 ==&gt; WARNING: Dev mode is enabled!\n2021/09/17 01:03:36 (INFO] using SSH mount point: ssh\n2021/09/17 01:03:36 (INFO] using namespace:\n2021/09/17 01:03:36 [INFO] vsshuser@10.0.2.15 authenticated!\n*** Fri Sep 17 01:22:00 2021\n2021/09/17 01:22:00 ==&gt; WARNING: Dev mode is enabled!\n2021/09/17 01:22:00 [INFO] using SSH mount point: ssh\n2021/09/17 01:22:00 [INFO] using namespace:\n2021/09/17 01:22:00 [ERROR]: Error making API request.\nURL: PUT http: //10.0.2.2:8200/vl/ssh/verify\nCode: 400. Errors:\n* OTP not found\n*** Fri Sep 17 01:22:03 2021\n2021/09/17 01:22:03 ==&gt; WARNING: Dev mode is enabled!\n2021/09/17 01:22:03 (INFO] using SSH mount point: ssh\n2021/09/17 01:22:03 (INFO] using namespace:\n2021/09/17 01:22:03 [ERROR]: Error making API request.\nURL: PUT http://10.0.2.2:8200/v1/ssh/verify\nCode: 400. Errors:\n* OTP not found\n*** Fri Sep 17 01:24:40 2021\n2021/09/17 01:24:40 ==&gt; WARNING: Dev mode is enabled!\n2021/09/17 01:24:40 [INFO] using SSH mount point: ssh\n2021/09/17 01:24:40 (INFO] using namespace:\n2021/09/17 01:24:40 (INFO] vsshuser@10.0.2.15 authenticated!\n\n</code></pre>"},{"location":"vault4/4vt_secret_engine/#working-with-the-aws-secret-engine","title":"Working with the AWS Secret Engine","text":"<p>First, we'll create a Lambda function on AWS and expose it via the AWS API Gateway. </p> <p>Then we'll configure Vault to access our AWS account as root. </p> <p>Create a role for our Vault users and map it to an AWS IAM policy, which is nothing more than a set of permissions allowing them to take specific actions like accessing and modifying resources.</p>"},{"location":"vault4/4vt_secret_engine/#demo_1","title":"Demo","text":"<p>Using the Database Secrets Engine</p> <ul> <li>Generate Root and Intermediate CAs </li> <li>Create a role that allows for managing subdomains </li> <li>Request and generate certificates </li> <li>Revoke and remove certificates</li> </ul>"},{"location":"vault4/4vt_secret_engine/#certificate-revocation-lists-crls","title":"Certificate Revocation Lists (CRLs)","text":"<ul> <li>Generate Credentials  as dynamic secrets</li> <li>Verify certificate is NOT on CRLs</li> </ul> <p>AWS Root Keys</p> <ul> <li>Don't share them with anyone</li> <li>Vault uses them to create new secrets</li> </ul>"},{"location":"vault4/4vt_secret_engine/#configrue-lambda-trigger","title":"Configrue Lambda trigger","text":"<p>Trigger configuration</p> <ul> <li>Create an API</li> <li>REST API</li> <li>IAM</li> </ul> <p></p> <p></p> <p></p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"*\"\n            },\n            \"Action\": \"execute-api:Invoke\",\n            \"Resource\": \"arn:aws:execute-api:us-east-2:239136941756:*/*/*/*\"\n        }\n    ]\n}\n</code></pre> <pre><code># Enable AWS secrets engine\nvault secrets enable aws\n\n# Configure Vaut\u2019s root access\nvault write aws/config/root \\\n    access_key=A*6 \\\n    secret_key=n*D \\\n    region=us-east-2\n</code></pre>"},{"location":"vault4/4vt_secret_engine/#aws-api-standards","title":"AWS API Standards","text":"<pre><code># Create role in Vault and link it to an AWS policy\n# this role will allow users/apps to call the Lambda function via the API gateway\nvault write aws/roles/dev-role \\\n    credential_type=iam_user \\\n    default_ttl=5m\n    policy_document=-&lt;&lt;EOF\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"DevRoleInlinePolicy1\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"apigateway:*\",\n            \"Resource\": \"*\"\n        }\n    ]\n}\nEOF\n</code></pre> <pre><code>vault read aws/creds/dev-role\nKey                Value\n---                -----\nlease_id           aws/creds/dev-role/PHsJqJuWMfDMP0gBoYfZLDqV\nlease_duration     768h\nlease_renewable    true\naccess_key         AKIATPLNME26DOZTWH7S\nsecret_key         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\nsecurity_token     &lt;nil&gt;\n</code></pre> <p>Vault generated IAM user</p> <pre><code>vault-token-dev-role-1632044346-8561\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"vault4/4vt_secret_engine/#managing-leases-from-dynamic-secrets","title":"Managing Leases from Dynamic Secrets","text":"<p>All dynamic secrets in Vault come with a lease. </p> <p>And so, there are three main cases surrounding the lease and how it governs a secrets lifecycle. Secrets expire, are renewed, or can be revoked</p> <ul> <li>Control lease expiration</li> </ul> <pre><code>vault secrets tune -default-lease-ttl=5m aws/\nvault secrets tune -default-lease-ttl=5m -max-lease-ttl=20m aws/\n</code></pre> <ul> <li>Renew lease </li> </ul> <pre><code># Renew lease for 600 sec, or 10 min - within max_lease_ttl of 20 min - see above\nvault lease renew -increment=600 my-lease-id\nvault lease lookup aws/creds/dev-role/fZWeCwRT8l9xbRxrDoEpDRTe\n</code></pre> <ul> <li>Revoke credentials</li> </ul> <pre><code># Revoke credentials\nvault lease revoke aws/creds/dev-role/CdTx14Wl0m1kyUI6luKlEEsl\n</code></pre>"},{"location":"vault5/1cicd_pipeline/","title":"L1 Accessing Secrets in CI/CD Pipelines","text":""},{"location":"vault5/1cicd_pipeline/#cicd-pipelines","title":"CI/CD Pipelines","text":"<p>Continuous Integration (CI)</p> <ul> <li>Ensure changes work with codebase</li> <li>Automated unit tests run ASAP</li> <li>Continuously produce release candidates</li> </ul> <p>Continuous Deployment (CD)</p> <ul> <li>Unit &amp; integration tests</li> <li>Acceptance environment</li> <li>Human triggers automated deployment</li> </ul> <p>Changes deployed many times per day</p>"},{"location":"vault5/1cicd_pipeline/#cicd-security-issues","title":"CI/CD Security Issues","text":"<p>Automation is often a challenge</p> <p>Pipeline code or configuration with</p> <ul> <li>Hardcoded secrets</li> <li>Long-lived identitiy</li> </ul> <p>Cascading failures from personal tokens</p> <p>Issues compounded when bridging platforms</p>"},{"location":"vault5/1cicd_pipeline/#cicd-security-with-vault","title":"CI/CD Security with Vault","text":"<p>Wide array of authentication mechanisms</p> <ul> <li>Avoid secrets in pipeline code</li> <li>Use a central platform, not another engine</li> </ul> <p>Dynamic secrets</p> <ul> <li>Push, deploy or alert with a short TTL</li> <li>Remove risky long-lived pipeline secrets</li> </ul>"},{"location":"vault5/1cicd_pipeline/#2-demo-github-runner","title":"2 Demo: GitHub Runner","text":"<p>GitHub Actions is a platform for automating workflows based on events occurring in a GitHub repo, meaning it's a good choice for running CI/CD pipelines if your source code is also hosted on the site. </p> <p>The workflow is executed on a runner instance, which can be hosted by GitHub or self\u2011hosted. </p> <p>In general, when you're working with Vault in CI/CD pipelines, it's best to use a self\u2011hosted runner inside your network that can have access to Vault, rather than using a runner in someone else's network and opening up your Vault instance to the internet.</p>"},{"location":"vault5/1cicd_pipeline/#install-github-runner-on-linux","title":"Install GitHub Runner on Linux","text":"<pre><code># Create a folder\n$ mkdir actions-runner &amp;&amp; cd actions-runner\n\n# Download the latest runner package\n$ curl -o actions-runner-linux-arm64-2.283.2.tar.gz\nhttos://aithub.com/actions/runner/releases/download/v2.283.2/actions-runner-linux-arm64-2.283.2.tar.az\n\n# Optional: Validate the hash\n$ echo \"990646bdced99679e752c1af9d26fdd8a93d319ce0e24c9a30c1c6b25e505ced\nactions-runner-linux-arm64-2.283.2.tar.az\nshasum -a 256\n\n# Extract the installer\n$ tar xzf./actions-runner-linux-arm64-2.283.2.tar.az\n</code></pre> <p>Configure</p> <pre><code># Create the runner and start the configuration exoerience\n$./config.sh -url https://github.com/DirectRoot/carved-rock-app --token AIJNZ6TFCJIIUKDVNPGGXH3BNICNG\n\n\n# Last step, run 1t!\n$ . /run.sh\n</code></pre> <p></p> <pre><code>vagrant@github-runner:~$ vault auth enable approle\nSuccess! Enabled approle auth method at: approle/\n\nvault policy write github-runner -&lt;&lt;EOF\n    path \"secret/data/github-runner\" {\n        capabilities = [\"read\"]\n}\nEOF\nSuccess! Uploaded policy: github-runner\n\nvault write auth/approle/role/github-runner \\\n&gt; token_policies='github-runner' \\\n&gt; token_ttl=5m token_max_ttl=20m\nSuccess! Data written to: auth/approle/role/github-runner\n\nvagrant@github-runner:~$ vault read auth/approle/role/github-runner/role-id\nKey  Value\n---   ---\nrole_id  b6eba080-8a30-329e-aecc-cf8340f4e9f9\n\n$ vault write -force auth/approle/role/github-runner/secret-id\nKey  Value\n---   ---\nsecret_id  8134678-0867-065c-e138-00585f5bada7\nsecret_id_accessor  a0e017c5-a926-3265-e8f5-34f7088d0fdf\nsecret_id_ttl  Os\n</code></pre> <pre><code>read -s ROLE_ID\nexport -s ROLE_ID\nread -s SECRET_ID\nexport SECRET_ID\n\necho $ROLE_ID &amp;&amp; echo $SECRET_ID\nb6eba080-8a30-329e-aecc-cf8340f4e9f9\n8b134678-0867-065c-e138-00585f5bada7\n</code></pre>"},{"location":"vault5/1cicd_pipeline/#github-runnner","title":"\u542f\u52a8github runnner","text":"<pre><code>vagrant@github-runner:~/actions-runner$./run.sh\nV   Connected to GitHub\n2021-10-15 21:56:33Z: Listening for Jobs\n\nvagrant@github-runner:~$ vault kv put secret/github-runner the_secret=hello.world\nKey  Value\n---   ---\ncreated_time   2021-10-15T21:57:38.374689776Z\ndeletion_time   n/a\ndestroyed      false\nversion       1\n</code></pre>"},{"location":"vault5/1cicd_pipeline/#run-github-pippeline","title":"Run github pippeline","text":"<p><code>REPO-NAME/.github/workflows/github-and-vault.yml</code></p> <pre><code>name: Vault and GitHub demo\non: [workflow_dispatch]\njobs:\n  Get-a-Secret:\n    runs-on: self-hosted\n    steps:\n      - name: Add masks for the environment variables\n        run: |\n          echo \"::add-mask::$ROLE_ID\"\n          echo \"::add-mask::$SECRET_ID\"\n\n      - name: Import environment variables\n        run: |\n          echo ROLE_ID=\"$ROLE_ID\" &gt;&gt; $GITHUB_ENV\n          echo SECRET_ID=\"$SECRET_ID\" &gt;&gt; $GITHUB_ENV\n\n      - name: Retrieve the secret\n        uses: hashicorp/vault-action@v2.3.1\n        with:\n          url: http://localhost:8200\n          method: approle\n          roleId: ${{ env.ROLE_ID }}\n          secretId: ${{ env.SECRET_ID }}\n          secrets: |\n            secret/data/github-runner the_secret | THE_SECRET ;\n\n      - name: Prove it\n        run: |\n          echo $THE_SECRET | cut -d . -f 1\n          echo $THE_SECRET | cut -d . -f 2\n</code></pre> <p>Run workflow</p> <p></p> <p></p>"},{"location":"vault5/1cicd_pipeline/#demo-gitlab-runner","title":"Demo: GitLab Runner","text":""},{"location":"vault5/1cicd_pipeline/#enable-gitlab-runner","title":"Enable GitLab Runner","text":"<p>To integrate with GitLab, I'll be running the GitLab Runner via Docker. I've also signed up for the free tier of GitLab cloud to avoid having to run the full server locally</p> <p></p> <pre><code>curl --request POST \"https://gitlab.com/api/v4/runners\" \\\n--form \"token=SAaSLfNsSZzmGtDUKVAy\" --form \"tag_list=my laptop\"\n{\"id\": 11448176, \"token\" : \"51xbx6LiMmsw-q4bdpAS\"}\n</code></pre> <p></p> <p>GitLab uses a system where a runners tags have to match all of the tags on a build stage in order for it to be a candidate for running that stage</p> <ul> <li><code>config.toml</code></li> </ul> <pre><code>concurrent = 1\ncheck_interval = 0\n\n[session_server]\n  session_timeout = 1800\n\n[[runners]]\n    executor = \"shell\"\n    url = \"https://gitlab.com\"\n    token = \"51xbx6LiMmsw-q4bdpAS\"\n</code></pre> <p>When I start the container and mount this configuration file into etc/gitlab\u2011runner/config.toml, the runner begins and notifies GitLab that it is available</p> <pre><code>docker run -rm -it -v $PWD/config.toml:/etc/gitlab-runner/config.toml\\\n    --add-host=host.docker. internal: host-gateway \\\ngitlab/gitlab-runner run\n\nRuntime platform        arch=arm64 os=linux pid=8 revision=e0218c92 version=14.3.2\nStarting multi-runner from /etc/gitlab-runner/config.toml...   builds=0\nRunning in system-mode.\n\nConfiguration loaded        builds=0\nlisten _address not defined, metrics &amp; debug endpoints disabled builds=0\n[session server].listen\naddress not defined, session endpoints disabled\nbuilds=0\n</code></pre>"},{"location":"vault5/1cicd_pipeline/#jwt-payload","title":"JWT payload:","text":"<p>We're going to authenticate the GitLab Runner to Vault using a JSON web token, or JWT, which is pronounced jot. </p> <p>A JWT is an encoded verifiable JSON structure for transmitting information between systems.</p> <p>Each time a pipeline runs in a GitLab runner, a JWT is created and made available via an environment variable called <code>CI_ JOB_JWT</code>. It contains information about the current run. </p> <p>The information available in the JWT is listed here in GitLab's own write\u2011up of how to integrate with Vault</p> <p>Use a bound claim on fields within the JWT to limit a pipeline's access to specific secrets, including limiting access from specific branches. </p> <p>To configure JWT authentication, we first need to enable the auth method by the Vault CLI.</p> <p>Authenticating with HashiCorp Vault</p> <p></p> <p>https://bit.ly/gitlab-jwt-schema</p> <pre><code>vault auth enable jwt\nSuccess! Enabled jwt auth method at: jwt/\n</code></pre> <p>write a policy giving read access to an AWS secret.</p> <p>The policy is referred to by this list after the policies key. </p> <ul> <li><code>gitlab-runner-policy.hcl</code></li> </ul> <pre><code>path \"aws/creds/gitlab-runner\" {\n    capabilities = [\"read\"]\n\n\nvault policy write gitlab-runner./gitlab-runner-policy.hcl\nSuccess! Uploaded policy: gitlab-runner\n</code></pre> <p>The user <code>claim_key</code> tells Vault which field in the job to identify a user with, so we always know who triggered the pipeline that accessed the secret and not just which pipeline accessed it.</p> <p>The <code>bound_claims</code> key gives you a collection of keys whose values must match those in the JWT before access to the secret is allowed. </p> <p><code>gitlab-runner-role.json</code></p> <pre><code>{\n  \"role_type\": \"jwt\",\n  \"policies\": [\"gitlab-runner\"],\n  \"token_explicit_max_ttl\": 60,\n  \"user_claim\": \"user_email\",\n  \"bound_claims\": {\n    \"project_id\": \"30397508\"\n  }\n}\n</code></pre> <p></p> <p>You can provide multiple fields in here, but for now, I'm just going to bind to the project ID. </p> <p>GitLab project ID is immutable and available from the General Settings page. </p> <pre><code>vault write auth/jwt/config jwks_url=\"https://gitlab.com/-/jwks\" bound_issuer=\"gitlab.com\"\nSuccess! Data written to: auth/iwt/config\n</code></pre> <p>Using GitLab's public key, Vault is unable to check that the data in the JWT was actually issued by GitLab and hasn't been tampered with. So we need to tell Vault where it can find GitLab's public key before it can verify JWT's. </p> <p>By default, all instances of GitLab will locate their JWT public keys at this endpoint, where jwks stands for JSON Web Key Sets. It's just a URL serving JSON data</p> <p>We also need to bind the issue of the JWT so that only JWTs coming from gitlab.com in my case, can be used to authenticate. </p> <p>I've already configured my Vault with the AWS secrets engine to generate a dynamic set of short\u2011lived IAM user credentials. </p> <p><code>.gitlab-ci.yml</code></p> <pre><code>install-tools:\n    stage: .pre\n    script:\n        # Vault CLI\n        - apt update &amp;&amp; apt install -y unzip jq\n        - wget https://releases.hashicorp.com/vault/1.8.4/vault_1.8.4_linux_arm64.zip\n        - unzip vault_1.8.4_linux_arm64.zip\n        - mv vault /usr/bin\n        - which vault\n    tags:\n        - my_laptop\n\nbuild-the-thing:\n    stage: build\n    script:\n        - export VAULT_ADDR=http://host.docker.internal:8200\n\n        # Get a Vault token using the GitLab JWT\n        - export VAULT_TOKEN=\"$(vault write -field=token auth/jwt/login role=gitlab-runner jwt=$CI_JOB_JWT)\"\n\n        # Get a secret using the Vault CLI\n        - export SECRET=$(vault read -format=json aws/creds/gitlab-runner)\n        - export AWS_ACCESS_KEY_ID=$(echo $SECRET | jq -r .data.access_key)\n        - export AWS_SECRET_KEY=$(echo $SECRET | jq -r .data.secret_key)\n\n        - echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID\n        - echo AWS_SECRET_KEY=$AWS_SECRET_KEY\n    tags:\n        - my_laptop\n</code></pre> <ul> <li>https://bit.ly/vault-aws-secrets-engine</li> <li>https://bit.ly/gitlab-ci-yaml-keys</li> </ul> <p></p>"},{"location":"vault5/1cicd_pipeline/#cicd-secret-approaches-review","title":"CI/CD Secret Approaches &amp; Review","text":"<p>How granular to make the access controls for the required secrets. </p> <ul> <li>Single ID (all secrets)<ul> <li>High value</li> <li>Large blast radius</li> </ul> </li> </ul> <p>The first level sees a single identity in use for all pipelines and for all secrets, regardless of the project or software being deployed.</p> <ul> <li>ID per pipeline (deploy &amp; bootstrap)<ul> <li>More access than strictly required</li> <li>Injecting secrets into runtime environment</li> </ul> </li> </ul> <p>The second level uses an identity per pipeline that has access to the secrets needed for building, deploying, and bootstrapping the software when it starts. </p> <p>At this level, it's easy to think that you've secured the pipelines as much as possible, but those pipeline identities still have a larger amount of access than they strictly need, particularly if they can read production secrets like database credentials.</p> <p>This is often the case when a deployment pipeline injects secrets directly into the production environment of an application through variables or files</p> <ul> <li>ID per pipeline &amp; app<ul> <li>App has own ID and access to secrets</li> <li>Bootstraps itself during startup</li> </ul> </li> </ul> <p>Most secure level, we still have individual pipeline identities, but rather than the pipeline identity having direct access to application secrets, the deployed application has its own identity and bootstraps itself with its own secrets during startup.</p> <p>This approach limits the CI/CD pipeline to just the secrets it needs to integrate and deploy the software, achieving much better compliance with the principle of least privilege. </p>"},{"location":"vault5/1cicd_pipeline/#module-review","title":"Module Review","text":"<p>CI/CD pipelines</p> <ul> <li>What they are</li> <li>Security challenges</li> <li>How Vault can help</li> </ul> <p>Three approaches for CI/CD secrets</p> <p>Integrated two popular CI/CD platforms</p> <ul> <li>AppRole authentication with GitHub</li> <li>JWT authentication with GitLab</li> </ul>"},{"location":"vault5/2vault_agent/","title":"L2 Securely Introducing Clients Using Vault Agent","text":""},{"location":"vault5/2vault_agent/#1-secure-introductions-vault-agent","title":"1 Secure Introductions &amp; Vault Agent","text":"<p>Securely Introducing Clients using the Vault Agent</p>"},{"location":"vault5/2vault_agent/#vaults-trust","title":"Vault\u2019s Trust","text":"<ul> <li>Trust that a client owns the token it\u2019s using</li> </ul> <p>In this case, trust that a client presenting a token is the rightful owner of that token.</p> <ul> <li>Stemming from the first introduction</li> </ul> <p>used some method to authenticate themselves and then retrieved a token for subsequent requests</p> <ul> <li>Secure introduction is a major challenge</li> </ul> <p>The secure introduction of a client is a major challenge itself and should drive your decisions when it comes to integrating other systems with Vault.</p> <ul> <li>Ignoring it undermines Vault\u2019s security</li> <li>Trusted orchestrator</li> <li>Platform integration</li> <li>Vault Agent</li> </ul> <p>There are three approaches for securely introducing a client to Vault, the Trusted orchestrator, platform integration, and the Vault agent.</p>"},{"location":"vault5/2vault_agent/#trusted-orchestrator","title":"Trusted Orchestrator","text":"<p>In the Trusted Orchestrator approach, authentication data is produced like an app role or certificate.</p> <p>The trusted orchestrator is a system like Terraform, Nomad, or Chef, and this orchestrator injects the authentication data into the client's environment for it to use.</p> <p>It's important to note that this is generally not a token being injected, but a way for the client to authenticate and then retrieve a token.</p> <p>This is where one\u2011time use operations like response wrapping can be useful too.</p> <p></p> <p>When the client starts up, it will use the injected authentication data to authenticate with Vault and retrieve a token linked to the appropriate policy before requesting secrets.</p> <p>In the previous module when we integrated a GitHub runner with Vault, I was acting as a trusted orchestrator by producing the app role and injecting the role and secret ID into the runner via environment variables.</p> <p>Obviously using human as the trusted orchestrator doesn't scale, but you can also use orchestration engines to automate the steps I took and securely introduce clients to vault in a consistent way regardless of where they're running.</p>"},{"location":"vault5/2vault_agent/#platform-integration","title":"Platform Integration","text":"<p>The introductions via platform integration, the client is started with some platform\u2011specific trusted identifier. On AWS, this might be an IAM role that an instance is running under.</p> <p>Equally, the JWT that was injected into the GitLab pipeline during the last module is another good example.</p> <p>Assuming Vault has already been set up to trust it and the client logs in with an identifier, Vault then validates that ID with the underlying platform.</p> <p>In our case, this was the step requiring the URL to the GitLab JSON Web Key Store.</p> <p>If everything checks out Vault will then issue a token to the client and it can start requesting secrets.</p> <p>This method of introduction can be simpler to get right because you don't have to concern yourself with uniquely identifying the environment that a client is running under.</p> <p>This does make you limited to the data provided by the environment though like the fields that were available in the GitLab JWT.</p> <p>The limitations can also depend on how you're running clients in an environment.</p> <p>For example, if you trust the IAM role of an instance, then any process on that instance could authenticate with Vault, meaning you now shouldn't run more than one service from it.</p>"},{"location":"vault5/2vault_agent/#vault-agent","title":"Vault agent","text":"<p>This becomes less of an issue in microservice or serverless architectures.</p> <p></p> <p>The third approach to client introduction is via the Vault agent which isn't a unique approach in itself, but a way to automate the login workflow for applications that you can't or don't want to integrate with Vault directly.</p> <p>If you've built your software, but <code>&lt;mark&gt;</code>don't want to manage your own code for maintaining Vault tokens, then the Vault agent is a good choice for integration<code>&lt;/mark&gt;</code>.</p> <p>With the right configuration, the Vault agent will log into the Vault server which will validate the login and return a token.</p> <p>The agent will then write the token to a sink where the application can pick it up and make requests back to the server for secrets.</p>"},{"location":"vault5/2vault_agent/#vault-agent_1","title":"Vault agent","text":"<p>By using the agent, you get separation of concerns and a dedicated sidecar service to log in and keep tokens fresh that has been built for robustness and fault tolerance.</p> <p>Auto-authentication</p> <ul> <li>Major cloud platforms</li> <li>JWTs</li> <li>Kubernetes</li> <li>Kerberos</li> </ul> <p>Local file sink only</p> <ul> <li>Sink to different files</li> <li>Or run multiple instances</li> </ul> <p>Response wrapping &amp; encryption</p> <p>The agent currently supports auto authentication with all of the major cloud platforms, JWTs, Kubernetes, and Kerberos, amongst others.</p>"},{"location":"vault5/2vault_agent/#local-file-sink","title":"local file sink","text":"<p>The only available sink right now is a local file sink, but HashiCorp has indicated that they might build more in the future like a Linux socket or an API endpoint sync.</p> <p>If the same secret is needed by multiple services on a machine, you can have the agents sink to different parts of the file system which helps keep separation of service account permissions at the file system level.</p> <p>If you need separate secrets on one machine for multiple services, you can run multiple instances of the agent and simply configure them to log into Vault with different identities.</p> <p>Then it comes down to file system permissions again to keep services from reading each other's secrets.</p>"},{"location":"vault5/2vault_agent/#response-wrapping","title":"response wrapping","text":"<p>The agent also comes with some advanced functionality to response wrap and encrypt tokens.</p> <p>There are two approaches for response wrapping.</p> <ul> <li>When the auth method requests a response wrapped token, then there is more security against a person\u2011in\u2011the\u2011middle attack, but the client unwrapping the token will need to renew it for themselves.</li> <li> <p>Alternatively, the token could be response wrapped by the sink method after it has already been fetched from Vault,</p> </li> <li> <p>Offers less protection against person\u2011in\u2011the\u2011middle attacks, but does allow the agent to continue to renew the token on behalf of the client.</p> </li> </ul> <p>https://bit.ly/vault-agent-token-enc</p>"},{"location":"vault5/2vault_agent/#demo-vault-agent-auto-auth","title":"Demo: Vault Agent Auto-Auth","text":"<p>How to configure the vault agent to automatically authenticate with Vault and maintain an authentication token that could be used by another application.</p> <p>Approle authentication is one of the methods that works with the vault agent, AutoAuth.</p> <p>So we'll set that up here and create a short\u2011lived token to demonstrate the agent keeping it up to date</p> <p>First, we'll enable the approle auth method and upload a policy to allow read access to a secret.</p> <p>Finally, I'll write a secret to the path referenced in the policy.</p> <p>To configure the vault agent, we can use a HCL file and provide a path to it when invoking the executable.</p> <pre><code>$ vault auth enable approle\nSuccess! Enabled approle auth method at: approle/\n\n$ vault write -force -field=secret_id auth/approle/role/my-app/secret-id &gt; secret-id\n\n$ cat role-id\n29924511-0d94-4310-3eb9-382ce307a1fa%\n\n$ cat secret-id\n16e3984-01ee-9f65-db85-b95f2b1da6d5%\n\n$ vault kv put secret/my-app secret=sauce\nkey                         Value\ncreated_time    2021-10-15T23:04:13.697089z\ndeletion_time   n/a\ndestroyed       false\nversion         1\n</code></pre> <p>Use <code>wrap_ttl</code> to response wrap the auth token</p> <p><code>agent.hcl</code></p> <pre><code>vault {\n  address = \"http://localhost:8200\"\n}\n\nauto_auth {\n  method {\n    type = \"approle\"\n\n    config = {\n      role_id_file_path = \"role-id\"\n      secret_id_file_path = \"secret-id\"\n    }\n  }\n\n  sink {\n    type = \"file\"\n    config = {\n      path = \"the-token\"\n    }\n  }\n}\n</code></pre> <pre><code>vault agent -config=agent.hcl\n\nVAULT_TOKEN=$(cat the-token) vault kv get secret/my-app\n===== Metadata =====\nkey             Value\ncreated_time    2021-10-15T23:04:13.697089z\ndeletion_time   n/a\ndestroyed       false\nversion         1\n===== Data =====\nKey         Value\n---         ---\nsecret   sauce\n</code></pre>"},{"location":"vault5/2vault_agent/#module-review","title":"Module Review","text":"<p>Secure introduction challenge</p> <ul> <li>Trusted orchestrator</li> <li>Platform integration</li> <li>Vault agent</li> </ul> <p>Vault agent</p> <ul> <li>Automate login &amp; token renewal</li> <li>Trusted orchestrator &amp; platform auth</li> <li>Integrate simple or legacy software</li> <li>Write an auth token to file(s)</li> <li>Run multiple for many identities</li> </ul>"},{"location":"vault5/3vault_tf_nd/","title":"L3 Integrating Vault with Terraform &amp; Nomad","text":""},{"location":"vault5/3vault_tf_nd/#1-terraform-integration","title":"1 Terraform Integration","text":"<p>Module Overview</p> <ul> <li>Dynamic secrets in Terraform</li> <li>Nomad</li> <li>TLS certificates</li> <li>Access tokens</li> </ul>"},{"location":"vault5/3vault_tf_nd/#terraform","title":"Terraform","text":"<ul> <li>Codify infrastructure into declarative files</li> <li>Blueprint of infrastructure in source repos</li> <li>Advantages</li> <li>Resilience</li> <li>Confidence</li> <li>Security</li> </ul>"},{"location":"vault5/3vault_tf_nd/#how-terraform-works","title":"How Terraform Works","text":"<ul> <li>Desired state</li> <li>Actual state</li> <li>API calls to match actual to desired</li> </ul>"},{"location":"vault5/3vault_tf_nd/#a-terraform-workflow","title":"A Terraform Workflow","text":""},{"location":"vault5/3vault_tf_nd/#integration-with-vault","title":"Integration with Vault","text":"<ul> <li>Dedicated Terraform Vault provider</li> <li> <p>Configuring Vault &amp; populating secrets</p> </li> <li> <p>Can be challenging</p> </li> <li>Plaintext secrets in TF code</li> <li> <p>Using secrets from Vault</p> </li> <li> <p>Injecting auth data (trusted orchestrator)</p> </li> <li>API credentials for \u201cplan\u201d or \u201capply\u201d</li> <li>Provided token -&gt; child token -&gt; API creds</li> <li>Separate read &amp; write with Vault roles</li> </ul> <p>https://bit.ly/vault-provider-docs</p>"},{"location":"vault5/3vault_tf_nd/#demo-creating-the-vault-root-aws-user","title":"Demo: Creating the Vault-Root AWS User","text":"<p>Let's create a policy that we can attach to the Vault root user.</p> <p>https://bit.ly/vault-aws-iam-policy</p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:AttachUserPolicy\",\n        \"iam:CreateAccessKey\",\n        \"iam:CreateUser\",\n        \"iam:DeleteAccessKey\",\n        \"iam:DeleteUser\",\n        \"iam:DeleteUserPolicy\",\n        \"iam:DetachUserPolicy\",\n        \"iam:GetUser\",\n        \"iam:ListAccessKeys\",\n        \"iam:ListAttachedUserPolicies\",\n        \"iam:ListGroupsForUser\",\n        \"iam:ListUserPolicies\",\n        \"iam:PutUserPolicy\",\n        \"iam:AddUserToGroup\",\n        \"iam:RemoveUserFromGroup\"\n      ],\n      \"Resource\": [\"arn:aws:iam::ACCOUNT-ID-WITHOUT-HYPHENS:user/vault-*\"]\n    }\n  ]\n}\n</code></pre> <ul> <li><code>\"iam: GetUser\"</code></li> <li><code>\"Resource\": [\"arn: aws: iam: :089854689035 :user/vault-*\"]</code></li> </ul> <p></p> <p></p> <pre><code>$ vault secrets enable aws\nSuccess! Enabled the aws secrets engine at: aws/\n\nvault write aws/config/root\\\n&gt; access_key=AKIARJ26BX4FSFCKYF60\n&gt; secret_key=EuQR206F5H0FHsGYpp98WmqPRu0fOzwakL5X1F2z\\\n&gt; region=ca-central-1\nSuccess! Data written to: aws/config/root\n</code></pre> <p>To rotate the credentials, use</p> <p><code>vault write \u2011force aws/config/rotate\u2011root</code></p> <p>and Vault will echo back the new access key ID, but not the associated secret.</p> <pre><code>terraform vault write -force aws/config/rotate-root\nKey                 Value\n---                 ----\naccess_key      AKIARJ26BX4FQZJFWAJ7\n</code></pre> <p><code>terraform-plan</code></p> <pre><code>vault write aws/roles/terraform-plan \\\ncredential_type=iam_user\\\npolicy_arns=arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess\\\npolicy_document=@iam-getuser-self.json\n\nSuccess! Data written to: aws/roles/terraform-plan\n</code></pre> <p><code>terraform-apply</code></p> <pre><code>vault write aws/roles/terraform-apply \\\ncredential_type=iam_user \\\npolicy_arns=arn:aws:iam::aws:policy/AmazonS3FullAccess \\\npolicy_document-@iam-getuser-self.json\n\n\nSuccess! Data written to: aws/roles/terraform-apply\n</code></pre> <pre><code>vault write aws/config/lease lease=20m lease max=20m\nSuccess! Data written to: aws/config/lease\n</code></pre> <pre><code>vault policy write terraform-plan./terraform-plan.hcl\n\nSuccess! Uploaded policy: terraform-plan\n</code></pre> <p><code>terraform-plan.hcl</code></p> <pre><code>path \"aws/creds/terraform-plan\" {\n    capabilities = [\"read\"]\n}\n</code></pre> <p><code>terraform-apply.hcl</code></p> <pre><code>path \"aws/creds/terraform-apply\" {\n    capabilities = [\"read\"]\n}\n</code></pre> <pre><code>vault policy write terraform-apply./terraform-apply.hcl\nSuccess! Uploaded policy: terraform-apply\n</code></pre> <p><code>token-creation.hcl</code></p> <pre><code>path \"auth/token/create\" {\n    capabilities = [\"update\"]\n}\n</code></pre> <pre><code>vault policy write token-creation./token-creation.hcl\nSuccess! Uploaded policy: token-creation\n</code></pre> <pre><code>vault auth enable userpass\nSuccess! Enabled userpass auth method at: userpass/\n</code></pre> <pre><code>vault write auth/userpass/users/plan-user\\\npassword=password \\\npolicies=terraform-plan,token-creation\n\nSuccess! Data written to: auth/userpass/users/plan-user\n\n\nvault write auth/userpass/users/apply-user\npassword=password \\\npolicies=terraform-apply,token-creation\n\nSuccess! Data written to: auth/userpass/users/apply-user\n</code></pre> <pre><code>VAULT_TOKEN=$(vault login \\\n-field=token -method=userpass \\\nusername=plan-user password=password) \\\nvault read aws/creds/terraform-plan\n\n\nKey             value\n---             ---\nlease_id        aws/creds/terraform-plan/7jXup8HYnrBasPa@rbire@AI\nlease_duration  20m\nlease_renewable true\naccess_key      AKIARJ26BX4F7I7MSCUV \nsecret_key        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\nsecurity_token  &lt;nils&gt;\n</code></pre> <pre><code>VAULT_TOKEN=$(vault login \\\n-field=token -method=userpass \\\nusername=plan-user password=password) \\\nvault read aws/creds/terraform-apply\n\nError reading aws/creds/terraform-apply: Error making API request.\n\nURL: GET http://127.0.0.1:8200/v1/aws/creds/terraform-apply\nCode: 403. Errors:\n\n* 1 error occurred:\n    * permission denied\n</code></pre> <ul> <li><code>username=plan-user</code></li> <li><code>aws/creds/terraform-apply</code></li> </ul> <pre><code>VAULT_TOKEN=$(vault login -field=token -method=userpass username=apply-user password=password) \\\nTF_VAR_AWS_CREDS_ROLE=terraform-apply \u3001\nterraform apply\nrandom_id.s3_postfix: Refreshing state... [id=0S7p2l21ojOLT0yg3iZ2fA]\n\n\nVAULT_TOKEN=$(vault login -field=token -method=userpass username=apply-user password=password) \\\nterraform destroy\n</code></pre> <ul> <li>Run <code>plan user</code> error</li> <li><code>TF_VAR_AWS_REDS_ROLE=terraform-plan</code></li> </ul> <pre><code>VAULT_TOKEN=$(vault login -field=token -method=userpass username=plan-user password=password) \\\nTF_VAR_AWS_REDS_ROLE=terraform-plan \\\nterraform apply\n</code></pre> <p></p> <ul> <li><code>username=plan-user</code></li> <li><code>TF_VAR_AWS_CREDS_ROLE=terraform-apply</code></li> </ul> <pre><code>\nVAULT_TOKEN=$(vault login -field=token -method=userpass username=plan-user password=password) \\\nTF_VAR_AWS_CREDS_ROLE=terraform-apply \\\nterraform apply\n</code></pre> <p></p>"},{"location":"vault5/3vault_tf_nd/#nomad-integration-tokens","title":"Nomad Integration - Tokens","text":"<p>Nomad is HashiCorp's workload orchestrator for deploying and managing software across cloud or data center environments at huge scale.</p> <p>HashiCorps core use cases for Nomad are container orchestration, legacy application deployment, microservice management when combined with HashiCorp console, batch processing of analytics workloads, and building multi\u2011region or multi\u2011cloud deployments</p> <p>Workload orchestrator</p> <ul> <li>Deploying &amp; managing software</li> <li>Cloud or data center at huge scale</li> </ul> <p>Core use cases</p> <ul> <li>Container orchestration</li> <li>Legacy application deployment</li> <li>Microservice management (with Consul)</li> <li>Batch processing analytics workloads</li> <li>Multi-region or multi-cloud deployments</li> </ul>"},{"location":"vault5/3vault_tf_nd/#kubernetes-vs-nomad","title":"Kubernetes vs Nomad","text":"<p>Kubernetes</p> <ul> <li>Built for containers</li> <li>Made from interoperating services</li> <li>Many community-built flavors</li> <li>Up to 5k nodes &amp; 300k containers</li> </ul> <p>Nomad</p> <ul> <li>Flexible workloads</li> <li>Single binary</li> <li>Consistent experience</li> <li>10k nodes &amp; 2M containers</li> </ul>"},{"location":"vault5/3vault_tf_nd/#nomad-acl-system","title":"Nomad ACL System","text":"<ul> <li>Built-in Access Control List (ACL) system</li> <li>Tokens to authenticate requests</li> <li>Policies define allowed actions</li> <li>Tokens are secrets &amp; Vault can manage them</li> <li>Obtain token from Vault, use with Nomad</li> </ul> <p><code>config.hcl</code></p> <pre><code>acl {\n  enabled = true\n}\n</code></pre> <pre><code>nomad agent -dev -config=config.hcl\n\n===&gt; Loaded configuration from config.hcl\n===&gt; Starting Nomad agent...\n</code></pre>"},{"location":"vault5/3vault_tf_nd/#nomad-start","title":"Nomad Start","text":"<pre><code>$ nomad acl bootstrap\n\nAccessor ID  = aedfa8a-acf0-8b3a-ddde-c1f81342f5da\nSecret ID    = Odc11f1e-8cc4-3c62-3fb5-a885668a1bd\nName         = Bootstrap Token\nType         = management\nGlobal       = true\nPolicies     = n/a\nCreate Time  = 2021-10-20 20:09:53.713725 +0000 UTC\nCreate Index = 11\nModify Index = 11\n</code></pre> <pre><code>$ vault secrets enable nomad\nSuccess! Enabled the nomad secrets engine at: nomad/\n\n$ vault write nomad/config/access \\\n&gt; address=http://localhost: 4646 \\\n&gt; token=@dc11f1e-8cc4-3c62-3fb5-a88e5668a1bd\n\nSuccess! Data written to: nomad/config/access\n\n$ vault write nomad/role/management type=management global=true\nSuccess! Data written to: nomad/role/management\n\n$ vault read nomad/creds/management\nKey                 Value\n---                 ---\nlease_id            nomad/creds/management/mnHLOLToCWOhLIXj6qn909rw \nlease_duration      768h\nlease_renewable     true\naccessor_id         8810099-990-df3b-7a08-cb344ee97029\nsecret_id           a580d0af-7c11-ff6c-7e5b-303604cd03e7\n</code></pre> <pre><code>nomad-tokensNOMAD_TOKEN=a580d0af-7c11-ff6c-7e5b-303604cd03e7\\\n&gt; nomad acl token info 8810099-990-df3b-7a08-cb344ee97029\nAccessor ID = 8810099-990-df3b-7a08-cb344ee97029\nSecret ID   = a580d0af-7c11-ff6c-75b-303604cd03e7\nName        = vault-management-root-1634760866123581000\nType                = management\nGlobal      = true\nPolicies    = n/a\nCreate Time = 2021-10-20 20:14:26.12459 +0000 UTC\nCreate Index = 17\nModify Index = 17\n</code></pre> <p><code>carved-rock-nomad-policy.hcl</code></p> <pre><code>namespace \"carved-rock\" {\n  policy       = \"write\"\n  capabilities = [\"alloc-node-exec\"]\n}\n\nagent {\n  policy = \"write\"\n}\n\noperator {\n  policy = \"write\"\n}\n\nquota {\n  policy = \"write\"\n}\n\nnode {\n  policy = \"write\"\n}\n\nhost_volume \"*\" {\n  policy = \"write\"\n}\n</code></pre> <pre><code>NOMAD_TOKEN = 0dc11f1e-8cc4-3c62-3fb5-a88e5668a1bd\\\n&gt; nomad ac policy apply carved-rock carved-rock-nomad-policy.hcl\n\nSuccessfully wrote \"carved-rock\" ACL policy!\n</code></pre> <pre><code>vault write nomad/role/carved-rock policies=carved-rock\nSuccess! Data written to: nomad/role/carved-rock\n\nvault read nomad/creds/carved-rock\nKey             Value\n---             ----\nlease_id        nomad/creds/carved-rock/Ureg8XTocZGS144AfZHcBDug\nlease_duration  768h\nlease_renewable  true\naccessor_id      75d0ca50-d8e7-bf51-46ab-4312542d463b\nsecret_id     87710770-4c15-16b6-2807-8a3b9ead3d87\n</code></pre> <pre><code>NOMAD_TOKEN=87710770-4c15-16b6-2807-8a3b9ead3d87\n&gt; nomad acl token info 75d0ca50-d8e7-bf51-46ab-4312542d463b\nAccessor ID = 75d0ca50-d87-bf51-46ab-4312542d463b\nSecret ID   = 87710770-4c15-16b6-2807-8a3b9ead3d87\nName        = vault-carved-rock-root-1634761248999574000\nType        = client\nGlobal      = false\nPolicies    = [carved-rock]\nCreate Time = 2021-10-20 20:20:49.000452 +0000 UTC\nCreate Index = 27\nModify Index = 27\n</code></pre> <p>https://bit.ly/consul-template-github</p>"},{"location":"vault5/3vault_tf_nd/#nomad-integration-mtls","title":"Nomad Integration - mTLS","text":""},{"location":"vault5/3vault_tf_nd/#nomads-communications","title":"Nomad\u2019s Communications","text":"<ul> <li>HTTP between CLI &amp; agents</li> <li>RPC between agents</li> <li>Serf between servers specifically</li> <li>\u201cAgent\u201d could be a client or server</li> <li>3-5 servers, possibly 1000\u2019s of clients</li> <li>Serf encrypted through a shared key</li> <li>HTTP &amp; RPC mutual TLS (mTLS)</li> <li>Vault can provide certificates</li> </ul>"},{"location":"vault5/3vault_tf_nd/#nomad-mtls","title":"Nomad mTLS","text":"<ul> <li>Both sides verify the other\u2019s identity</li> <li>Both sides provide certificates</li> <li>Different to TLS in (HTTPS), not mutual</li> <li>Prevent unauthorized access</li> <li>Prevent observing &amp; tampering with comms</li> <li>Prevent misconfigurations</li> <li>Prevent masquerading</li> </ul>"},{"location":"vault5/3vault_tf_nd/#mtls-certificate-rotation","title":"mTLS Certificate Rotation","text":"<p>Rotate mTLS certificates</p> <ul> <li>On every node</li> <li>Use a short TTL</li> <li>Time consuming when done manually</li> </ul> <p>Consul-template</p> <ul> <li>Retrieve secrets &amp; update files</li> <li>Then run a command</li> </ul>"},{"location":"vault5/3vault_tf_nd/#demo","title":"Demo","text":"<ul> <li>PKI secrets engine</li> <li>Consul-template</li> <li>Automatically create &amp; rotate certificates</li> </ul>"},{"location":"vault5/3vault_tf_nd/#demo-configuring-vault-consul-template","title":"Demo: Configuring Vault &amp; Consul-template","text":"<p>How to use Vault's PKI secrets engine and Consul Template to automatically create and rotate certificates for mTLS in Nomad.</p> <p>Setting up the root CA and intermediate CA</p> <p>It's mounted at <code>pki_int</code> on my Vault server.</p> <ul> <li>We'll start by creating a role in the intermediate CA for Nomad to generate certificates.</li> <li>The <code>max_ttl</code> is set to 24 hours.</li> <li>We need a Vault policy that will allow access to the issue endpoint for the role.</li> </ul> <p><code>nomad-vault-policy.hcl</code></p> <pre><code>path \"pki_int/issue/nomad\" {\n  capabilities = [\"update\"]\n}\n</code></pre> <pre><code>vault policy write nomad ./nomad-vault-policy.hcl\n\nSuccess! Uploaded policy: nomad\n</code></pre> <p>Note that the capability is update and not read.</p>"},{"location":"vault5/3vault_tf_nd/#consul-template","title":"Consul Template","text":"<p>We need template files that will expand into an output and a configuration file to provide settings.</p> <p><code>consul-template-config.hcl</code></p> <p>The syntax of Consul Template allows you to query for a secret using this with secret string and then providing the path to the secret involved.</p> <pre><code>vault {\n  address      = \"http://localhost:8200\"\n\n  # You can use the Vault agent to manage the required Vault token\n  # vault_agent_token_file = \"\"\n\n  renew_token=false\n}\n\n# Server templates\ntemplate {\n  source      = \"server-templates/ca-certificate.template\"\n  destination = \"server-secrets/ca.crt\"\n  # command     = \"\"\n}\n\ntemplate {\n  source      = \"server-templates/certificate.template\"\n  destination = \"server-secrets/server.crt\"\n  # command     = \"\"\n}\n\ntemplate {\n  source      = \"server-templates/key.template\"\n  destination = \"server-secrets/server.key\"\n  # command     = \"\"\n}\n\n\n# CLI templates\ntemplate {\n  source      = \"cli-templates/certificate.template\"\n  destination = \"cli-secrets/cli.crt\"\n}\n\ntemplate {\n  source      = \"cli-templates/key.template\"\n  destination = \"cli-secrets/cli.key\"\n}\n</code></pre> <p>Every Nomad agent, that is every Nomad server or client, will need a set of three files to be generated, the issuing CA certificate, its own certificate, and the associated private key.</p> <pre><code>\u251c\u2500\u2500 client-templates\n\u2502   \u251c\u2500\u2500 ca-certificate.template\n\u2502   \u251c\u2500\u2500 certificate.template\n\u2502   \u2514\u2500\u2500 key.template\n</code></pre> <p><code>ca-certificate.template</code></p> <pre><code>{{ with secret \"pki_int/issue/nomad\" \"common_name=server.global.nomad\" \"ttl=24h\"}}\n{{ .Data.issuing_ca }}\n{{ end }}\n</code></pre> <p><code>certificate.template</code></p> <pre><code>{{ with secret \"pki_int/issue/nomad\" \"common_name=server.global.nomad\" \"ttl=24h\" \"alt_names=localhost\" \"ip_sans=127.0.0.1\"}}\n{{ .Data.certificate }}\n{{ end }}\n</code></pre> <p><code>key.template</code></p> <pre><code>{{ with secret \"pki_int/issue/nomad\" \"common_name=server.global.nomad\" \"ttl=24h\" \"alt_names=localhost\" \"ip_sans=127.0.0.1\"}}\n{{ .Data.private_key }}\n{{ end }}\n</code></pre> <p>On clients, the common name is <code>client.global.nomad</code>, and on servers, it is <code>server.global.nomad</code>. </p> <p>Notice as well that all of these templates are asking for their secrets with a TTL of 24 hours. Y</p> <p>HashiCorp suggests adding these to every node in your cluster so that you can use the CLI anywhere within it.</p> <pre><code>cli-templates\n\u2502   \u251c\u2500\u2500 certificate.template\n\u2502   \u2514\u2500\u2500 key.template\n</code></pre> <p><code>certificate.template</code></p> <pre><code>{{ with secret \"pki_int/issue/nomad\" \"ttl=24h\" }}\n{{ .Data.certificate }}\n{{ end }}\n</code></pre> <p><code>key.template</code></p> <pre><code>{{ with secret \"pki_int/issue/nomad\" \"ttl=24h\" }}\n{{ .Data.private_key }}\n{{ end }}\n</code></pre> <pre><code>vault write pki int/roles/nomad allowed_domains=global.nomad \\\nallow_subdomains=true max_ttl=86400s require_cn=false generate_lease=true\n\nSuccess! Data written to: pki_int/roles/nomad\n</code></pre> <pre><code>consul-template-config=consul-template-config.hcl\n</code></pre> <p></p>"},{"location":"vault5/3vault_tf_nd/#demo-configuring-nomad-for-mtls","title":"Demo: Configuring Nomad for mTLS","text":"<p>Configure nomad to use mTLS</p> <p><code>nomad-config.hcl</code></p> <pre><code>tls {\n  http = true\n  rpc  = true\n\n  ca_file   = \"server-secrets/ca.crt\"\n  cert_file = \"server-secrets/server.crt\"\n  key_file  = \"server-secrets/server.key\"\n\n  verify_server_hostname = true\n  verify_https_client    = true\n}\n</code></pre> <pre><code>nomad agent -dev -config=nomad-config.hcl\n=&gt; Loaded configuration from nomad-config.hcl\n=&gt; Starting Nomad agent.\n</code></pre> <pre><code>$ nomad status\nError querying jobs: Unexpected response code: 400 (Client sent an HTTP request to an HTTPS servr.\n</code></pre> <p>we receive an error because the default nomad address for the CLI uses HTTP, and we've just configured the endpoint to use HTTPS</p> <p>To make the CLI work, we need to export four environment variables.</p> <pre><code>export NOMAD_ADDR=https://localhost:4646\nexport NOMAD CACERT=server-secrets/ca.crt\nexport NOMAD CLIENT CERT=cli-secrets/cli.crt\nexport NOMAD CLIENT KEY=cli-secrets/cli.key\n</code></pre> <pre><code>nomad status\nNo running jobs\n</code></pre> <pre><code>openssl s_client -cert $NOMAD_CLIENT_CERT -key $NOMAD_CLIENT_KEY \\\n-connect localhost: 4646 2&gt; /dev/null I\nopenssl x509 -noout -dates\nnotBefore=Oct 20 21:20:05 2021 GMT\nnotAfter=Oct 21 21:20:35 2021 GMT\n</code></pre> <p>It connects to the Nomad endpoint using the CLI certificate and key, then grabs the certificate from the Nomad server and passes out the dates that the certificate is valid from and to.</p> <p>You can see here that the notBefore and not After date times make up a 24\u2011hour period</p>"},{"location":"vault5/3vault_tf_nd/#module-review","title":"Module Review","text":"<p>Terraform</p> <ul> <li>AWS secrets engine</li> <li>Differing levels of access for TF</li> </ul> <p>Nomad</p> <ul> <li>Produce tokens</li> <li>PKI engine</li> <li>Consul-template</li> <li>mTLS</li> <li>Automatic certificate rotation</li> </ul>"},{"location":"vault5/4vault_consul/","title":"L4 Integrating Vault with Consul","text":"<p>Consul</p> <ul> <li>Service registration</li> <li>Backend storage</li> <li>Access tokens</li> <li>TLS certificates</li> </ul>"},{"location":"vault5/4vault_consul/#consul-service-registration","title":"Consul Service Registration","text":""},{"location":"vault5/4vault_consul/#hashicorp-consul","title":"HashiCorp Consul","text":"<p>Service mesh technology</p> <ul> <li>Became prevalent with microservices</li> </ul> <p>Separate services</p> <ul> <li>More flexibility and speed</li> <li>More operational cost</li> </ul> <p>Consul helps solve microservice ops issues</p> <ul> <li>Discovery</li> <li>Configuration</li> <li>Network segmentation</li> </ul>"},{"location":"vault5/4vault_consul/#discovery","title":"Discovery","text":"<p>Application is spread across runtimes</p> <p>Previous interface</p> <ul> <li>Classes with public methods</li> </ul> <p>New interface</p> <ul> <li>Dedicated API on the network</li> </ul> <p>Consul provides a service registry</p> <p>Register Vault for centralized secrets</p>"},{"location":"vault5/4vault_consul/#demo-consul-service-registration","title":"Demo: Consul Service Registration","text":"<p><code>vault-config.hcl</code></p> <pre><code>service_registration \"consul\" {\n  address = \"localhost:8500\"\n  # check_timeout = 1m\n  # scheme = \"https\"\n  # service = \"carved-rock-vault\"\n}\n</code></pre> <pre><code>$ consul agent -dev\n\n$ curl -i http://localhost:8500/v1/catalog/service/vault\n\n$ dig @localhost -p 8600 vault.service.consul\n\n...\n;; ANSWER SECTION:\nvault.service.consul.   0  IN   A   127.0.0.1\n...\n</code></pre>"},{"location":"vault5/4vault_consul/#consul-key-value-store","title":"Consul Key-Value Store","text":"<p>With an application spread over many services, configuring them all to work together becomes a challenge that scales in difficulty as the number of services grows, especially if you want to have all services configured with some common setting very quickly.</p> <p>Consul provides a key\u2011value store that services can query for their configuration providing a unified configuration experience and a single place for operators to make changes.</p>"},{"location":"vault5/4vault_consul/#configuration","title":"Configuration","text":"<p>Configuration</p> <p>Especially low-latency global configuration</p> <p>Consul key-value (KV) store for config</p> <ul> <li>Unified config &amp; single source of truth</li> </ul>"},{"location":"vault5/4vault_consul/#consul-kv-store","title":"Consul KV Store","text":"<ul> <li>Simple in features</li> <li>Robust in replication</li> <li>Every value replicated in servers</li> <li>In-memory for quick access</li> <li>Consul KV is an official Vault backend</li> <li>More clients &amp; secrets means more RAM</li> <li>Vault persistent data is encrypted</li> <li>Implies Vault service registration</li> </ul>"},{"location":"vault5/4vault_consul/#demo-consul-key-value-store","title":"Demo: Consul Key-Value Store","text":"<p><code>storage-backend\\vault-config.hcl</code></p> <pre><code>storage \"consul\" {\n  address = \"localhost:8500\"\n}\n</code></pre> <pre><code>vault server -dev -config vault-config.hcl\n</code></pre> <pre><code>$ consul kv get -keys vault/\nvault/core/\nvault/logical/\nvault/sys/\n</code></pre> <pre><code>$ consul kv get -keys vault/core/\nvault/core/audit\nvault/core/auth\nvault/core/cluster/\nvault/core/hsm/\nvault/core/keyring\nvault/core/leader/\nvault/core/local-audit\nvault/core/local-auth\nvault/core/local-mounts\nvault/core/lock\nvault/core/master\nvault/core/mounts\nvault/core/seal-config\nvault/core/shamir-kek\nvault/core/wrapping/\n</code></pre> <pre><code>$ consul kv get -base64 vault/core/master\nAAAAAOLErU6VJ109wwhc+qBrwVbegcFfWL+adglLU\u00ae/sqFvww60Kca/HODrLWYbaSS]mzUgHJueOfAzz7rrLkYARKN88quoKJ3GJLIcVEoGrm/GTtv0X7SV+4Rsx0krGPH9Bg4RekLad(xY1oxkBuLDyC71+00aPamW1UPz9D5EL5VWq6Gf2obx2kDCTdSPismry\n</code></pre> <pre><code>consul kv put vault/core/master whoops!\nSuccess! Data written to: vault/core/master\n\n$ consul kv get vault/core/master\nwhoops!\n</code></pre>"},{"location":"vault5/4vault_consul/#securing-the-consul-api","title":"Securing the Consul API","text":"<ul> <li>Not secure by default</li> <li>Vault stores encrypted data\u2026</li> <li>\u2026but we should still secure endpoints</li> <li>Built-in ACL system for the API</li> <li>Authentication via tokens that Vault can make</li> <li>Process</li> <li>Bootstrap the ACL system</li> <li>Provide a management token to Vault</li> <li>Create a role, bound to Consul policies</li> </ul>"},{"location":"vault5/4vault_consul/#demo-consul-api-acl-system","title":"Demo: Consul API ACL System","text":"<p><code>consul-tokens\\consul-config.hcl</code></p> <pre><code>acl = {\n    enabled = true\n    default_policy = \"deny\"\n    #enable_token_persistence = true\n}\n</code></pre> <pre><code>consul agent -dev -config-file=consul-config.hcl -node=server-0\n</code></pre> <p></p> <pre><code>consul acl bootstrap\nAccessorID:     87d824c-0763-f8bc-e476-7ae4cffb77de\nSecretID:       44074773-6988-492c-09a5-97880c11de86\nDescription:    Bootstrap Token (Global Management)\nLocal:          false\nCreate Time:    2021-10-31 14:13:14. 191713 -9400 EDT\nPolicies:   00000000-0000-0000-0000-000000000001 - global-management\n</code></pre> <pre><code>export CONSUL_BOOTSTRAP_TOKEN=44074773-6988-492c-09a5-97880c11de86\n\n$ vault secrets enable consul\nSuccess! Enabled the consul secrets engine at: consul/\n\n$ vault write consul/config/access\n    address=http://localhost:8500 \\\n    token=$CONSUL_BOOTSTRAP_TOKEN\n\nSuccess! Data written to: consul/config/access\n</code></pre> <ul> <li><code>consul-server-policy.hcl</code></li> </ul> <pre><code>node_prefix \"server-\" {\n  policy = \"write\"\n}\nnode_prefix \"\" {\n  policy = \"read\"\n}\nservice_prefix \"\" {\n  policy = \"read\"\n}\nacl = \"read\"\n</code></pre> <pre><code>CONSUL_HTTP_TOKEN=$CONSUL_BOOTSTRAP_TOKEN \\\n    consul acl policy create \\\n    -name consul-server\\\n    -rules @consul-server-policy.hcl\n\nID:     1b424d83-3cb9-44a0-b096-4152c363a883\nName:   consul-server\nDescription:\nDatacenters:\nRules:\nnode_prefix \"server-\" {\n  policy = \"write\"\n}\nnode_prefix \"\" {\n  policy = \"read\"\n}\nservice_prefix \"\" {\n  policy = \"read\"\n}\nacl = \"read\"\n</code></pre> <pre><code>vault write consul/roles/consul-server \\\n    policies=consul-server\n\nSuccess! Data written to: consul/roles/consul-server\n</code></pre> <pre><code>vault read consul/creds/consul-server\nKey         Value\n---         ----\nlease_id    consul/creds/consul-server/5fEcHIb8ynbOdqdC099NZc1N\nlease_duration  768h\nlease_renewable  true\naccessor        fc68c6c2-7499-09e-8839-485de1e39457\nlocal           false\ntoken           97ea1d39-911b-485d-feb-1ea8ba8a17f1\n</code></pre> <pre><code>export CONSUL SERVER TOKEN=97ea1d39-911b-485d-cfeb-1ea8ba8a17f1\nexport CONSUL SERVER ACCESSOR=fc68c6c2-7499-c09e-8839-485de1e39457\n</code></pre> <pre><code>consul-tokens CONSUL_HTTP_TOKEN=$CONSUL_SERVER_TOKEN \\\n    consul acl token read -id CONSUL_SERVER_ACCESSOR\nAccessorID:     fc68c6c2-7499-c09e-8839-485de1e39457\nSecretID:           &lt;hidden&gt;\nDescription:    Vault consul-server root 1635704380586423000\nLocal:              false\nCreate Time:    2021-10-31 14:19:40.588897 -0400 EDT\nPolicies:   \n    1b424d83-3cb9-44a0-b096-4152c363a883-consul-server\n</code></pre> <pre><code>CONSUL_HTTP_TOKEN=$CONSUL_BOOTSTRAP_TOKEN \\\n    consul acl set-agent-token agent $CONSUL_SERVER_TOKEN\n\nACL token \"agent\" set successfully\n</code></pre> <p></p>"},{"location":"vault5/4vault_consul/#consul-connect-mtls","title":"Consul Connect mTLS","text":""},{"location":"vault5/4vault_consul/#network-segmentation","title":"Network Segmentation","text":"<p>Monolithic app</p> <ul> <li><code>Load balancer -&gt; app -&gt; database</code></li> </ul> <p>Microservices</p> <ul> <li>Vastly increased number of connections</li> <li>Each service needs at least one other</li> <li>Restrict services to others they need</li> <li>Achieving with IPs is very hard</li> </ul> <p>Consul Connect, a higher-level mechanism</p>"},{"location":"vault5/4vault_consul/#consul-connect","title":"Consul Connect","text":"<p>Services communicate through</p> <ul> <li>Consul SDK in the service code</li> <li>Sidecar proxy</li> </ul> <p>Secured with mTLS</p> <ul> <li>TLS unaware apps are encrypted</li> <li>Little to no code changes for proxy</li> <li>Both services know the ID of the other</li> </ul> <p>Consul will allow or deny using</p> <ul> <li>ID from TLS certificate</li> <li>\u201cIntentions\"</li> </ul>"},{"location":"vault5/4vault_consul/#demo-consul-connect-mtls","title":"Demo: Consul Connect mTLS","text":"<p>How to use Vault and consul\u2011template to provision and rotate TLS certificates that secure service\u2011to\u2011service communication</p> <p>Already set up two PKI engines in Vault</p> <pre><code>vault write pki_int/roles/consul-dc1 \\\n    allowed_domains=\"dc1.consul\"\n    allow_subdomains=true\n    generate_lease=true \\\n    max_ttl=\"720h\"\n\nSuccess! Data written to: pkiint/roles/consul-dc1\n</code></pre> <p>One is the root CA and another as the intermediate CA. </p> <ul> <li><code>agent-certificate.template</code></li> </ul> <pre><code>{{ with secret \"pki_int/issue/consul-dc1\" \"common_name=server.dc1.consul\" \"ttl=5m\" \"alt_names=localhost\" \"ip_sans=127.0.0.1\"}}\n{{ .Data.certificate }}\n{{ end }}\n</code></pre> <ul> <li><code>agent-key.template</code></li> </ul> <pre><code>{{ with secret \"pki_int/issue/consul-dc1\" \"common_name=server.dc1.consul\" \"ttl=5m\" \"alt_names=localhost\" \"ip_sans=127.0.0.1\"}}\n{{ .Data.private_key }}\n{{ end }}\n</code></pre> <ul> <li><code>ca-certificate.template</code></li> </ul> <pre><code>{{ with secret \"pki_int/issue/consul-dc1\" \"common_name=server.dc1.consul\" \"ttl=5m\" \"alt_names=localhost\" \"ip_sans=127.0.0.1\"}}\n{{ .Data.issuing_ca }}\n{{ end }}\n</code></pre> <ul> <li><code>onsul-template-config.hcl</code></li> </ul> <pre><code>vault {\n  address      = \"http://localhost:8200\"\n\n  # You can use the Vault agent to manage the required Vault token\n  # vault_agent_token_file = \"\"\n\n  renew_token=false\n}\n\ntemplate {\n  source      = \"templates/ca-certificate.template\"\n  destination = \"secrets/ca.crt\"\n  command     = \"date &amp;&amp; consul reload\"\n}\n\ntemplate {\n  source      = \"templates/agent-certificate.template\"\n  destination = \"secrets/agent.crt\"\n  command     = \"date &amp;&amp; consul reload\"\n}\n\ntemplate {\n  source      = \"templates/agent-key.template\"\n  destination = \"secrets/agent.key\"\n  command     = \"date &amp;&amp; consul reload\"\n}\n</code></pre> <pre><code>consul-template -config consul-template-config.hcl\nSun Oct 31 14:33:08 EDT 2021\nError reloading: Put\n\"http: //127.0.0.1:8500/v1/agent/reload\": dial tcp 127.0.0.1:8500: connect: connection refused\n2021-10-3114:33:08.321-0400 [ERR] (cli) 1 error occurred:\n    * failed to execute command \"date &amp;&amp; consul reload\" from\n\"templates/ca-certificate. template\" =&gt;\n\"secrets/ca.crt\": child: command exited with a non-zero exit status:\n\n    sh -c date &amp;&amp; consul reload\n\nThis is assumed to be a failure. Please ensure the command\nexits with a zero exit status.\n</code></pre> <p>consul\u2011template will quit because the consul reload command failed, but it did manage to pull the secrets from Vault.</p> <p></p> <p><code>consul-config.hcl</code></p> <pre><code>verify_incoming = true\nverify_outgoing = true\nverify_server_hostname = true\n\nca_file = \"secrets/ca.crt\"\ncert_file = \"secrets/agent.crt\"\nkey_file = \"secrets/agent.key\"\n\nauto_encrypt {\n  allow_tls = true\n}\n</code></pre> <pre><code>consul agent -dev -config-file consul-config.hcl\n</code></pre> <p></p> <pre><code>$ consul-template -config consul-template-config.hcl\n\nSun Oct 31 14:43:35 EDT 2021\nConfiguration reload triggered\n</code></pre> <p></p>"},{"location":"vault5/4vault_consul/#module-review","title":"Module Review","text":"<ul> <li>HashiCorp Consul</li> <li>Register Vault as a service</li> <li>Use Consul KV for Vault storage</li> <li>Secure the API with token access</li> <li>Produce certificates for service mTLS</li> </ul>"},{"location":"vault5/5vault_cloud/","title":"L5 Authenticating Using Cloud Machine Identity","text":"<p>Machine ID authentication</p> <ul> <li>AWS</li> <li>Azure</li> <li>GCP</li> </ul>"},{"location":"vault5/5vault_cloud/#machine-identity","title":"Machine Identity","text":"<ul> <li>Create a policy to access resources</li> <li>Relate the policy to an identity</li> <li>Attach the identity to a machine</li> <li>Internal requests authorized via the policy</li> <li>Authenticate via machine exclusive info</li> <li>Auth data is available automatically</li> <li>Stop generating keys for cloud-internal use</li> </ul>"},{"location":"vault5/5vault_cloud/#aws-iam-authentication","title":"AWS IAM Authentication","text":"<ul> <li>STS API GetCallerIdentity</li> <li>Validate the identity of a client</li> <li><code>Sign a request -&gt; Vault -&gt; STS API</code></li> <li>IAM policy created &amp; attached to role</li> <li>IAM profile attached to a machine</li> <li>Vault CLI will handle signing the request</li> </ul>"},{"location":"vault5/5vault_cloud/#demo-authenticate-with-aws-machine-identity","title":"Demo: Authenticate with AWS Machine Identity","text":"<p>https://developer.hashicorp.com/vault/docs/auth/aws#iam-authentication-inferences</p> <p>Use IAM role access as the security boundary</p> <p><code>vault-aws-auth.json</code></p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:GetUser\",\n        \"iam:GetRole\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n\n</code></pre> <p><code>carved-rock-app.json</code></p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:GetObject\",\n                \"s3:PutObject\",\n                \"s3:DeleteObject\"\n            ],\n            \"Resource\": \"arn:*:s3:::carved-rock/*\"\n        }\n    ]\n}\n</code></pre> <p>Create one app server and one vault server with attached policy</p> <p></p> <p></p>"},{"location":"vault5/5vault_cloud/#attachreplace-iam-role-to-server","title":"Attach/Replace IAM Role to server","text":""},{"location":"vault5/5vault_cloud/#on-app-server","title":"On app server","text":"<pre><code>ubuntu@carved-rock-app:~$ aws sts get-caller-identity\n{\n    \"UserId\": \"AROARJ26BX4FVTLZGCZJE: i-01142c022958cf68b\"\n    \"Account\":  \"089854689035\"\n    \"Arn\": \"arn:aws:sts::089854689035:assumed-role/CarvedRockApp/i-01142c022958cf68b\"\n}\n\nubuntu@carved-rock-app:~$\n</code></pre>"},{"location":"vault5/5vault_cloud/#on-vault-server","title":"On Vault server","text":"<pre><code>ubuntu@vault:~$ vault auth enable aws\nSuccess! Enabled aws auth method at: aws/\n</code></pre> <pre><code>ubuntu@vault:~$ vault write auth/aws/role/carved-rock-app\\\n&gt; auth_type=iam \\\n&gt; bound_iam_principal_arn=arn:aws:iam::089854689035:role/CarvedRockApp \\\n&gt; policies=a-vault-policy\n\nSuccess! Data written to: auth/aws/role/carved-rock-app\n</code></pre>"},{"location":"vault5/5vault_cloud/#on-app-server_1","title":"On app server","text":"<pre><code>ubuntu@carved-rock-app:~$ vault login -method=aws role=carved-rock-app\n\nSuccess! You are now authenticated. The token information displayed below is already stored in the token helper. You do NOT need to run \"vault login\" again. Future Vault requests will automatically use this token.\n\nKey             Value\n---         ----\ntoken           s.KmJiABiXQg4cWLUa5vdFv3jH\ntoken_accessor  gN4UhGARbnesQVgeAdT8LUXR\ntoken_duration  768h\ntoken_renewable true\ntoken_policies  [\"a-vault-policy\" \"default\"]\nidentity_policies   []\npolicies            ['a-vault-policy\" \"default\"]\ntoken_meta_auth_type        iam\ntoken_meta_role_id          f07144ac-c8ab-2dee-9a67-ec265b7e22c8\ntoken_meta_account_id   089854689035\n</code></pre>"},{"location":"vault5/5vault_cloud/#demo-authenticate-with-azure-machine-identity","title":"Demo: Authenticate with Azure Machine Identity","text":"<ul> <li>Managed Service Identity (MSI)</li> <li>Azure Active Directory (AAD)</li> <li>JWT from MSI -&gt; Vault -&gt; AAD</li> <li>Machine, subscription ID or resource group</li> <li>Instance metadata service</li> <li>Least amount of automation in Vault CLI</li> </ul>"},{"location":"vault5/5vault_cloud/#machine-identity-in-azure","title":"Machine identity in Azure","text":"<p>Vault can take advantage of Managed Service Identity, which is a feature of Azure Active Directory that allows systems to uniquely authenticate.</p> <p>When authenticating to Vault, a machine can retrieve a signed JWT from MSI that it passes to Vault, which then goes back to Active Directory for validation.</p> <p>Vault will let you bind a role to more than the individual managed identity by using subscription ID or resource group to grant access.</p> <p>Values for the JWT, subscription ID, and resource group are all made available to the machine through the Instance Metadata Service.</p> <p></p> <p>First, we need to open Azure Active Directory and go to App registrations. This is where we register an application for machines to request JWTs for and have Vault validate them for authentication.</p> <p></p> <ul> <li>Name: <code>interating-vault-with-devops-workflow</code></li> <li>Applciation ID URI: <code>api://carvd-rock</code></li> </ul> <p></p> <p></p> <p></p> <p></p> <pre><code>azureuser@vault:~$ vault auth enable azure\nSuccess! Enabled azure auth method at: azure/\n\nazureuser@vault:~$ vault write auth/azure/config\n&gt; tenant_id=0fe26425-ed6a-47bf-8484-f36bb5f71e7 resource=api://carved-rock\n\nSuccess! Data written to: auth/azure/config\n\n\nazureuser@vault:~$ vault write auth/azure/role/carved-rock-app\\\n&gt; policies=a-vault-policy\\\n&gt; bound_service_principal_ids=eea648e3-f55c-4764-a065-4547ff29837\n\nSuccess! Data written to: auth/azure/role/carved-rock-app\n</code></pre> <pre><code>azureuser@carved-rock-app:~$ curl -s \\\n&gt; 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&amp;resource=api%3A%2F%2Fcarved-rock'\n&gt; -H Metadata:true | jg\n</code></pre> <p></p> <pre><code>azureuser@carved-rock-app:~$ curl -s \\\n&gt; 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&amp;resource=api%3A%2F%2Fcarved-rock'\n&gt; -H Metadata:true | jg .access_token -r\n</code></pre> <p></p> <pre><code>azureuser@carved-rock-app:~$ vault write auth/azure/login \\\n&gt; role=carved-rock-app\n&gt; jwt=$(curl -s 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&amp;resource=api%3A%2F%2Fcarved-rock' -H Metadata: true | jq -access_token -r)\n</code></pre> <p></p> <pre><code>azureuser@vault:~$ vault write auth/azure/role/carved-rock-app policies=a-vault-policy bound_service_principal_ids=\neea648e3-f55c-4764-a065-45474f21234\n\nSuccess! Data written to: auth/azure/role/carved-rock-app\n</code></pre> <p>Change principal id will cause error</p> <p>Once if I edit the Vault role and change the <code>bound_service_principal_id</code> like this, then try the same login command again, it fails with an error saying that the Service principal is not authorized.</p> <p></p>"},{"location":"vault5/5vault_cloud/#authenticate-with-gcp-machine-identity","title":"Authenticate with GCP Machine Identity","text":"<ul> <li>Specific to GCP, no Google or GSuite</li> <li>Permissions -&gt; roles -&gt; service account (SA)</li> <li>Apply a service account to an instance</li> <li>Call IAM API for a JWT, pass JWT to Vault</li> <li>Built-in Vault CLI helper</li> <li>Default SA is too powerful</li> <li>SA token creator role is vital</li> </ul>"},{"location":"vault5/5vault_cloud/#demo-authenticate-with-gcp-machine-identity","title":"Demo: Authenticate with GCP Machine Identity","text":"<p>The GCP auth method cannot be used to authenticate generic Google or GSuite users.</p> <p>In GCP, permissions are assigned to roles, roles can be given to a service account, and that service account can be applied to an instance.</p> <p>A machine can then call Google's IAM API to create a JWT that represents a given service account. The JWT is then passed to Vault for the authentication step.</p> <p>Vault has a built\u2011in helper to make the JWT creation process a little easier.</p>"},{"location":"vault5/5vault_cloud/#create-service-account-key-and-roles","title":"Create Service Account Key and roles","text":"<p>Create Role for account with two permission</p> <p></p> <ul> <li>iam.serviceAccountKeys.get</li> <li>iam.serviceAccounts.get</li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>App server</p> <pre><code>gcg@vault:~$ vault auth enable gcp\nSuccess! Enabled gcp auth method at: gcp/\n\ngcg@vault:~$ vault write auth/gcp/role/carved-rock-app\\\n&gt; type=iam\\\n&gt; policies=a-vault-policy\n&gt; bound_service_accounts=carved-rock-app-id@integrating-vault-with-devops.iam.aserviceaccount.com\n\ngcg@carved-rock-app:~$ vault login -method=gcp \\\n&gt; role=carved-rock-app\\\n&gt; jwt_exp=15m \\\n&gt; service_account=carved-rock-app-id@integrating-vault-with-devops.iam.gserviceaccount.com\n</code></pre> <p></p> <pre><code>gcg@vault:~$ vault write auth/gcp/role/carved-rock-app\\\n&gt; type=iam\\\n&gt; policies=a-vault-policy \\\n&gt; bound_service_accounts=carved-rock-app-machine@integrating-vault-with-devops.iam.gserviceaccount.com\n</code></pre> <pre><code>gcg@carved-rock-app:~$ vault login -method=gcp \\\n&gt; role=carved-rock-app\n&gt; jwt_exp=15m\\\n&gt; service_account=carved-rock-app-machine@integrating-vault-with-devops.iam.gserviceaccount.com\n</code></pre> <pre><code>gcg@carved-rock-app:~$ vault login -method=gcp \\\n&gt; role=carved-rock-app \\ \n&gt; jwt_exp=15m \\\n&gt; service_account=carved-rock-app-machine@integrating-vault-with-devops.iam.gserviceaccount.com\n\nError authenticating: unable to sign JWT for projects/-/serviceAccounts/carved-rock-app-machine@integrating-vault-wit\nh-devops.iam.gserviceaccount.com using given Vault credentials: googleapi: Error 403: The caller does not have permission, forbidden\n</code></pre>"},{"location":"vault5/6vault_k8s/","title":"L6 Integrating Vault with Kubernetes","text":""},{"location":"vault5/6vault_k8s/#1-vault-helm-chart-auto-unseal","title":"1 Vault Helm Chart &amp; Auto Unseal","text":"<p>Vault Helm Chart</p> <pre><code># Helm 3 &amp; Kubernetes 1.14+\n# Use Helm --dry-run flag outside of local experiments\n\n\nhelm install vault hashicorp/vault # Standalone\n\nhelm install vault hashicorp/vault --set \"server.dev.enabled=true\u201d # Dev\n\nhelm install vault hashicorp/vault --set \"server.ha.enabled=true\" # HA\n\nhelm install vault hashicorp/vault --set \"injector.externalVaultAddr=...\" # External\n</code></pre>"},{"location":"vault5/6vault_k8s/#auto-unseal","title":"Auto Unseal","text":"<p>Entrust the unseal key to a service</p> <ul> <li>Cloud Key Management Service (KMS)</li> <li>Another Vault Server</li> </ul> <p>Retrieve the unseal key &amp; continue as usual</p> <p>Automation is easier</p> <p>Reduce wait-time to recover</p> <p>Single service as a point of failure</p> <p>Recovery keys for future quorum operations</p>"},{"location":"vault5/6vault_k8s/#demo-deploying-via-the-vault-helm-chart","title":"Demo: Deploying via the Vault Helm Chart","text":"<pre><code>$ helm repo add hashicorp https://helm.releases.hashicorp.com\n\"hashicorp\" has been added to your repositories\n</code></pre>"},{"location":"vault5/6vault_k8s/#install-consul","title":"Install Consul","text":"<p><code>helm-consul-values.yml</code></p> <pre><code>client:\n  enabled: true\n\nserver:\n  replicas: 1\n  bootstrapExpect: 1\n  disruptionBudget:\n    maxUnavailable: 0\n</code></pre> <pre><code>$ helm install consul hashicorp/consul --values helm-consul-values.yml\nNAME: consul\nLAST DEPLOYED: Tue Jan  3 21:32:46 2023\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\nThank you for installing HashiCorp Consul!\n\nYour release is named consul.\n\nTo learn more about the release, run:\n\n  $ helm status consul --namespace default\n  $ helm get all consul --namespace default\n\nConsul on Kubernetes Documentation:\nhttps://www.consul.io/docs/platform/k8s\n\nConsul on Kubernetes CLI Reference:\nhttps://www.consul.io/docs/k8s/k8s-cli\n</code></pre>"},{"location":"vault5/6vault_k8s/#install-vault","title":"Install vault","text":"<p><code>helm-vault-values.yml</code></p> <pre><code>server:\n  affinity: \"\"\n  ha:\n    enabled: true\n  #extraVolumes:\n  #  - name: vault-seal-config\n  #    type: secret\n  #extraArgs: \"-config=/vault/userconfig/vault-seal-config/vault-seal.hcl\"\n</code></pre> <pre><code>helm install vault hashicorp/vault --values helm-vault-values.yml\n\nNAME: vault\nLAST DEPLOYED: Tue Jan  3 21:38:46 2023\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\nThank you for installing HashiCorp Vault!\n\nNow that you have deployed Vault, you should look over the docs on using\nVault with Kubernetes available here:\n\nhttps://www.vaultproject.io/docs/\n\n\nYour release is named vault. To learn more about the release, try:\n\n  $ helm status vault\n  $ helm get manifest vault\n</code></pre> <pre><code>$ kubectl get pod\nNAME                                                  READY   STATUS    RESTARTS       AGE\nconsul-consul-client-qwbjj                            1/1     Running   0              9m42s\nconsul-consul-connect-injector-69996cb66b-vjrnm       1/1     Running   0              9m42s\nconsul-consul-server-0                                1/1     Running   0              9m42s\nconsul-consul-webhook-cert-manager-654cbb5df6-xhlzg   1/1     Running   0              9m42s\n\nvault-0                                               0/1     Running   0              3m41s\nvault-1                                               0/1     Running   0              3m41s\nvault-2                                               0/1     Running   0              3m40s\nvault-agent-injector-8b6fd97b8-rg7b9                  1/1     Running   0              3m41s\n</code></pre> <pre><code>$ kubectl exec vault-0 -- vault status\nKey                Value\n---                -----\nSeal Type          shamir\nInitialized        false\nSealed             true\nTotal Shares       0\nThreshold          0\nUnseal Progress    0/0\nUnseal Nonce       n/a\nVersion            1.12.1\nBuild Date         2022-10-27T12:32:05Z\nStorage Type       consul\nHA Enabled         true\ncommand terminated with exit code 2\n</code></pre> <pre><code>helm uninstall vault\n</code></pre>"},{"location":"vault5/6vault_k8s/#demo-configuring-auto-unseal","title":"Demo: Configuring Auto Unseal","text":"<p>We can configure Vault to auto unseal, we first need to set up a KMS to provide the unseal key. I'll be using AWS KMS for this demo</p> <p></p> <p></p> <p><code>vault-seal.hcl</code></p> <pre><code>seal \"awskms\" {\n  region     = \"us-east-1\"\n  access_key = \"\"\n  secret_key = \"\"\n  kms_key_id = \"d930593d-c895-472c-b1dd-003383a1a344\"\n}\n</code></pre> <pre><code>$ kubectl create secret generic vault-seal-config--from-file vault-seal.hcl\nsecret/vault-seal-config created\n</code></pre>"},{"location":"vault5/6vault_k8s/#add-kms-actions-and-resources","title":"Add KMS Actions and Resources","text":"<pre><code>helm install vault hashicorp/vault -values helm-vault-values.yml\n\n\n$ kubectl exec vault-0 -- vault status\nKey                Value\n---                -----\nSeal Type          awskms\nInitialized        false\nSealed             true\nTotal Shares       0\nThreshold          0\nUnseal Progress    0/0\nUnseal Nonce       n/a\nVersion            1.12.1\nBuild Date         2022-10-27T12:32:05Z\nStorage Type       consul\nHA Enabled         true\ncommand terminated with exit code 2\n\nkubectl exec vault-0 -- vault operator init\n</code></pre>"},{"location":"vault5/6vault_k8s/#demo-configuring-kubernetes-authentication","title":"Demo: Configuring Kubernetes Authentication","text":"<pre><code>helm install vault hashicorp/vault \n\n$ kubectl exec vault-0 -- vault operator init\nUnseal Key 1: R6MbZVEX1F8z3jTUocGrICh7xUdhKqwWrrqlisYlAbSp\nUnseal Key 2: ep8Pn/0c5MIJrN1tTY7b0IPXBCKsxnvwhdFc5h1hx5fF\nUnseal Key 3: 5PMhCbVepBY2NR9Hp1caPgpieZ+Ou/haBhMxdV+Cf0tY\nUnseal Key 4: twXwW8NCuWpt23YzqsT5niy/nOBxxhNybjWDxxlDOiaZ\nUnseal Key 5: xjvoDte4WLH1kvNPOy2XIj9w5PBFmbzmBRYXvZ8IhUvY\n\nInitial Root Token: hvs.aFXwTTgmQnwUeSFZC9H01R6i\n\nVault initialized with 5 key shares and a key threshold of 3. Please securely\ndistribute the key shares printed above. When the Vault is re-sealed,\nrestarted, or stopped, you must supply at least 3 of these keys to unseal it\nbefore it can start servicing requests.\n\nVault does not store the generated root key. Without at least 3 keys to\nreconstruct the root key, Vault will remain permanently sealed!\n\nIt is possible to generate new unseal keys, provided you have a quorum of\n</code></pre> <pre><code>$ kubectl get pod\nNAME                                                  READY   STATUS    RESTARTS        AGE\nvault-0                                               0/1     Running   0               38m\nvault-1                                               0/1     Running   0               38m\nvault-2                                               0/1     Running   0               38m\nvault-agent-injector-8b6fd97b8-rg7b9                  1/1     Running   0               38m\n</code></pre> <p>Fix the readiness probe error</p> <pre><code>kubectl exec -ti vault-0 -n vault -- vault operator unseal  \n\n# unseal first 3 keys \n</code></pre> <pre><code>$ kubectl exec -ti vault-0  -- vault operator unseal\nUnseal Key (will be hidden): \nKey                Value\n---                -----\nSeal Type          shamir\nInitialized        true\nSealed             true\nTotal Shares       5\nThreshold          3\nUnseal Progress    1/3\nUnseal Nonce       b1bbf576-20c7-c09e-a9d1-d4cde9ba922e\nVersion            1.12.1\nBuild Date         2022-10-27T12:32:05Z\nStorage Type       file\nHA Enabled         false\n\n$ kubectl exec -ti vault-0  -- vault operator unseal\nUnseal Key (will be hidden): \nKey                Value\n---                -----\nSeal Type          shamir\nInitialized        true\nSealed             true\nTotal Shares       5\nThreshold          3\nUnseal Progress    2/3\nUnseal Nonce       b1bbf576-20c7-c09e-a9d1-d4cde9ba922e\nVersion            1.12.1\nBuild Date         2022-10-27T12:32:05Z\nStorage Type       file\nHA Enabled         false\n\n$ kubectl exec -ti vault-0  -- vault operator unseal\nUnseal Key (will be hidden): \nKey             Value\n---             -----\nSeal Type       shamir\nInitialized     true\nSealed          false\nTotal Shares    5\nThreshold       3\nVersion         1.12.1\nBuild Date      2022-10-27T12:32:05Z\nStorage Type    file\nCluster Name    vault-cluster-b7f77b66\nCluster ID      dcb8d7bd-7058-3642-4bdf-62b1f04962d7\nHA Enabled      false\n</code></pre> <pre><code>$ kubectl get pod\nNAME                                                  READY   STATUS    RESTARTS        AGE\nvault-0                                               1/1     Running   0               4m24s\nvault-agent-injector-8b6fd97b8-s2k5d                  1/1     Running   0               4m23s\n</code></pre> <ul> <li>https://developer.hashicorp.com/vault/api-docs/auth/kubernetes</li> <li>https://docs.armory.io/continuous-deployment/armory-admin/secrets/vault-k8s-configuration/</li> </ul> <pre><code>$ kubectl exec -it vault-0 -- sh\n/ $ \n\n$ export VAULT_TOKEN=hvs.aFXwTTgmQnwUeSFZC9H01R6i\n\n$ vault auth enable kubernetes\n\n# kubernetes auth config\n\n# kubernetes auth config\nvault write auth/kubernetes/config \\\n        kubernetes_host=\"https://$KUBERNETES_PORT_443_TCP_ADDR:64\\43\" \\\n        token_reviewer_jwt=\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" \\\n        kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \\\n        issuer=\"https://kubernetes.default.svc.cluster.local\"\n\nSuccess! Data written to: auth/kubernetes/config\n\n\nvault write auth/kubernetes/role/carved-rock-app bound_service_account_names=carved-rock-app bound_service_account_namespaces=default policies=a-vault-policy\n\n\nSuccess! Data written to: auth/kubernetes/role/carved-rock-app\n</code></pre> <pre><code>$ kubectl create serviceaccount carved-rock-app\nserviceaccount/carved-rock-app created\n</code></pre> <p><code>carved-rock-app.yml</code></p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: carved-rock-app\n  labels:\n    app: carved-rock-app\nspec:\n  serviceAccountName: carved-rock-app\n  containers:\n  - image: ubuntu\n    command:\n      - \"sleep\"\n      - \"604800\"\n    imagePullPolicy: IfNotPresent\n    name: carved-rock-app\n  restartPolicy: Always\n</code></pre> <pre><code>kubectl apply -f carved-rock-app.yml\n\nkubectl exec -it carved-rock-app -- bash\nroot@carved-rock-app:/#\napt update &amp;&amp; apt-get install curl dnsutils jg\n\nroot@carved-rock-app:/# nslookup vault\nServer:         10.96.0.10\nAddress:        10.96.0.10#53\n\nName:   vault.default.svc.cluster.local\nAddress: 10.110.139.135\n\nroot@carved-rock-app:/# curl -i http://vault:8200\nHTTP/1.1 307 Temporary Redirect\nCache-Control: no-store\nContent-Type: text/html; charset=utf-8\nLocation: /ui/\nStrict-Transport-Security: max-age=31536000; includeSubDomains\nDate: Tue, 03 Jan 2023 15:50:16 GMT\nContent-Length: 40\n\n&lt;a href=\"/ui/\"&gt;Temporary Redirect&lt;/a&gt;.\n\nroot@carved-rock-app:/# env | grep VAULT\nVAULT_SERVICE_PORT_HTTPS_INTERNAL=8201\nVAULT_PORT_8201_TCP_PROTO=tcp\nVAULT_PORT_8200_TCP_ADDR=10.110.139.135\nVAULT_SERVICE_PORT=8200\nVAULT_PORT_8201_TCP_PORT=8201\nVAULT_AGENT_INJECTOR_SVC_PORT_443_TCP_PROTO=tcp\nVAULT_AGENT_INJECTOR_SVC_PORT=tcp://10.110.86.252:443\nVAULT_AGENT_INJECTOR_SVC_SERVICE_PORT_HTTPS=443\nVAULT_PORT_8200_TCP_PROTO=tcp\nVAULT_PORT_8200_TCP_PORT=8200\nVAULT_AGENT_INJECTOR_SVC_PORT_443_TCP_PORT=443\nVAULT_PORT_8201_TCP=tcp://10.110.139.135:8201\nVAULT_SERVICE_PORT_HTTP=8200\nVAULT_AGENT_INJECTOR_SVC_PORT_443_TCP_ADDR=10.110.86.252\nVAULT_PORT_8201_TCP_ADDR=10.110.139.135\nVAULT_PORT_8200_TCP=tcp://10.110.139.135:8200\nVAULT_AGENT_INJECTOR_SVC_PORT_443_TCP=tcp://10.110.86.252:443\nVAULT_AGENT_INJECTOR_SVC_SERVICE_HOST=10.110.86.252\nVAULT_SERVICE_HOST=10.110.139.135\nVAULT_AGENT_INJECTOR_SVC_SERVICE_PORT=443\nVAULT_PORT=tcp://10.110.139.135:8200\n\n\ncurl -X POST --data \"{\\\"jwt\\\": \\\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\\\", \\\"role\\\": \\\"carved-rock-app\\\"}\" http://vault:8200/v1/auth/kubernetes/login | jg\n</code></pre> <p></p> <pre><code>/ $ export VAULT_TOKEN=hvs.aFXwTTgmQnwUeSFZC9H01R6i\n/ $ vault write auth/kubernetes/role/carved-rock-app bound_service_account_names=not-carved-rock-app bo\nund_service_account_namespaces=default policies=a-vault-policy\nSuccess! Data written to: auth/kubernetes/role/carved-rock-app\n</code></pre> <pre><code># curl -X POST --data \"{\\\"jwt\\\": \\\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\\\", \\\"role\\\": \\\"carved-rock-app\\\"}\" http://vault:8200/v1/auth/kubernetes/login | jq\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1115  100    51  100  1064   9611   195k --:--:-- --:--:-- --:--:--  217k\n{\n  \"errors\": [\n    \"service account name not authorized\"\n  ]\n}\n</code></pre>"},{"location":"vault6/1encrypt_key/","title":"L1 Managing the Encryption Key","text":""},{"location":"vault6/1encrypt_key/#1-introduction","title":"1 Introduction","text":""},{"location":"vault6/1encrypt_key/#four-modules","title":"Four modules","text":"<p>Managing the encryption key</p> <ul> <li>Highlight Security concerns</li> </ul> <p>Managing the Storage backend</p> <ul> <li>Discuss the operational complexities</li> </ul> <p>Managing Vault during an incident</p> <ul> <li>Troubleshoot the Vault server</li> </ul> <p>Managing plugins and server upgrades</p> <ul> <li>Demonstrate server upgrade</li> </ul>"},{"location":"vault6/1encrypt_key/#2-installing-vault","title":"2 Installing Vault","text":"<pre><code># Now that we have a K8s cluster to work with, let's get Vault deployed with Helm\nexport SECRET_NAME=vault-tls\nexport NAMESPACE=vault\nexport certificate_cn=\"\"\n\n# First we will add the Helm repo for Vault\nhelm repo add hashicorp https://helm.releases.hashicorp.com\nhelm repo update hashicorp\n\n# Add a namespace for the Vault cluster\nkubectl create namespace ${NAMESPACE}\n\n# Create a secret with the Vault certificate info\nkubectl create secret generic vault-tls \\\n  --namespace ${NAMESPACE} \\\n  --from-file=vault.key=./certs/vault.key \\\n  --from-file=vault.crt=./certs/vault.crt\n</code></pre> <ul> <li><code>vault.key</code></li> </ul> <pre><code>-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAp+l+jV5wiDRbwOaTWWGBPW/fLga2ifMlkD2JMyCeoe/odPQo\n7n17gI3GD62UfZJZGJBAYQHLMiGbbS863ftQd+EZ5L54tkZC8aHxyokAN/zwGX/q\nM8dULsy/6sDfP2qF3TlccIKTjkEemRsGt2hQGbgyIQpljchwJhHSOrBRJf9UDu+R\nCOvuK8RBd9eIrvVKu1OmQXrhOQQnjfCE+u/aM9kWCjUR2I/ZdLxsVIwjcDY8al7q\n/NLZ+j+ZEseHHrL487umwTWO0wl/ixcJQqbJSxCblMaiTlt9nWl5cuHzknDCk/Fz\nSlOOdBvmWRr42+JC9EX27furk6R4lGjmcWRu9QIDAQABAoIBAET3bJlYHtRy3PTg\nP8lIeTLozjwzWapTiiwyejXbwgw1Y78VwfIi7CUjFiS+YO0qvRmPtkGh4PnYP+Sa\nr40ZejWi6WXArgf/1+MzZwKPPt3AMEXo+iMGThdi1bjwO0Hq2MzCkKtNlpmpOY4d\nQab3W18U/tH/WTLhDt80FqswXEREbsth3B6v4MEsnBzDrzO+f0J4VobjPvVKfb38\nNdUxfa9c+C6MFQ/pbA+OR5fOgiTUBpXQkIP9B7IUbBcZSQWH1AdlzhzvLCUQC9uU\np1ULBcibvsyKuJfzaIPeN5OitECKjJP1/OPkwIiyhQmlZniLvkoMbEqoJxA86Yeo\nR5M39UECgYEAz6mlgfPDIOXzeEoj74/Jz0Lb/s0b2rH1ImyzwAh6CR/mZr5dCja9\nnci+eoO9EMyf4VPt+gmsy0Rg5VdF3g8WP5GwXONlTPdgPu1j5oNFKy9agcG+Je/r\nRYCpHXUhNCtJZ32JcOK7+/pWTqjx5XwGe1wEp1DVgAgMrJX2xnj68KkCgYEAzv8p\nKGTgEmcvGPA6flO1PWpvFdbX+tMgt/BuPnULQRU3Vbt0eqGqGYBWDoRh84viyWPw\nkTG2UE1oLqsAn2QEo3p8wHkCq8NjjTws9G9blIZ6qq75ctomL6LNc20Y/GP9GaHh\nQinMELizkDr9FGIQGQZDpbXfL/kwzUNNeq9bn20CgYEAuuLOFJmv7heEeakfliUt\nVd2x5ynn+3VUS1rQme4HBdcznxuK1/pTw4A6DEArEsdUy5ChBvlWDMjI+x0Dv8iM\nGUGgGrh7Hj0y3O7/jSBuS2MebNBTtAirD62uhNg4vZ6HPR/5ZSJoU2kD616X9BMe\nMj6p4XoZ6lNUNK3xnMSb8aECgYATfa1Hc3Ax62tg4sXvPTyUouAA43EE2jp7d3U6\nBlVf9Hp4ZSVLostciVwRE+ARSbu6EOIHGfI7z34e3tU5LPbO2erDSOG6gLRwCRmG\njrHF43/LcJxmdyofVCoaU0yF/3hGoJqQW1UuweWOkC9iavVvFcrq4Jw6bTFuMocq\nJTbwZQKBgQCSr85uE9+oBeXW0tWhoNhuuxWqlR+AEFTp+OAoaG2nthmjx1Nl/kPG\n0T1/UevLL1Np6EO7dLLgo2kSNCxKgfG9IKv3sA6MDfhxYWyYfweiklxTtpCrCO+/\nieCO0qespJ5x190+9kqVf8SMqxxcScgfjQjaUrPSnH6svUmqDik5OQ==\n-----END RSA PRIVATE KEY-----\n</code></pre> <ul> <li><code>vault.crt</code></li> </ul> <pre><code>-----BEGIN CERTIFICATE-----\nMIIC9jCCAd4CCQCXVSNk7loeKTANBgkqhkiG9w0BAQUFADA9MRUwEwYDVQQKDAxz\neXN0ZW06bm9kZXMxJDAiBgNVBAMMG3N5c3RlbTpub2RlOnZhdWx0LnZhdWx0LnN2\nYzAeFw0yMjA3MDEwODUyMjRaFw0yMzA3MDEwODUyMjRaMD0xFTATBgNVBAoMDHN5\nc3RlbTpub2RlczEkMCIGA1UEAwwbc3lzdGVtOm5vZGU6dmF1bHQudmF1bHQuc3Zj\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp+l+jV5wiDRbwOaTWWGB\nPW/fLga2ifMlkD2JMyCeoe/odPQo7n17gI3GD62UfZJZGJBAYQHLMiGbbS863ftQ\nd+EZ5L54tkZC8aHxyokAN/zwGX/qM8dULsy/6sDfP2qF3TlccIKTjkEemRsGt2hQ\nGbgyIQpljchwJhHSOrBRJf9UDu+RCOvuK8RBd9eIrvVKu1OmQXrhOQQnjfCE+u/a\nM9kWCjUR2I/ZdLxsVIwjcDY8al7q/NLZ+j+ZEseHHrL487umwTWO0wl/ixcJQqbJ\nSxCblMaiTlt9nWl5cuHzknDCk/FzSlOOdBvmWRr42+JC9EX27furk6R4lGjmcWRu\n9QIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQBmogQGNT+p429ltJD/fsBRd58r0hSS\nxZPLObKehl6jZYb4Dp3Up4Nh0ZkykzJeA/9bHqqaTzf77+/2uxmYwNCdxsLz4Fff\nzbEfeyVDGImHiKZiIG814sjWUkt5FD4m5w4oMDtH9Y4j48oXdMDVCCSGgx2qH2p1\ntmBiSa5MHmK1QI8d+k4xkqNxowExeVdMcMRAa2ey0mdp3fuCDSPltb7rLPtl0IaH\nMtZZSyfV5rjbfnjBs4uXrIJIjsraqWJz+MdoaanZs/CiMUgzZhb8iOaFPZYyXMIz\n709mgDIqmtWPlPVXetixuMG5KXP5yoaM0YnjvHfwz0mGkH130EuIBjuJ\n-----END CERTIFICATE-----\n</code></pre>"},{"location":"vault6/1encrypt_key/#install-consul","title":"Install Consul","text":"<pre><code># Deploy Consul to provide storage for Vault\nhelm install consul hashicorp/consul --namespace vault\n</code></pre>"},{"location":"vault6/1encrypt_key/#install-vault","title":"Install Vault","text":"<pre><code># Deploy Vault cluster to K8s using helm\nhelm install vault hashicorp/vault \\\n  --namespace vault \\\n  --values values.yaml\n</code></pre> <ul> <li><code>values.yaml</code></li> </ul> <pre><code># Vault Helm Chart Value Overrides\nglobal:  \n  enabled: true  \n  tlsDisable: false\n\nserver:\n\n  readinessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true&amp;sealedcode=204&amp;uninitcode=204\"\n  livenessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true\"\n    initialDelaySeconds: 60\n\n  extraEnvironmentVars:\n    VAULT_CACERT: /vault/userconfig/vault-tls/vault.ca\n    VAULT_SKIP_VERIFY: true\n\n  extraVolumes:\n    - type: secret\n      name: vault-tls\n\n  standalone:\n    enabled: \"true\"\n\n    # config is a raw string of default configuration when using a Stateful\n    # deployment. Default is to use a PersistentVolumeClaim mounted at /vault/data\n    # and store data there. This is only used when using a Replica count of 1, and\n    # using a stateful set. This should be HCL.\n\n    # Note: Configuration files are stored in ConfigMaps so sensitive data\n    # such as passwords should be either mounted through extraSecretEnvironmentVars\n            # tls_client_ca_file = \"/vault/userconfig/vault-tls/vault.ca\"\n    # or through a Kube secret.  For more information see:\n    # https://www.vaultproject.io/docs/platform/k8s/helm/run#protecting-sensitive-vault-configurations\n    config: |\n\n      listener \"tcp\" {\n        address = \"[::]:8200\"\n        cluster_address = \"[::]:8201\"\n        tls_cert_file = \"/vault/userconfig/vault-tls/vault.crt\"\n        tls_key_file  = \"/vault/userconfig/vault-tls/vault.key\"\n\n      }\n\n\n      storage \"consul\" {\n        path = \"vault\"\n        address = \"consul-consul-server:8500\"\n      }\n      ui = true\n      log_level = \"Debug\"\n\n\n  service:\n    type: LoadBalancer\n    annotations: |\n      \"service.beta.kubernetes.io/aws-load-balancer-name\": \"vault-server\"\n</code></pre> <pre><code># We can monitor the install by doing a watch on the namespace\nkubectl get pods -n vault -w\n\nNAME    READY   STATUS  RESTART SAGE\nconsul-consul-client-7zx62  1/1 Running 0 17m\nconsul-consul-client-crr7j  1/1 Running 0 17m\nconsul-consul-client-djppb  1/1 Running 0 17m\nconsul-consul-server        1/1 Running 0 17m\nconsul-consul-server-1  1/1 Running 0 17m\nconsul-consul-server-2  1/1 Running 0 17m\nvault-agent-injector-6bf6cdb945-6g65z 1/1 Running 0 15m\nVault-1/1       Running 1/1 1\uff0810sago\uff0990S\n</code></pre> <pre><code># Once they are all Running, we're in good shape\n# Now get the LoadBalancer IP address for the server\nkubectl get service vault -n vault\n\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT (S) AGE\nvault loadBalancer 19. 199.49. 175 466846f95751a-1973715929.us-east-1.elb.amazonaws.com\n8200:32339/TCP,820130339/TCP 16m\n</code></pre> <pre><code># The address for the Vault server will be the dns label \n# plus the Azure region cloudapp.azure.com \n# Ex. vaultf-9f8a7a6.eastus.cloudapp.azure.com\n# You'll need to add a CNAME entry for this to your public DNS\n# Ex. vault-aks.globomantics.xyz\n\nexport VAULT_ADDR=\"https://${certificate_cn}:8200\"\n</code></pre> <pre><code>vault status -tls-skip-verify\nkey         vaule\n---         ----\nseal Type    shamir\n\u00b7\u00b7\u00b7\n</code></pre>"},{"location":"vault6/1encrypt_key/#2-unsealing-the-vault","title":"2 Unsealing the Vault","text":"<p>Vault server is sealed. You need to unseal it. You can unseal the Vault server in three different ways.</p> <ul> <li>Manual unsealing</li> </ul> <p>2 or more operators enter encryption key manually</p> <ul> <li>Auto unsealing</li> </ul> <p>A cloud key management service (KMS) is used</p> <ul> <li>Transit unsealing</li> </ul> <p>One vault server is used to unseal another</p> <pre><code>## Unsealing command \nvault operator init -tls-skip-verify -key-shares=3 -key-threshold=2\n\nUnseal Key 1: munsuu2SP6nXp1Fgk4PcIi+SA2DrAT8ACelvxtBn9BW7\nUnseal Key 2: WAqRCuM4nsG\u00aeJ+6pDPxovAhW568Q06EVnoxaNISMo9of\nUnseal Key 3: ZxgC1G7T1hXDQkI1copnPRFdPgfShSBSWc/PV+AnvnJ5\n\nInitial Root Token: hvs.0Qy1NYRSVD8VQsU8IUDLstQJ\n\nVault initialized with 3 key shares and a key threshold of 2. Please securely\ndistribute the key shares printed above. When the Vault is re-sealed.\nrestarted, or stopped, you must supply at least 2 of these keys to unseal it\nbefore it can start servicing requests.\nVault does not store the generated root key. Without at least 2 keys to\nreconstruct the root key, Vault will remain permanently sealed!\nIt is possible to generate new unseal keys, provided you have a quorum of\nexisting unseal keys shares. \n\nSee \"vault operator rekey\" for more information.\n</code></pre>"},{"location":"vault6/1encrypt_key/#manual-unsealing-method-with-gpg","title":"Manual unsealing method with GPG","text":"<p>You can use the PGP, GnuPG, or keybase keys. </p> <p>There is an option in the vault init command in which you can pass the GPG keys of the operators who are handling the unsealing keys. </p> <p>The Vault will then return the unsealing keys encrypted with those GPG keys.</p> <p>You can then share those unsealing keys over chat or email to the respective operator. </p> <p></p> <pre><code>### import pgp keys\ngpg --import dev-x.asc\ngpg --import dev-y.asc\ngpg --import dev-z.asc\n</code></pre> <ul> <li><code>dev-x-encoded.asc</code></li> </ul> <pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmDMEYr7vURYJKwYBBAHaRw8BAQdAbs7pgAejCRBNnJu/ljyFBvKvka7ipnRof+ti\nfgA6h+e0G2Rldi14IDxkZXYteEB2YXVsdGRlbW8uY29tPoiZBBMWCgBBFiEEx+DS\n/UcaKsnx22UgvoGy1kjA3ywFAmK+71ECGwMFCQPCZwAFCwkIBwICIgIGFQoJCAsC\nBBYCAwECHgcCF4AACgkQvoGy1kjA3ywnYgEAk+OYqhhGiSv6311WzCRV/IPZldgO\nf0bk+wb7YHw6Z2MA/idvU4EAV5qvG3nvzX1BkMZU+RIfkluMR03aG6JoexYFuDgE\nYr7vURIKKwYBBAGXVQEFAQEHQBwBNRy1OdcfIrjcVFswZqqZm5go1BLammm+yazS\n+SNEAwEIB4h+BBgWCgAmFiEEx+DS/UcaKsnx22UgvoGy1kjA3ywFAmK+71ECGwwF\nCQPCZwAACgkQvoGy1kjA3yztzwD/azc7Mrg4DkvFk2dsGeCm9fFCjNOAK5KYDpC5\nzXuFp3wBAM61CBVuMVmu+xGrfEvka4cLFy83W8CwzRd2Pa01/5sH\n=LqfI\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre> <ul> <li><code>dev-y-encoded.asc</code></li> </ul> <pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmDMEYr70xBYJKwYBBAHaRw8BAQdARciLwv4WRskXRrNpm5yBDQlOZnribYn9egut\nD0jO+OG0G2Rldi15IDxkZXYteUB2YXVsdGRlbW8uY29tPoiZBBMWCgBBFiEEkIMR\nwMAjc0Rklkz+HwT+dJXNVcwFAmK+9MQCGwMFCQPCZwAFCwkIBwICIgIGFQoJCAsC\nBBYCAwECHgcCF4AACgkQHwT+dJXNVcyzaQEA5jei8Svjqzs4wU/+VpVisgTwgse6\nv1+wuxLkKJFfSFcA/29esVLpbc+S8uXlMj2dEbd3yKg7prbqale3DK24bEoMuDgE\nYr70xBIKKwYBBAGXVQEFAQEHQBYwyIY0D7Pe2F18yn7CNYnBd9uqtN3yReXTtI1t\nESsyAwEIB4h+BBgWCgAmFiEEkIMRwMAjc0Rklkz+HwT+dJXNVcwFAmK+9MQCGwwF\nCQPCZwAACgkQHwT+dJXNVcxHCwEAx8M/eUWAr3kmz3YSsAl1pR26o7tBLiuahtVd\nnq38ntkBALmrtPzD9hSiEVR+hJaSAgN01KXmwEsvvrQSHXhHpGQM\n=WIul\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre> <ul> <li><code>dev-z-encoded.asc</code></li> </ul> <pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmDMEYr703RYJKwYBBAHaRw8BAQdA9QV2avIfeVHy72z6h2rIVlRePBiuyjdaLh4H\nnRTL8xu0G2Rldi16IDxkZXYtekB2YXVsdGRlbW8uY29tPoiZBBMWCgBBFiEEjVBp\nXY3YIsd3YD2KMQtnpoP/bhwFAmK+9N0CGwMFCQPCZwAFCwkIBwICIgIGFQoJCAsC\nBBYCAwECHgcCF4AACgkQMQtnpoP/bhzP9AEAmiIoe09CMqyD4HztKhjbrnMG5C/w\nxn3QM6gycJsRI94BANIttzCnAJTymNwkm+PJtHemI5sVq17DZytfCuBTh6kLuDgE\nYr703RIKKwYBBAGXVQEFAQEHQNETh+oi8848nudzbicVPBfA0FcUqtfU5S3oFDer\n2m12AwEIB4h+BBgWCgAmFiEEjVBpXY3YIsd3YD2KMQtnpoP/bhwFAmK+9N0CGwwF\nCQPCZwAACgkQMQtnpoP/bhzBhwEAk2KC8A/+wesH5NImZvlngee2gDM+WtvFnGyJ\ns7MaHDIA/AsFDQenANjqtUuek/y5nzBlMcZAQ5u3Nb12Fb4glNIC\n=1hNn\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre> <pre><code>$ gpg --list-keys\n</code></pre> <p></p> <pre><code>### export public keys to disk with base64 encoding\n\ngpg --export -a dev-x &gt; dev-x-encoded.asc\ngpg --export -a dev-y &gt; dev-y-encoded.asc\ngpg --export -a dev-z &gt; dev-z-encoded.asc\n</code></pre> <pre><code>vault operator init -tls-skip-verify -key-shares=3 -key-threshold=2 -pgp-keys=\"dev-x-encoded.asc,dev-y-encoded.asc,dev-z-encoded.asc\n\n* Unseal Key 1: wUADBdRFLivxYIWSAQdA7INCsya24F/EDByraPMoE@FVumEZ6y68FuFFkHBN@jEgdRyrWyeDM5yr+/ekdRxaS8mCFcieTNJdfX2CqrYxM2LS4AHkp9PKe02KARpgS+KQnelcH+GAfuC64N7hsezgTOJAAwsY40rmj9MOuY9zD3h7srA3GsPyXBDMjIKfdkPK@wp45y00J6IQzF50WIQ4P3VHhPuU6XUeSEpLOvuJ3z9d770FfQ6GeDB4U464FLkbXaP@+i1/3kkfKmhQ6aeReJltugC4ZF5AA==\n* Unseal Key 2: wU4Dn2PrEmM8HCASAQdAcEWojkCHyI27mxW9Hq+FK9rf0e6V45m5TcG+Wkqp9ykqyh9Lv43ZJpxNDLZCOExmSduxR8yIsI2mfToEs80gDrvS4AHkYy5+TuS3rKLLPbmYgJQ5r+Fq1eD24Drh4ILgGuI59TdH4Bfm4heNqYY/aB/30pkmnHPegkJjuOZPf52Ptg2nFSDAwhPccbnx+LUg1JYif015SJVRYTfTgX5iN86K6FGkWwFnuBK4RRU4GTksiNTZ7ymn611pSU117pij+J05cfj4Wf+AA==\n* Unseal Key 3: wU4DkFP01xIC1Z0SAQdA+7x18qF9JrGw331Rx615kpiW1Mi4Wb+WX/DhuweT91MqiubgefE4YkRa1G7fIrts1ofSVII607fPYR/VRnrvWKzS4AHktf@JAQ8hMqQpo/BOSPkWZOHI50AZ4Nzh5nPgx0L97giN4AnmfvEAISIXtd8ZDi3eJNiOF+Xf8VMmG5vtzrRkv17hog7yNKtwkfJ49DRjT5BikKP6NG5b3PHGjTOzSAmY6JLZZ+Bp4aFi4D3k2nXWgrwnPqYE6QZ5tg/OhuI1xC864Z24AA==\n\nInitial Root Token: hvs.NIWJmUZJm4kno8tcoHmeT67X\n\nVault initialized with 3 key shares and a key threshold of 2. Please securely\ndistribute the key shares printed above. When the Vault is re-sealed,restarted, or stopped, you must supply at least 2 of these keys to unseal it before it can start servicing requests, Vault does not store the generated root key. Without at least 2 keys to\n\nVault does not store the generated root key. Without at least 2 keys to\n</code></pre> <ul> <li>Root Token: hvs.NIWJmUZJm4kno8tcoHmeT67X</li> </ul> <pre><code>$ echo wUADBd... | base64 --decode | gpg -dq\n\na8373b92f595ece47a9159aada8d4d880b2b4da7c7a64378031ed23a8f418037d2\n\necho wU4Dn2PrEmM8... | base64 --decode | gpg -dq\n\n382492d0353209ee28bd05dc96f42aee2b62e2c62c1f18579c67ec3053317647fd\n</code></pre> <pre><code>$ vault operator unseal -tls-skip-verify\n....\nUnseal Progress 1/2\n\n$ vault operator unseal -tls-skip-verify\n</code></pre>"},{"location":"vault6/1encrypt_key/#rekeying-rotation","title":"Rekeying Rotation","text":"<p>This vault server will remain unsealed until the vault server is restarted, there is an error at the storage layer of the vault server, or the vault server is sealed manually or via the API in case of a cyberattack. </p>"},{"location":"vault6/1encrypt_key/#vault-stays-unsealed-until","title":"Vault stays unsealed until:","text":"<ul> <li>Server is restarted</li> <li>An error at storage layer</li> <li>Sealed manually via API</li> </ul>"},{"location":"vault6/1encrypt_key/#what-if","title":"What if?","text":"<ul> <li>An operator is on vacation or leaving the organisation</li> <li>A new team member joins and shares the unsealing responsibilities</li> <li>The team wants to increase theshards and threshold of unsealing keys</li> <li>Compliance mandates rotating the encryption keys periodically</li> </ul>"},{"location":"vault6/1encrypt_key/#possible-solutions","title":"Possible Solutions:","text":"<ul> <li>Rekey the unsealing keys</li> <li>Rotate the encryption key</li> <li>Migrate to auto-unseal</li> </ul> <p>Transfer the unsealing responsibilities.</p>"},{"location":"vault6/1encrypt_key/#explore-the-rekey-and-rotation-method","title":"Explore the rekey and rotation method","text":"<ul> <li><code>dev-x-encoded.asc</code></li> </ul> <pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmDMEYr7vURYJKwYBBAHaRw8BAQdAbs7pgAejCRBNnJu/ljyFBvKvka7ipnRof+ti\nfgA6h+e0G2Rldi14IDxkZXYteEB2YXVsdGRlbW8uY29tPoiZBBMWCgBBFiEEx+DS\n/UcaKsnx22UgvoGy1kjA3ywFAmK+71ECGwMFCQPCZwAFCwkIBwICIgIGFQoJCAsC\nBBYCAwECHgcCF4AACgkQvoGy1kjA3ywnYgEAk+OYqhhGiSv6311WzCRV/IPZldgO\nf0bk+wb7YHw6Z2MA/idvU4EAV5qvG3nvzX1BkMZU+RIfkluMR03aG6JoexYFuDgE\nYr7vURIKKwYBBAGXVQEFAQEHQBwBNRy1OdcfIrjcVFswZqqZm5go1BLammm+yazS\n+SNEAwEIB4h+BBgWCgAmFiEEx+DS/UcaKsnx22UgvoGy1kjA3ywFAmK+71ECGwwF\nCQPCZwAACgkQvoGy1kjA3yztzwD/azc7Mrg4DkvFk2dsGeCm9fFCjNOAK5KYDpC5\nzXuFp3wBAM61CBVuMVmu+xGrfEvka4cLFy83W8CwzRd2Pa01/5sH\n=LqfI\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre> <ul> <li><code>dev-y-encoded.asc</code></li> </ul> <pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmDMEYr70xBYJKwYBBAHaRw8BAQdARciLwv4WRskXRrNpm5yBDQlOZnribYn9egut\nD0jO+OG0G2Rldi15IDxkZXYteUB2YXVsdGRlbW8uY29tPoiZBBMWCgBBFiEEkIMR\nwMAjc0Rklkz+HwT+dJXNVcwFAmK+9MQCGwMFCQPCZwAFCwkIBwICIgIGFQoJCAsC\nBBYCAwECHgcCF4AACgkQHwT+dJXNVcyzaQEA5jei8Svjqzs4wU/+VpVisgTwgse6\nv1+wuxLkKJFfSFcA/29esVLpbc+S8uXlMj2dEbd3yKg7prbqale3DK24bEoMuDgE\nYr70xBIKKwYBBAGXVQEFAQEHQBYwyIY0D7Pe2F18yn7CNYnBd9uqtN3yReXTtI1t\nESsyAwEIB4h+BBgWCgAmFiEEkIMRwMAjc0Rklkz+HwT+dJXNVcwFAmK+9MQCGwwF\nCQPCZwAACgkQHwT+dJXNVcxHCwEAx8M/eUWAr3kmz3YSsAl1pR26o7tBLiuahtVd\nnq38ntkBALmrtPzD9hSiEVR+hJaSAgN01KXmwEsvvrQSHXhHpGQM\n=WIul\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre> <ul> <li><code>dev-z-encoded.asc</code></li> </ul> <pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmDMEYr703RYJKwYBBAHaRw8BAQdA9QV2avIfeVHy72z6h2rIVlRePBiuyjdaLh4H\nnRTL8xu0G2Rldi16IDxkZXYtekB2YXVsdGRlbW8uY29tPoiZBBMWCgBBFiEEjVBp\nXY3YIsd3YD2KMQtnpoP/bhwFAmK+9N0CGwMFCQPCZwAFCwkIBwICIgIGFQoJCAsC\nBBYCAwECHgcCF4AACgkQMQtnpoP/bhzP9AEAmiIoe09CMqyD4HztKhjbrnMG5C/w\nxn3QM6gycJsRI94BANIttzCnAJTymNwkm+PJtHemI5sVq17DZytfCuBTh6kLuDgE\nYr703RIKKwYBBAGXVQEFAQEHQNETh+oi8848nudzbicVPBfA0FcUqtfU5S3oFDer\n2m12AwEIB4h+BBgWCgAmFiEEjVBpXY3YIsd3YD2KMQtnpoP/bhwFAmK+9N0CGwwF\nCQPCZwAACgkQMQtnpoP/bhzBhwEAk2KC8A/+wesH5NImZvlngee2gDM+WtvFnGyJ\ns7MaHDIA/AsFDQenANjqtUuek/y5nzBlMcZAQ5u3Nb12Fb4glNIC\n=1hNn\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre> <pre><code>## start the rekeying\nvault operator rekey -tls-skip-verify -init -key-shares=3 -key-threshold=2 -pgp-keys=\"dev-x-encoded.asc,dev-y-encoded.asc,dev-z-encoded.asc\"\n</code></pre> <pre><code>nonce id: d26464d0-1ecb-84fc-25f1-780bd9caf3a\n</code></pre> <pre><code>## Enter the unseal keys\nvault operator rekey -tls-skip-verify\n\n\nvault operator rekey -tls-skip-verify\nRekey operation nonce: d26464d0-lecb-84fc-25f1-7b80bd9caf3a\n</code></pre> <pre><code>### unseal keys\nKey 1 fingerprint: c7e0d2f471a2ac9f1db6520be81b2d648c0df2c; value: wU4DBdRFLivxYlwSAQdAqVEjrKh\nKey 2 fingerprint: 908311c0c023734464964cfelf04fe7495cd55cc; value: wU4Dn2PrEmM8HCASAQdAsT1UVfH\nKey 3 fingerprint: 8d50695d8dd822c777603d8a310b67a683ff6e1c; value: wU4DkFPOxIC1ZOSAQdAAZoMesq\n</code></pre>"},{"location":"vault6/1encrypt_key/#rekeying","title":"Rekeying","text":"<p>Online process, so no downtime</p> <p></p> <p>Rotating</p> <pre><code>vault operator rekey -tls-skip-verify\n\nError rotating key: Error making API request.\nURL: POST https: //ab3302c5d721442a389c0e666b55e046-1966045790.us-east-1.elb.amazonaws.com:8200/v1/sys/rotate\nCode: 403. Errors:\n\n* permission denied\n</code></pre>"},{"location":"vault6/1encrypt_key/#generate-a-new-root-token","title":"Generate a new root token..","text":"<pre><code>vault operator generate-root-tls-skip-verify -init\n\nNonce.  da76c47a-9821-97a8-4a42-c9530364d5a4\nStarted true\nProgress 0/2\nComplete  false\nOTP    gOkDVGzGc3a04kAUUxzs5JK1Tg1m\nOT Length 28\n</code></pre> <pre><code>vault operator generate-root -tls-skip-verify\nOperation nonce: da76c47a-9821-97a8-4a42-c9530364d5a4\n</code></pre> <pre><code>echo wU4Dn2PrE..  | base64 --decode | gpg -dq\n\n382492d0353209ee28bd05dc96f42aee2b62e2c62c1f18579c67ec3053317b47fd\n</code></pre> <pre><code>vault operator generate-root-tls-skip-verify\nOperation nonce: da76c47a-9821-97a8-4a42-c9530364d5a4\nUnseal Key (will be hidden) :\nNonce       da76c47a-9821-97a8-4a42-c9530364d5a4\nStarted     true\nProgress    1/2\nComplete    false\n\nvault operator generate-root -tls-skip-verify\nOperation nonce:   da76c47a-9821-97a8-4a42-c9530364d5a4\nUnseal Key (will be hidden):\nNonce       da76c47a-9821-97a8-4a42-c9530364d5a4\nStarted  true\nProgress    2/2\nComplete    true\nEncoded Token DzkYaj5zAigwQVByYgg5BjQuFj1YKyJZYwwCAg\n</code></pre> <pre><code>nonce id: d26464d0-1ecb-84fc-25f1-780bd9caf3a\n\ndecoded = DzkYai5zAiaWOVByYgg5BiQuFilYKyJZYwwCAg\n</code></pre> <pre><code>vault operator generate-root -tls-skip-verify -decode=DzkYai5zAiaWOVByYgg5BiQuFilYKyJZYwwCAg -otp= gOkDVGzGc3a04kAUUxzs5JK1Tg1m\n</code></pre>"},{"location":"vault6/1encrypt_key/#set-the-new-token","title":"set the new token","text":"<pre><code>vault login -tls-skip-verify\n\nKey     Value\ntoken   hvs.h4xour1BVcxSaVlJmaih7k30\n...\n</code></pre>"},{"location":"vault6/1encrypt_key/#start-the-key-rotation","title":"Start the key rotation","text":"<pre><code>vault operator rotate -tls-skip-verify\n\nSuccess! Rotated key\nKey Term.     3\nInstall Time    02 Jul 22 04:42 UTC\nEncryption Count     2\n</code></pre>"},{"location":"vault6/1encrypt_key/#automate-the-rotation","title":"Automate the rotation","text":"<pre><code>vault read -tls-skip-verify sys/rotate/config\n\nKey                 Value\nenabled     true\ninterval        0\nmax_operations  3865470566\n</code></pre> <pre><code>vault read -tls-skip-verify sys/rotate/config \n\nvault write -tls-skip-verify sys/rotate/config interval=3600h\n\nvault write -tls-skip-verify sys/rotate/config max_operations=\"\"\n</code></pre>"},{"location":"vault6/1encrypt_key/#3-auto-unsealing","title":"3 Auto Unsealing","text":"<p>Attach this to vault's AM role..</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n          \"Effect\": \"Allow\",\n          \"Action\": [\n            \"kms: Encrypt\",\n            \"kms: Decrypt\",\n            \"kms: DescribeKey\"\n          ],\n          \"Resource\": \"*\"\n        }\n    ]\n}\n</code></pre> <ul> <li><code>values.yaml</code></li> </ul> <pre><code># Vault Helm Chart Value Overrides\nglobal:  \n  enabled: true  \n  tlsDisable: false\n\nserver:\n\n  readinessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true&amp;sealedcode=204&amp;uninitcode=204\"\n  livenessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true\"\n    initialDelaySeconds: 60\n\n  extraEnvironmentVars:\n    VAULT_CACERT: /vault/userconfig/vault-tls/vault.ca\n    VAULT_SKIP_VERIFY: true\n\n  extraVolumes:\n    - type: secret\n      name: vault-tls\n\n  standalone:\n    enabled: \"true\"\n\n    # config is a raw string of default configuration when using a Stateful\n    # deployment. Default is to use a PersistentVolumeClaim mounted at /vault/data\n    # and store data there. This is only used when using a Replica count of 1, and\n    # using a stateful set. This should be HCL.\n\n    # Note: Configuration files are stored in ConfigMaps so sensitive data\n    # such as passwords should be either mounted through extraSecretEnvironmentVars\n            # tls_client_ca_file = \"/vault/userconfig/vault-tls/vault.ca\"\n    # or through a Kube secret.  For more information see:\n    # https://www.vaultproject.io/docs/platform/k8s/helm/run#protecting-sensitive-vault-configurations\n    config: |\n\n      listener \"tcp\" {\n        address = \"[::]:8200\"\n        cluster_address = \"[::]:8201\"\n        tls_cert_file = \"/vault/userconfig/vault-tls/vault.crt\"\n        tls_key_file  = \"/vault/userconfig/vault-tls/vault.key\"\n\n      }\n      seal \"awskms\"\n      {\n        region     = \"us-east-1\"\n        kms_key_id = \"b7576d39-d159-46f4-b84b-33f5b618fce2\"\n\n      }\n\n      storage \"consul\" {\n        path = \"vault\"\n        address = \"consul-consul-server:8500\"\n      }\n      ui = true\n      log_level = \"Debug\"\n\n\n  service:\n    type: LoadBalancer\n    annotations: |\n      \"service.beta.kubernetes.io/aws-load-balancer-name\": \"vault-server\"\n</code></pre> <pre><code>### Stop the vault server\nkubectl scale statefulsets -n vault vault --replicas=0\n\n### update vault helm deployment\nhelm upgrade vault hashicorp/vault \\\n  --namespace vault \\\n  --values values.yaml\n\n### Start vault server \nkubectl scale statefulsets -n vault vault --replicas=1\n</code></pre> <pre><code>$ vault status -tls-skip-verify\n\nKey                  Value\n---                   ----\nRecovery Seal Type      shamir\n....\nStorage Type            consul\n</code></pre>"},{"location":"vault6/1encrypt_key/#migrate-the-seal","title":"Migrate the seal","text":"<pre><code>vault operator unseal -tls-skip-verify -migrate\n</code></pre> <pre><code>### restart vault\nkubectl delete pods -n vault vault-0\n\n### check the pods\nkubectl get pods -n vault -w\n</code></pre>"},{"location":"vault6/1encrypt_key/#associating-policies","title":"Associating Policies","text":""},{"location":"vault6/1encrypt_key/#root-token","title":"Root Token","text":"<ul> <li><code>dev-y-policy.hcl</code></li> </ul> <pre><code># List, create, update, and delete key/value secrets\npath \"secret/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# List, create, update, and delete key/value secrets at kv-v2/ path\npath \"kv-v2/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\npath \"kv/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n# Deny access to developer z's secret \npath \"secret/data/dev-z-secret\" \n{\n    capabilities = [\"deny\"]\n}\n\n# Manage secrets engines\npath \"sys/mounts/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# Create and manage ACL policies\npath \"sys/policies/acl/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"list\"]\n}\n</code></pre> <ul> <li><code>dev-z-policy.hcl</code></li> </ul> <pre><code># List, create, update, and delete key/value secrets\npath \"secret/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# Deny access to developer z's secret \npath \"secret/data/dev-y-secret\" \n{\n    capabilities = [\"deny\"]\n}\n\n# Manage secrets engines\npath \"sys/mounts/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# Create and manage ACL policies\npath \"sys/policies/acl/*\"\n{\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n</code></pre>"},{"location":"vault6/1encrypt_key/#create-or-update-a-policy","title":"create or update  a policy","text":"<pre><code>vault policy write -tls-skip-verify dev-y-policy policy/dev-y-policy.hcl\n\nSuccess! Uploaded policy: dev-y-policy\n\nvault policy write -tls-skip-verify dev-z-policy policy/dev-z-policy.hcl\n\nSuccess! Uploaded policy: dev-z-policy\n</code></pre> <pre><code>## List all policies\nvault policy list -tls-skip-verify\n\ndefault\ndev-y-policy\nroot\n</code></pre>"},{"location":"vault6/1encrypt_key/#read-the-policy","title":"Read the policy","text":"<pre><code>vault policy read -tls-skip-verify dev-y-policy \n</code></pre>"},{"location":"vault6/1encrypt_key/#generate-a-token-for-the-policy","title":"Generate a token for the policy","text":"<pre><code>vault token create -tls-skip-verify -format=json -policy=\"dev-y-policy\" -ttl 1h -use-limit=2\n\n....\nhvs.xxxx\n</code></pre>"},{"location":"vault6/1encrypt_key/#authenticate-with-that-token","title":"Authenticate with that token","text":"<pre><code>export VAULT_TOKEN=\"\"\n</code></pre> <p>or</p> <pre><code>vault login -tls-skip-verify\n</code></pre> <pre><code>$ vault kv list -tls-skip-verify secret/Keys\n\ndev-y-secret\ndev-z-secret\nmy-secret\n</code></pre> <pre><code>vault kv get -tls-skip-verify secret/my-secret\n</code></pre> <p></p> <pre><code>vault kv get -tls-skip-verify secret/dev-z-secret\n</code></pre> <p></p>"},{"location":"vault6/1encrypt_key/#root-token_1","title":"Root Token","text":"<ul> <li>Can do anything</li> <li>Never expires</li> <li>Should be revoked after initial setup</li> <li>Should be generated on the fly</li> </ul>"},{"location":"vault6/2bak_storage/","title":"2 Managing the Storage Backend","text":""},{"location":"vault6/2bak_storage/#1-intro-to-storage-backend","title":"1 Intro to Storage Backend","text":""},{"location":"vault6/2bak_storage/#storage-backend","title":"Storage Backend","text":"<p>A database in which vault stores secrets, system configurations, auth informations, etc.</p> <p>Storage Backend</p> <ul> <li>Is an untrusted component</li> <li>Stores data in an encrypted form</li> <li>Is required to persist data across Vault restarts</li> </ul>"},{"location":"vault6/2bak_storage/#types-of-storage-backend","title":"Types of Storage Backend","text":"<ul> <li>Structured databases</li> <li>Unstructured databases</li> <li>Object storage</li> <li>Key-value store</li> <li>Filesystem</li> </ul> <p>Broadly categorised:</p> <ul> <li>Integrated storage backend</li> <li>External storage backend</li> </ul>"},{"location":"vault6/2bak_storage/#integrated-storage-backend","title":"Integrated Storage Backend","text":"<ul> <li>Comes as a part of the vault server</li> <li>Uses raft consensus</li> <li>Stores data on the vault server itself</li> <li>Replicates data across replicas in cluster mode</li> </ul>"},{"location":"vault6/2bak_storage/#external-storage-backend","title":"External Storage Backend","text":"<ul> <li>Hosted separately from the vault server</li> <li>Stores all the data on a different server</li> </ul>"},{"location":"vault6/2bak_storage/#comparison","title":"Comparison","text":"<p>Integrated storage backend</p> <ul> <li>No additional software installation required</li> <li>Just monitor the vault server</li> </ul> <p>External storage backend</p> <ul> <li>External storage needs to be installed and configured</li> <li>Monitor the vault server and storage backend separately</li> </ul> <p></p>"},{"location":"vault6/2bak_storage/#storage-configuration","title":"Storage Configuration","text":"<ul> <li><code>integrated_strorage.hcl</code></li> </ul> <pre><code>storage  \"consul\" {\n    address = \"127.0.0.1:8500\"\n    path    = \"vault\"\n}\n\nlistener  \"tcp\" {\n    address = \"127.0.0.1:8200\"\n    tls_disable = 1\n}\n</code></pre> <ul> <li><code>consul storage.hcl</code></li> </ul> <pre><code>storage \"raft\" {\n    path = \"/path/to/raft/data\"\n    node_id = \"raft_node_1\"\n}\n\nlistener \"tcp\" {\n    address  =  \"127.0.0.1:8200\"\n    tls_disable = 1\n}\n</code></pre>"},{"location":"vault6/2bak_storage/#consul-storage-backend","title":"Consul storage backend","text":""},{"location":"vault6/2bak_storage/#single-point-of-failure","title":"Single Point of Failure","text":""},{"location":"vault6/2bak_storage/#vault-ha-setup","title":"Vault HA Setup","text":"<p><code>values.yaml</code></p> <pre><code># Vault Helm Chart Value Overrides\nglobal:  \n  enabled: true  \n  tlsDisable: false\n\nserver:\n\n  readinessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true&amp;sealedcode=204&amp;uninitcode=204\"\n  livenessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true\"\n    initialDelaySeconds: 60\n\n  extraSecretEnvironmentVars:\n    - envName: AWS_ACCESS_KEY_ID\n      secretName: aws-secret\n      secretKey: AWS_ACCESS_KEY_ID\n    - envName: AWS_SECRET_ACCESS_KEY\n      secretName: aws-secret\n      secretKey: AWS_SECRET_ACCESS_KEY\n\n  extraEnvironmentVars:\n    VAULT_CACERT: /vault/userconfig/vault-tls/vault.ca\n    VAULT_SKIP_VERIFY: true\n\n  extraVolumes:\n    - type: secret\n      name: vault-tls\n\n  ha:\n    enabled: true\n    replicas: 3\n    config: |\n      listener \"tcp\" {\n        address = \"[::]:8200\"\n        cluster_address = \"[::]:8201\"\n        tls_cert_file = \"/vault/userconfig/vault-tls/vault.crt\"\n        tls_key_file  = \"/vault/userconfig/vault-tls/vault.key\"\n\n      }\n\n      seal \"awskms\"\n      {\n        region     = \"us-east-1\"\n        kms_key_id = \"b7576d39-d159-46f4-b84b-33f5b618fce2\"\n      }\n\n      storage \"consul\" {\n        path = \"vault\"\n        address = \"HOST_IP:8500\"\n      }\n\n      service_registration \"kubernetes\" {}\n\n  standalone:\n    enabled: \"false\"\n\n    config: |\n\n      listener \"tcp\" {\n        address = \"[::]:8200\"\n        cluster_address = \"[::]:8201\"\n        tls_cert_file = \"/vault/userconfig/vault-tls/vault.crt\"\n        tls_key_file  = \"/vault/userconfig/vault-tls/vault.key\"\n\n      }\n      seal \"awskms\"\n      {\n        region     = \"us-east-1\"\n        kms_key_id = \"b7576d39-d159-46f4-b84b-33f5b618fce2\"\n      }\n\n      storage \"consul\" {\n        path = \"vault\"\n        address = \"consul-consul-server:8500\"\n      }\n      ui = true\n      log_level = \"Debug\"\n\n\n  service:\n    type: LoadBalancer\n    annotations: |\n      \"service.beta.kubernetes.io/aws-load-balancer-name\": \"vault-server\"\n</code></pre> <pre><code>### setup the vault address\nexport certificate_cn=\"\"\nexport VAULT_ADDR=\"https://${certificate_cn}:8200\"\n</code></pre> <pre><code>### install the vault ha\nhelm install vault-ha hashicorp/vault \\\n  --namespace vault \\\n  --values values.yaml\n\n### Check pods\nkubectl get pods -n vault\n\n### Get the public endpoint\nkubectl get svc -n vault\n</code></pre> <p></p> <p>Integrated Backend Setup</p> <p></p> <pre><code>### Check the vault status\nvault status -tls-skip-verify\n\nPath  Type   Accessor  Description\n---   ---    ---       ----\n...\nsys/ system  system_lafa27ac  system endpoints used for control, policy and debugging\n</code></pre> <pre><code>### set the new token\nvault login -tls-skip-verify\n\n### List key-values\nvault kv list -tls-skip-verify secret/\n\n### Remove the old standalone setup\nhelm delete vault -n vault\n</code></pre>"},{"location":"vault6/2bak_storage/#2-choosing-a-storage-backend","title":"2 Choosing a Storage Backend","text":"<p>Switch from consul storage backend to integrated storage backend</p> <ul> <li>Achieve n-2 redundancy</li> </ul> <p></p> <ul> <li>The ideal site for a vault HA cluster is 5</li> </ul> <p></p>"},{"location":"vault6/2bak_storage/#consul-backup-snapshot","title":"Consul backup snapshot","text":"<pre><code>### setup the vault address\nexport certificate_cn=\"\"\nexport VAULT_ADDR=\"https://${certificate_cn}:8200\"\n\nexport CONSUL_HTTP_ADDR=localhost:8500\n\n### port forward the consul service\nkubectl port-forward -n vault svc/consul-consul-server 8500\n\n</code></pre> <pre><code>$ consul snapshot save backup.snap\nSaved and verified snapshot to index 59280\n</code></pre> <p><code>values.yaml</code></p> <pre><code># Vault Helm Chart Value Overrides\nglobal:  \n  enabled: true  \n  tlsDisable: true\n\nserver:\n  readinessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true&amp;sealedcode=204&amp;uninitcode=204\"\n  livenessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true\"\n    initialDelaySeconds: 60\n\n\n  extraEnvironmentVars:\n    VAULT_SKIP_VERIFY: true\n\n  extraSecretEnvironmentVars:\n    - envName: AWS_ACCESS_KEY_ID\n      secretName: aws-secret\n      secretKey: AWS_ACCESS_KEY_ID\n    - envName: AWS_SECRET_ACCESS_KEY\n      secretName: aws-secret\n      secretKey: AWS_SECRET_ACCESS_KEY\n\n  extraVolumes:\n    - type: secret\n      name: vault-tls\n\n  ha:\n    enabled: true\n    replicas: 3\n    raft:\n      enabled: true\n      config: |\n        listener \"tcp\" {\n          address = \"[::]:8200\"\n          cluster_address = \"[::]:8201\"\n          tls_disable = \"true\"\n          tls_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n          tls_key_file  = \"/vault/userconfig/vault-tls/tls.key\"\n\n        }\n\n        seal \"awskms\"\n        {\n          region     = \"us-east-1\"\n          kms_key_id = \"794c5350-d4ca-4ea0-af29-1f69e6681361\"\n        }\n\n        storage \"raft\" {\n            path = \"/vault/data\"\n          retry_join {\n            leader_api_addr = \"http://vault-raft-0.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n          retry_join {\n            leader_api_addr = \"http://vault-raft-1.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n          retry_join {\n            leader_api_addr = \"http://vault-raft-2.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n        }\n\n        service_registration \"kubernetes\" {}\n\n\n  standalone:\n    enabled: \"false\"\n\n    config: |\n\n      listener \"tcp\" {\n        address = \"[::]:8200\"\n        cluster_address = \"[::]:8201\"\n        tls_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n        tls_key_file  = \"/vault/userconfig/vault-tls/tls.key\"\n      }\n\n      seal \"awskms\"\n      {\n        region     = \"us-east-1\"\n        kms_key_id = \"794c5350-d4ca-4ea0-af29-1f69e6681361\"\n      }\n\n      storage \"consul\" {\n        path = \"vault\"\n        address = \"consul-consul-server:8500\"\n      }\n      ui = true\n      log_level = \"Debug\"\n\n\n  service:\n    type: LoadBalancer\n</code></pre> <pre><code>### install the vault ha\nhelm install vault-raft hashicorp/vault \\\n  --namespace vault \\\n  --values values.yaml\n\n### List pods\nkubectl get pods -n vault\n...\nvault-raft-0\nvault-raft-1\nvault-raft-2\n...\n\n### Get pvc \nkubectl get pvc -n vault\n\ndata-vault-raft-0\n\ndata-vault-raft-1\n\ndata-vault-raft-2\n\n$ vault status -tls-skip-verify\nValue           Key\nRecovery Seal Type  awskms\nSealed      true\n...\n\n$ vault operator init -recovery-shares 3 -recovery-threshold 2\n\nRecovery Key 1: 5KGmlfumJQSOfti3SF5IGEA+/tEKLg\u00d7U2H1qBaKT9P77\nRecovery Key 2: Jetu/TTjh8vEj2VrfnDg4Ejm+zFYOvcjfA6X36CII161\nRecovery Key 3: duy1UrybAENHhi+15Mc80104Wy72jKVB02wFweDFhpmQ\n\nInitial Root Token: hvs.SOWH99QviJoVkS4nTkFv3Eig\n...\n</code></pre>"},{"location":"vault6/2bak_storage/#migrate-data-from-consul-backend","title":"Migrate data from consul backend","text":"<p>Vault Data Migration in Kubernetes</p> <ul> <li>To be inside the Vault pod</li> <li>No Vault process running</li> <li>No lock on the database</li> </ul>"},{"location":"vault6/2bak_storage/#create-dummy-pod","title":"Create dummy pod","text":"<pre><code>$ helm delete -n vault vault-raft\nrelease \"vault-raft\" uninstalled\n\n$ kubectl apply -n vault -f stateful.vaml\nstatefulset.apps/vault-raft created\n</code></pre> <ul> <li><code>stateful.vaml</code></li> </ul> <pre><code>apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  generation: 1\n  labels:\n    app.kubernetes.io/instance: vault-raft\n    app.kubernetes.io/name: vault\n  name: vault-raft\n  namespace: vault\nspec:\n  podManagementPolicy: Parallel\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n      app.kubernetes.io/instance: vault-raft\n      app.kubernetes.io/name: vault\n      component: server\n  serviceName: vault-raft-internal\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app.kubernetes.io/instance: vault-raft\n        app.kubernetes.io/name: vault\n        component: server\n        helm.sh/chart: vault-0.20.1\n    spec:\n      affinity:\n        podAntiAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n          - labelSelector:\n              matchLabels:\n                app.kubernetes.io/instance: vault-raft\n                app.kubernetes.io/name: vault\n                component: server\n            topologyKey: kubernetes.io/hostname\n      containers:\n      - command:\n         - cat\n        tty: true\n        # - /bin/sh\n        # - -ec\n        image: hashicorp/vault:1.10.3\n        imagePullPolicy: IfNotPresent\n        lifecycle:\n          preStop:\n            exec:\n              command:\n              - /bin/sh\n              - -c\n              - sleep 5 &amp;&amp; kill -SIGTERM $(pidof vault)\n        name: vault\n        ports:\n        - containerPort: 8200\n          name: https\n          protocol: TCP\n        - containerPort: 8201\n          name: https-internal\n          protocol: TCP\n        - containerPort: 8202\n          name: https-rep\n          protocol: TCP\n        resources: {}\n        securityContext:\n          allowPrivilegeEscalation: false\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /vault/data\n          name: data\n        - mountPath: /home/vault\n          name: home\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      schedulerName: default-scheduler\n      securityContext:\n        fsGroup: 1000\n        runAsGroup: 1000\n        runAsNonRoot: true\n        runAsUser: 100\n      terminationGracePeriodSeconds: 10\n      volumes:\n      - emptyDir: {}\n        name: home\n  updateStrategy:\n    type: OnDelete\n  volumeClaimTemplates:\n  - apiVersion: v1\n    kind: PersistentVolumeClaim\n    metadata:\n      creationTimestamp: null\n      name: data\n    spec:\n      accessModes:\n      - ReadWriteOnce\n      resources:\n        requests:\n          storage: 10Gi\n      volumeMode: Filesystem\n    status:\n      phase: Pending\n</code></pre> <pre><code>kubectl get pods -n vault\n....\nvault-raft-0\n</code></pre>"},{"location":"vault6/2bak_storage/#migrate-data","title":"Migrate data","text":"<pre><code>### exec into pod\nkubectl exec -it -n vault vault-raft-0 /bin/sh\n\n$ cd / tmp\n/tmp $\n</code></pre> <p>Create migration config file</p> <ul> <li><code>vi migrate.hcl</code></li> </ul> <pre><code>storage_source \"consul\" {\naddress = \"consul-consul-server:8500\"\npath    = \"vault\"\n}\n\nstorage_destination \"raft\" {\n  path = \"/vault/data\"\n}\n\ncluster_addr = \"https://vault-raft-0.vault-raft-internal:8201\"\n</code></pre> <p>Migrate data</p> <pre><code>vault operator migrate -config=migrate.hcl\n\n### Delete dummy pod**\nkubectl delete -n vault -f stateful.yaml\n\n### Get pvc \nkubectl get pvc -n vault\n\ndata-vault-raft-0\n\ndata-vault-raft-1\n\ndata-vault-raft-2\n</code></pre> <p>The data is already migrated into PV <code>data-vault-raft</code></p> <p>reinstall the vault ha</p> <pre><code>helm install vault-raft hashicorp/vault \\\n  --namespace vault \\\n  --values values.yaml\n\n### logs\nkubectl logs -n vault vault-raft-0 -f\n</code></pre> <p></p>"},{"location":"vault6/2bak_storage/#check-vault-cluster-health","title":"Check Vault cluster health","text":"<pre><code>### exec into pod\nkubectl exec -it -n vault vault-raft-0 /bin/sh\n\nvault status -tls-skip-verify\n\nKey                         Value\nRecovery Seal Type          shamir\nInitialized                 true\nSealed                      false\nTotal Recovery Shares       3\nThreshold                   2\nVersion                 1.10.3\nStorage Type            raft\nCluster Name            vault-cluster-d7110da1\nCluster ID              dc36dd21-147a-8eda-a553-501ae974afbb\nHA Enabled              true\nHA Cluster              https://vault-raft-0.vault-raft-internal:8201\nHA Mode                 active      \nActive Since            2022-07-06T09:49:09.331675004z\nRaft Committed Index        69\nRaft Applied Index          69\n</code></pre> <pre><code>vault secrets list -tls-skip-verify\n\nError listing secrets engines\uff1aError making API request.\n\nURL: GET https://127.0.0.1:8200/v1/sys/mounts\nCode:403\uff0cErrors:\n\n* permission denied\n</code></pre> <p>Login into the Vault</p> <pre><code>vault login\n\ntoken:  hvs.h4xour1BVcxSaVIJmaih7k30\n\n### List the secrets\nvault secrets list -tls-skip-verify\n\nvault kv list -tls-skip-verify secret/\n</code></pre> <pre><code>### Initiate the vault server\nvault operator init -recovery-shares 3 -recovery-threshold 2\n\n### Exec into 2nd and 3rd vault pod\nkubectl exec -it -n vault vault-raft-1 /bin/sh\nkubectl exec -it -n vault vault-raft-2 /bin/sh\n\n\n### Unseal the vault server\nvault operator raft join https://vault-raft-0.vault-raft-internal:8201\nvault operator unseal \n\n### Check cluster status\nvault operator raft list-peers\n</code></pre>"},{"location":"vault6/2bak_storage/#vault-backups","title":"Vault Backups","text":"<ul> <li> <p>Mitigate</p> <ul> <li>Single point of failure, dependency, and migration</li> </ul> </li> <li> <p>Not a full proof solution</p> </li> <li> <p>What if data is corrupted?</p> </li> </ul> <p></p>"},{"location":"vault6/2bak_storage/#backup","title":"Backup","text":"<ul> <li>Regular snapshots protect from uncertainties</li> <li>Is recommended<ul> <li>Before upgrades</li> <li>Before Migration</li> <li>Any significant change</li> </ul> </li> </ul> <p>Is not recommended during write operation</p> <pre><code>### setup the vault address\nexport certificate_cn=\"\"\nexport VAULT_ADDR=\"https://${certificate_cn}:8200\"\n\n### Get the public endpoint\nkubectl get svc -n vault\n...\nvault-raft   LoadBalancer 10.100.220.50  a0f403f1d78564986bd18f7eddac7c51-130545175.us-east-1.elb.amazonaws.com\n...\n\n\nexport certiticate_cn=\"a0f403f1d78564986bd18f7eddac7c51-130545175.us-east-1.elb.amazonaws.com\"\n\n\n### Snapshot of the raft storage backend\nvault operator raft snapshot save backup.snap\n</code></pre> <p>Restore the snapshot when needed</p> <p></p> <pre><code>### restore the snapshot\nvault operator raft snapshot restore -force &lt;snapshot-name&gt;\n</code></pre> <pre><code>### Automate the vault snapshot\nvault write sys/storage/raft/snapshot-auto/config/testsnap \\\n     storage_type=local \\\n     file_prefix=testsnappy \\\n     interval=120m \\\n     retain=7 \\\n     local_max_space=1000000 \\\n     path_prefix=/opt/vault/\n</code></pre>"},{"location":"vault6/3incident/","title":"3 Managing the Vault Server during an Incident","text":""},{"location":"vault6/3incident/#introduction-to-troubleshooting-concepts","title":"Introduction to Troubleshooting Concepts","text":"<ul> <li>Define up service level indicators(SLIs)</li> <li>Set up service level objectives(SLOs)</li> <li>Create service level agreements(SLAs)</li> </ul> <p>--</p> <ul> <li>Troubleshoot the incident</li> <li>Fix the incident</li> <li>Set up monitoring dashboards</li> </ul> <p>Techniques to troubleshoot and monitor the vault server</p> <p>1st part: Debug an incident</p> <p>Use server logs, audit logs, vault-debug, vault-diagnose</p> <p>2nd part: Monitor the vault server</p> <ul> <li>Expose and collect vault\u2019s telemetry metrics </li> <li>Install prometheus and grafana</li> </ul>"},{"location":"vault6/3incident/#vault-components","title":"Vault Components","text":"<ul> <li>Database server</li> <li>Virtual machine</li> <li>Cache server</li> <li>Messaging broker</li> </ul> <p>One System Components</p> <ul> <li>Virtual machine (VM)</li> <li>Vault server</li> <li>Consul backend</li> </ul> <p>Total components = 3</p> <p></p> <p>Total components = 7</p>"},{"location":"vault6/3incident/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Step-by-step process </li> <li>Debug each components one after the other </li> <li>Components are dependent<ul> <li>Status of one component gives the status  of other components</li> </ul> </li> </ul> <p>Standalone Setup</p> <p></p> <p></p> <p>Storage Backends</p> <p></p>"},{"location":"vault6/3incident/#demo-troubleshooting-steps","title":"Demo: Troubleshooting Steps","text":"<pre><code>export certificate_cn=\"\"\nexport VAULT_ADDR=\"http://${certificate_cn}:8200\"\n\n## List all pods\nkubectl get pods -n vault\n\n### Find the vault address\nkubectl get svc -n vault\n\n### Describe pods\nkubectl describe pod -n vault vault-raft-0\n\n### Tail the logs\nkubectl logs -n vault vault-raft-0 --tail=100 -f \n\n[DEBUG] core:\nrefreshing forwarding connection\n2022-08-03T20:07:35.212Z [DEBUG] core: clearing forwarding clients\n2022-08-03T20:07:35.212Z [DEBUG] core:\ndone clearing forwarding clients\n2022-08-03T20:07:35.212Z [DEBUG] core: done refreshing forwarding connection\n</code></pre> <ul> <li>Cannot connect to storage backend:  Fix the connection</li> <li>TLS Certificate has expired: Generate new TLS certificate</li> <li>Out of memory exception: Increase the memory requested</li> </ul>"},{"location":"vault6/3incident/#audit-logs-and-debug-command","title":"Audit Logs and Debug Command","text":"<ul> <li><code>values-debug.yaml</code></li> </ul> <pre><code># Vault Helm Chart Value Overrides\nglobal:  \n  enabled: true  \n  tlsDisable: true\n\nserver:\n  readinessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true&amp;sealedcode=204&amp;uninitcode=204\"\n  livenessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true\"\n    initialDelaySeconds: 60\n\n\n  extraEnvironmentVars:\n    VAULT_SKIP_VERIFY: true\n\n  extraSecretEnvironmentVars:\n    - envName: AWS_ACCESS_KEY_ID\n      secretName: aws-secret\n      secretKey: AWS_ACCESS_KEY_ID\n    - envName: AWS_SECRET_ACCESS_KEY\n      secretName: aws-secret\n      secretKey: AWS_SECRET_ACCESS_KEY\n\n  extraVolumes:\n    - type: secret\n      name: vault-tls\n\n  ha:\n    enabled: true\n    replicas: 3\n    raft:\n      enabled: true\n      config: |\n        listener \"tcp\" {\n          address = \"[::]:8200\"\n          cluster_address = \"[::]:8201\"\n          tls_disable = \"true\"\n          tls_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n          tls_key_file  = \"/vault/userconfig/vault-tls/tls.key\"\n\n        }\n        log_level = \"Debug\"\n        seal \"awskms\"\n        {\n          region     = \"us-east-1\"\n          kms_key_id = \"794c5350-d4ca-4ea0-af29-1f69e6681361\"\n        }\n\n        storage \"raft\" {\n            path = \"/vault/data\"\n          retry_join {\n            leader_api_addr = \"http://vault-raft-0.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n          retry_join {\n            leader_api_addr = \"http://vault-raft-1.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n          retry_join {\n            leader_api_addr = \"http://vault-raft-2.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n        }\n\n        service_registration \"kubernetes\" {}\n\n\n  standalone:\n    enabled: \"false\"\n\n    config: |\n\n      listener \"tcp\" {\n        address = \"[::]:8200\"\n        cluster_address = \"[::]:8201\"\n        tls_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n        tls_key_file  = \"/vault/userconfig/vault-tls/tls.key\"\n      }\n\n      seal \"awskms\"\n      {\n        region     = \"us-east-1\"\n        kms_key_id = \"794c5350-d4ca-4ea0-af29-1f69e6681361\"\n      }\n\n      storage \"consul\" {\n        path = \"vault\"\n        address = \"consul-consul-server:8500\"\n      }\n      ui = true\n      log_level = \"Debug\"\n\n\n  service:\n    type: LoadBalancer\n\n  auditStorage:\n      enabled: true\n      size: 10Gi\n      mountPath: \"/vault/audit\"\n</code></pre> <pre><code>auditStorage:\n    enabled: true\n    size: 10Gi\n    mountPath: \"/vault/audit\"\n</code></pre> <p>Kubernetes doesn't allow mount new PVC</p> <pre><code>### delete a service\nkubectl delete statefulsets -n vault vault-raft\n\n## upgrade the vault server\nhelm upgrade --install vault-raft hashicorp/vault \\\n  --namespace vault \\\n  --values values-debug.yaml\n</code></pre> <pre><code>kubectl get svc -n vault\n\nvault-raft LoadBalancer 172.21.93.101  baf366c6-us-east.lb.appdomain.cloud  8200:31468/TCP, 8201:32365/TCP  157m\n</code></pre> <pre><code>export certificate_cn=\"baf366c6-us-east.lb.appdomain.cloud\"\nexport VAULT_ADDR=\"http://${certificate_cn}:8200\"\n</code></pre>"},{"location":"vault6/3incident/#find-the-vault-leader-node-and-enable-audit-logs","title":"Find the vault leader node and enable audit logs","text":"<pre><code>### Exec into the vault pods\nkubectl exec -it -n vault vault-raft-0 /bin/sh\n\n### Find the vault leader\nvault operator raft list-peers\n\nvault-raft-0.vault-raft-internal:8201    follower\nvault-raft-1.vault-raft-internal:8201    follower\nvault-raft-2.vault-raft-internal:8201    leader\n\n### Exec into the vault pods\nkubectl exec -it -n vault vault-raft-2 /bin/sh\n\n### enable audit logs\nvault audit enable file file_path=/vault/audit/vault-audit.log\n\nSuccess! Enabled the file audit device at: file/\n\n### read the audit-log file inside the pod\ntail -f /vault/audit/vault-audit.log\n\n\n### Copy the audit log file to your local\nkubectl cp -n vault vault-raft-2:/vault/audit/vault-audit.log ./vault-audit.log\n\n### Query the audit log file\nexport AUDIT_LOG_FILE=./vault-audit.log\n\n#####  Display errors and their timestamp\njq 'select(.error != null) | [.time,.error]' $AUDIT_LOG_FILE\n\n#####  Display errors and their count\njq -n '[inputs | {Errors: .error} ] | group_by(.Errors) | map({Errors: .[0].Errors, Count: length}) | sort_by(-.Count) | .[]' $AUDIT_LOG_FILE\n</code></pre>"},{"location":"vault6/3incident/#run-vault-debug-command","title":"Run vault debug command","text":"<pre><code>cd /tmp \nvault debug\n....\nFinished capturing information,\nbundling files\nSuccess! Bundle written to: vault-debug-2022-08-03T20-28-27.tar.gz\n</code></pre>"},{"location":"vault6/3incident/#recovery-mode","title":"Recovery Mode","text":"<p>Recovery Mode</p> <ul> <li>Enable audit devices</li> <li>Enable resource quota on \"/sys/health\" path</li> </ul> <pre><code>vault audit enable file file_path=/vault/audit/vault-audit.log\n\nSuccess! Enabled the file audit device at: file/\n</code></pre> <p><code>values-recovery.yaml</code></p> <pre><code>...\nserver:\n  readinessProbe:\n    enabled: false\n    path: \"/v1/sys/health?standbyok=true&amp;sealedcode=204&amp;uninitcode=204\"\n  livenessProbe:\n    enabled: false\n    path: \"/v1/sys/health?standbyok=true\"\n    initialDelaySeconds: 60\n\nextraArgs: \"-recovery\"\n...\n</code></pre> <pre><code>## upgrade the vault server\nhelm upgrade --install vault-raft hashicorp/vault \\\n  --namespace vault \\\n  --values values-recovery.yaml\n\n## enable resource quota\n\nvault write /sys/quotas/config \\\n    rate_limit_exempt_paths=sys/health \\\n    enable_rate_limit_audit_logging=true \\\n    enable_rate_limit_response_headers=true\nSuccess! Data written to: sys/quotas/config\n\n### Generate root token\n\nvault operator generate-root -generate-otp -recovery-token\n\nvault operator generate-root-init -otp=\"wbPut45KNowEQG6MnEccFcxC2V29\" -recovery-token\n\nvault operator generate-root-nonce -recovery-token\n\nvault operator generate-root-decode=\"\" -otp=\"wbPut45KNowEQG6MnEccFcxC2V29\" -recovery-token\n</code></pre> <pre><code>$ vault operator generate-root -init -otp=\"wbPut45KNowEQG6MnEccFcxC2V29\" -recovery-token\n\nNonce   dea2166b-c2dc-6547-1aa2-dd49719e0618\nStarted true\nProgress  0/2\nComplete  false\n\n\n$ vault operator generate-root -nonce dea2166b-c2dc-6547-1aa2-dd49719e0618 -recovery-token\n\nEncoded Token H\u00d7QiWycAUxEcKRh1ZQ9RBwASEDAyMzsMWhOFSA\n\n\n$ vault operator generate-root -decode=\"HxQiWycAUxEcKR\nh1ZQ9RBWASEDAyMZsMWhOFSA\" -otp=\"wbPut45KNowEOG6MnEccEcxc2v2g\"\n-recovery-token\n\nhvr.S4fZRFo04HgJnwsStPCohk7g\n\n$ vault list sys/raw\n\nKeys\naudit/\ncore/\nlogical/\nsys/\n\n$ vault list sys/raw/sys/quotas/\nKeys\nconfig\ndefault_rate_limit_exempt_paths_toggle\n</code></pre> <p>Stores all the non-sensitive infos</p> <pre><code>vault read -field=value sys/raw/sys/quotas/config\n{\"enable_rate_limit_audit_logging\": true, \"enable_rate_limit_response_headers\":true,\n\"rate_limit_exempt_paths\":[\"sys/health\"]}\n</code></pre>"},{"location":"vault6/3incident/#enable-usage-metrics-in-vault","title":"Enable Usage Metrics in Vault","text":""},{"location":"vault6/3incident/#successful-incidental-management","title":"Successful Incidental Management","text":"<ul> <li>Deploying the preventive measures</li> <li>Documenting the incident and prevention measures</li> <li>Fixing the problem</li> <li>Troubleshooting the incident</li> <li>Categorising the incident</li> <li>Logging the incident</li> <li>Detecting the incident</li> </ul> <p>Detecting the incident</p> <ul> <li>Logging the incident</li> <li>Detecting the incident</li> </ul> <p>Deploying the preventive measures</p> <p>Vault Metrics</p> <p>Vault exposes both:</p> <ul> <li>Usage metrics </li> <li>Telemetry metrics</li> </ul> <p><code>policy.hcl</code></p> <pre><code># To retrieve the usage metrics\npath \"sys/internal/counters/activity\" {\n  capabilities = [\"read\"]\n}\n\n# To read and update the usage metrics configuration\npath \"sys/internal/counters/config\" {\n  capabilities = [\"read\", \"update\"]\n}\n</code></pre> <ul> <li><code>values-usage-metrics.yaml</code></li> </ul> <pre><code># Vault Helm Chart Value Overrides\nglobal:  \n  enabled: true  \n  tlsDisable: true\n\nserver:\n  readinessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true&amp;sealedcode=204&amp;uninitcode=204\"\n  livenessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true\"\n    initialDelaySeconds: 60\n\n  volumes:\n    - name: plugins\n      emptyDir: {}\n\n\n  volumeMounts:\n    - mountPath: /usr/local/libexec/vault\n      name: plugins\n      readOnly: false\n\n  extraEnvironmentVars:\n    VAULT_SKIP_VERIFY: true\n\n  extraSecretEnvironmentVars:\n    - envName: AWS_ACCESS_KEY_ID\n      secretName: aws-secret\n      secretKey: AWS_ACCESS_KEY_ID\n    - envName: AWS_SECRET_ACCESS_KEY\n      secretName: aws-secret\n      secretKey: AWS_SECRET_ACCESS_KEY\n\n  extraVolumes:\n    - type: secret\n      name: vault-tls\n\n  ha:\n    enabled: true\n    replicas: 3\n    raft:\n      enabled: true\n      config: |\n        ui = true\n\n        listener \"tcp\" {\n          address = \"[::]:8200\"\n          cluster_address = \"[::]:8201\"\n          tls_disable = \"true\"\n          tls_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n          tls_key_file  = \"/vault/userconfig/vault-tls/tls.key\"\n\n        }\n\n        plugin_directory = \"/usr/local/libexec/vault\"\n\n        seal \"awskms\"\n        {\n          region     = \"us-east-1\"\n          kms_key_id = \"794c5350-d4ca-4ea0-af29-1f69e6681361\"\n        }\n\n        storage \"raft\" {\n            path = \"/vault/data\"\n          retry_join {\n            leader_api_addr = \"http://vault-raft-0.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n          retry_join {\n            leader_api_addr = \"http://vault-raft-1.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n          retry_join {\n            leader_api_addr = \"http://vault-raft-2.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n        }\n\n        service_registration \"kubernetes\" {}\n\n\n  standalone:\n    enabled: \"false\"\n\n    config: |\n\n      listener \"tcp\" {\n        address = \"[::]:8200\"\n        cluster_address = \"[::]:8201\"\n        tls_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n        tls_key_file  = \"/vault/userconfig/vault-tls/tls.key\"\n      }\n\n      seal \"awskms\"\n      {\n        region     = \"us-east-1\"\n        kms_key_id = \"794c5350-d4ca-4ea0-af29-1f69e6681361\"\n      }\n\n      storage \"consul\" {\n        path = \"vault\"\n        address = \"consul-consul-server:8500\"\n      }\n      ui = true\n      log_level = \"Debug\"\n\n\n  service:\n    type: ClusterIP\n\n  auditStorage:\n      enabled: true\n      size: 10Gi\n      mountPath: \"/vault/audit\"\n</code></pre> <pre><code>## upgrade the vault server\nhelm upgrade --install vault-raft hashicorp/vault \\\n  --namespace vault \\\n  --values values-usage-metrics.yaml\n</code></pre> <pre><code>## Get the leader pod\nvault operator raft list-peers\n\n## restart the standby pods\nkubectl delete pods -n vault vault-raft-0 vault-raft-2\n\n## restart the leader pod\nkubectl delete pods -n vault vault-raft-1\n\n## Port forward the vault service\nkubectl port-forward -n vault svc/vault-raft 8200\n\n## Enable the usage metrics\nvault write sys/internal/counters/config enabled=enable retention_months=12\n\nSuccess! Data written to: svs/internal/counters/confia\n</code></pre>"},{"location":"vault6/3incident/#telemetry-metrics-part-1-enabling-metrics","title":"Telemetry Metrics Part 1: Enabling Metrics","text":""},{"location":"vault6/3incident/#telemetry-metrics-format","title":"Telemetry Metrics Format","text":"<p>Datadog / StatsD / Prometheus / Statsite</p> <p></p> <p></p> <p></p>"},{"location":"vault6/3incident/#types-of-telemetry-metrics","title":"Types of Telemetry Metrics","text":"<p>System level metrics</p> <ul> <li>CPU </li> <li>Network </li> <li>Memory </li> <li>Disk usage</li> </ul> <p>Request &amp; response metrics </p> <p>Audit device metrics</p>"},{"location":"vault6/3incident/#demo","title":"Demo","text":"<p>Expose the telemetry metrics Install Prometheus to scrape metrics  Install Grafana to view metrics</p> <p><code>vaules-telemetry.yaml</code></p> <pre><code># Vault Helm Chart Value Overrides\nglobal:  \n  enabled: true  \n  tlsDisable: true\n\nserver:\n  readinessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true&amp;sealedcode=204&amp;uninitcode=204\"\n  livenessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true\"\n    initialDelaySeconds: 60\n\n  volumes:\n    - name: plugins\n      emptyDir: {}\n\n\n  volumeMounts:\n    - mountPath: /usr/local/libexec/vault\n      name: plugins\n      readOnly: false\n\n  extraEnvironmentVars:\n    VAULT_SKIP_VERIFY: true\n\n  extraSecretEnvironmentVars:\n    - envName: AWS_ACCESS_KEY_ID\n      secretName: aws-secret\n      secretKey: AWS_ACCESS_KEY_ID\n    - envName: AWS_SECRET_ACCESS_KEY\n      secretName: aws-secret\n      secretKey: AWS_SECRET_ACCESS_KEY\n\n  extraVolumes:\n    - type: secret\n      name: vault-tls\n\n  ha:\n    enabled: true\n    replicas: 3\n    raft:\n      enabled: true\n      config: |\n        ui = true\n\n        telemetry {\n          disable_hostname = true\n          prometheus_retention_time = \"12h\"\n        }\n\n        listener \"tcp\" {\n          address = \"[::]:8200\"\n          cluster_address = \"[::]:8201\"\n          tls_disable = \"true\"\n          tls_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n          tls_key_file  = \"/vault/userconfig/vault-tls/tls.key\"\n\n        }\n\n        plugin_directory = \"/usr/local/libexec/vault\"\n\n        seal \"awskms\"\n        {\n          region     = \"us-east-1\"\n          kms_key_id = \"794c5350-d4ca-4ea0-af29-1f69e6681361\"\n        }\n\n        storage \"raft\" {\n            path = \"/vault/data\"\n          retry_join {\n            leader_api_addr = \"http://vault-raft-0.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n          retry_join {\n            leader_api_addr = \"http://vault-raft-1.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n          retry_join {\n            leader_api_addr = \"http://vault-raft-2.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n        }\n\n        service_registration \"kubernetes\" {}\n\n\n  standalone:\n    enabled: \"false\"\n\n    config: |\n\n      listener \"tcp\" {\n        address = \"[::]:8200\"\n        cluster_address = \"[::]:8201\"\n        tls_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n        tls_key_file  = \"/vault/userconfig/vault-tls/tls.key\"\n      }\n\n      seal \"awskms\"\n      {\n        region     = \"us-east-1\"\n        kms_key_id = \"794c5350-d4ca-4ea0-af29-1f69e6681361\"\n      }\n\n      storage \"consul\" {\n        path = \"vault\"\n        address = \"consul-consul-server:8500\"\n      }\n      ui = true\n      log_level = \"Debug\"\n\n\n  service:\n    type: ClusterIP\n\n  auditStorage:\n      enabled: true\n      size: 10Gi\n      mountPath: \"/vault/audit\"\n</code></pre> <p>Explicitly enable telemetry metrics</p> <p><code>telemetry Stanza</code></p> <pre><code>telemetry {\n    statsite_address = \"statsite.company.local:8125\"\n}\n</code></pre> <pre><code>## upgrade the vault server\nhelm upgrade --install vault-raft hashicorp/vault \\\n  --namespace vault \\\n  --values vaules-telemetry.yaml\n\n## Get the leader pod\nvault operator raft list-peers\n\n## restart the standby pods\nkubectl delete pods -n vault vault-raft-0 vault-raft-2\n\n## restart the leader pod\nkubectl delete pods -n vault vault-raft-1\n\n## Port forward the vault service\nkubectl port-forward -n vault svc/vault-raft 8200\n</code></pre> <p></p> <p>GET </p> <pre><code>localhost:8200/v1/sys/metrics?format=prometheus\n</code></pre> <p></p> <p><code>Prometeus.policy</code></p> <pre><code># To retrieve the telemetry metrics \npath \"/sys/metrics\" {\n    capabilities = [\"read\"]\n}\n</code></pre> <pre><code>### Create a policy\nvault policy write prometheus-policy prometheus-policy.hcl\n\n### Attach a token with this policy\nvault token create -format=json -policy=\"prometheus-policy\" -ttl 64000s\n....\nhvs.CAESIBht...\n\n### Get the token\ntoken =  hvs.CAESIBht...\n\n</code></pre> <ul> <li><code>prometheus.yaml</code></li> </ul> <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: prometheus\nrules:\n- apiGroups: [\"\"]\n  resources:\n  - nodes\n  - nodes/proxy\n  - services\n  - endpoints\n  - pods\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups:\n  - extensions\n  resources:\n  - ingresses\n  verbs: [\"get\", \"list\", \"watch\"]\n- nonResourceURLs: [\"/metrics\"]\n  verbs: [\"get\"]\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: prometheus-sa\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: prometheus\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: prometheus\nsubjects:\n- kind: ServiceAccount\n  name: prometheus-sa\n  namespace: vault\n\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-server-conf\n  labels:\n    name: prometheus-server-conf\ndata:\n  prometheus.yml: |-\n    global:\n      scrape_interval: 5s\n      evaluation_interval: 5s\n    rule_files:\n      - /etc/prometheus/prometheus.rules\n    alerting:\n      alertmanagers:\n      - scheme: http\n        static_configs:\n        - targets:\n          - \"alertmanager.monitoring.svc:9093\"\n    scrape_configs:\n      - job_name: vault\n        metrics_path: /v1/sys/metrics\n        params:\n          format: ['prometheus']\n        scheme: http\n        authorization:\n          credentials: \"hvs.CAESIBhtLbP5NqtwgSXlOgZm0apZEvDex6r2Fk14ODboQdQbGh4KHGh2cy5WWXFzQ25QUE5VNjM1OWJmekdLM1pBb2g\"\n        static_configs:\n        - targets: ['vault-raft.vault:8200']\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus-deployment\n  labels:\n    app: prometheus-server\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: prometheus-server\n  template:\n    metadata:\n      labels:\n        app: prometheus-server\n    spec:\n      serviceAccountName: prometheus-sa\n      containers:\n        - name: prometheus\n          image: prom/prometheus\n          args:\n            - \"--config.file=/etc/prometheus/prometheus.yml\"\n            - \"--storage.tsdb.path=/prometheus/\"\n          ports:\n            - containerPort: 9090\n          volumeMounts:\n            - name: prometheus-config-volume\n              mountPath: /etc/prometheus/\n            - name: prometheus-storage-volume\n              mountPath: /prometheus/\n      volumes:\n        - name: prometheus-config-volume\n          configMap:\n            defaultMode: 420\n            name: prometheus-server-conf\n\n        - name: prometheus-storage-volume\n          emptyDir: {}\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: prometheus-service\n  annotations:\n      prometheus.io/scrape: 'true'\n      prometheus.io/port:   '9090'\n\nspec:\n  selector: \n    app: prometheus-server\n  type: NodePort  \n  ports:\n    - port: 9090\n      targetPort: 9090 \n      nodePort: 30000\n</code></pre> <pre><code>authorization:\n    credentials: \"hvs.CAESIBhtLbP5NqtwgSXlOgZm0apZEvDex6r2Fk14ODboQdQbGh4KHGh2cy5WWXFzQ25QUE5VNjM1OWJmekdLM1pBb2g\"\n</code></pre> <pre><code>kubectl get pods -n vault\n\nprometheus-deployment-5bcfccb5c7-c4px6\n\n### Port-forward the prometheus service\nkubectl port-forward -n vault svc/prometheus-service 9090\n</code></pre> <p><code>http://localhost:9090</code></p> <p></p> <p><code>vault_audit_log_response</code></p> <p>Deploy grafana server</p> <p></p> <p></p> <pre><code>### Deploy the grafana\nkubectl apply -n vault -f grafana.yaml\n\n### Port-forward the grafana service\nkubectl port-forward -n vault svc/grafana 3000\n</code></pre> <ul> <li><code>grafana.yaml</code></li> </ul> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: grafana-datasources\ndata:\n  prometheus.yaml: |-\n    {\n        \"apiVersion\": 1,\n        \"datasources\": [\n            {\n               \"access\":\"proxy\",\n                \"editable\": true,\n                \"name\": \"vault\",\n                \"orgId\": 1,\n                \"type\": \"prometheus\",\n                \"url\": \"http://prometheus-service.vault.svc:8080\",\n                \"version\": 1\n            }\n        ]\n    }\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      name: grafana\n      labels:\n        app: grafana\n    spec:\n      containers:\n      - name: grafana\n        image: grafana/grafana:latest\n        ports:\n        - name: grafana\n          containerPort: 3000\n        resources:\n          limits:\n            memory: \"1Gi\"\n            cpu: \"1000m\"\n          requests: \n            memory: 500M\n            cpu: \"500m\"\n        volumeMounts:\n          - mountPath: /var/lib/grafana\n            name: grafana-storage\n          - mountPath: /etc/grafana/provisioning/datasources\n            name: grafana-datasources\n            readOnly: false\n      volumes:\n        - name: grafana-storage\n          emptyDir: {}\n        - name: grafana-datasources\n          configMap:\n              defaultMode: 420\n              name: grafana-datasources\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: grafana\n  annotations:\n      prometheus.io/scrape: 'true'\n      prometheus.io/port:   '3000'\nspec:\n  selector: \n    app: grafana\n  type: NodePort  \n  ports:\n    - port: 3000\n      targetPort: 3000\n      nodePort: 32000\n</code></pre> <p></p> <p></p>"},{"location":"vault6/4Plugins/","title":"4 Managing External Plugins and Server Upgrades","text":"<ul> <li>Manages the lifecycle of the Vault</li> <li>Install a plugin</li> <li>Upgrade the Vault server</li> </ul>"},{"location":"vault6/4Plugins/#skills-to-expand-and-upgrade-the-vault-server","title":"Skills to expand and upgrade the Vault server","text":"<ul> <li>Understand the architecture of plugin system and install an external plugin</li> <li>Upgrade the Vault server</li> <li>Understand key management secret engine in the Vault server</li> </ul>"},{"location":"vault6/4Plugins/#understanding-plugins","title":"Understanding Plugins","text":""},{"location":"vault6/4Plugins/#plugins-architecture","title":"Plugin's Architecture","text":""},{"location":"vault6/4Plugins/#comparison","title":"Comparison","text":"<ul> <li> <p>Built-in plugins</p> <ul> <li>Come by default with in Vault server</li> <li>Don't require an operator intervention to run</li> <li>Share the memory space of the Vault server</li> </ul> </li> <li> <p>External plugins</p> <ul> <li>Come separately from the Vault server</li> <li>Require an operator intervention to run</li> <li>Don't share the memory space of the Vault server</li> </ul> </li> </ul> <p></p> <pre><code>## List all plugins\nvault plugin list\n\n## List all secret plugins\nvault plugin list secret\n\n## Get the azure plugin info\nvault plugin info secret azure\n\nKey     Value\n---    ----\nargs        []\nbuiltin true\ncommand n/a\nname         azure\nsha256. n/a\n\n\n## Enable the key value secret\nvault secrets enable -version=2 -path=kv2 kv\n</code></pre>"},{"location":"vault6/4Plugins/#install-new-vault-enable-plugin","title":"Install new vault enable plugin","text":"<ul> <li><code>values-debug.yaml</code></li> </ul> <pre><code># Vault Helm Chart Value Overrides\nglobal:  \n  enabled: true  \n  tlsDisable: true\n\nserver:\n  readinessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true&amp;sealedcode=204&amp;uninitcode=204\"\n  livenessProbe:\n    enabled: true\n    path: \"/v1/sys/health?standbyok=true\"\n    initialDelaySeconds: 60\n\n  volumes:\n    - name: plugins\n      emptyDir: {}\n\n\n  volumeMounts:\n    - mountPath: /usr/local/libexec/vault\n      name: plugins\n      readOnly: false\n\n  extraEnvironmentVars:\n    VAULT_SKIP_VERIFY: true\n\n  extraSecretEnvironmentVars:\n    - envName: AWS_ACCESS_KEY_ID\n      secretName: aws-secret\n      secretKey: AWS_ACCESS_KEY_ID\n    - envName: AWS_SECRET_ACCESS_KEY\n      secretName: aws-secret\n      secretKey: AWS_SECRET_ACCESS_KEY\n\n  extraVolumes:\n    - type: secret\n      name: vault-tls\n\n  ha:\n    enabled: true\n    replicas: 3\n    raft:\n      enabled: true\n      config: |\n        listener \"tcp\" {\n          address = \"[::]:8200\"\n          cluster_address = \"[::]:8201\"\n          tls_disable = \"true\"\n          tls_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n          tls_key_file  = \"/vault/userconfig/vault-tls/tls.key\"\n\n        }\n\n        plugin_directory = \"/usr/local/libexec/vault\"\n        ui = true\n        seal \"awskms\"\n        {\n          region     = \"us-east-1\"\n          kms_key_id = \"794c5350-d4ca-4ea0-af29-1f69e6681361\"\n        }\n\n        storage \"raft\" {\n            path = \"/vault/data\"\n          retry_join {\n            leader_api_addr = \"http://vault-raft-0.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n          retry_join {\n            leader_api_addr = \"http://vault-raft-1.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n          retry_join {\n            leader_api_addr = \"http://vault-raft-2.vault-raft-internal:8200\"\n            leader_client_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n            leader_client_key_file = \"/vault/userconfig/vault-tls/tls.key\"\n          }\n        }\n\n        service_registration \"kubernetes\" {}\n\n\n  standalone:\n    enabled: \"false\"\n\n    config: |\n\n      listener \"tcp\" {\n        address = \"[::]:8200\"\n        cluster_address = \"[::]:8201\"\n        tls_cert_file = \"/vault/userconfig/vault-tls/tls.crt\"\n        tls_key_file  = \"/vault/userconfig/vault-tls/tls.key\"\n      }\n\n      seal \"awskms\"\n      {\n        region     = \"us-east-1\"\n        kms_key_id = \"794c5350-d4ca-4ea0-af29-1f69e6681361\"\n      }\n\n      storage \"consul\" {\n        path = \"vault\"\n        address = \"consul-consul-server:8500\"\n      }\n      ui = true\n      log_level = \"Debug\"\n\n\n  service:\n    type: ClusterIP\n\n  auditStorage:\n      enabled: true\n      size: 10Gi\n      mountPath: \"/vault/audit\"\n</code></pre> <ul> <li><code>plugin_directory = \"/usr/local/libexec/vault\"</code></li> </ul> <pre><code>volumes:\n    - name: plugins\n      emptyDir: {}\n\n\nvolumeMounts:\n    - mountPath: /usr/local/libexec/vault\n      name: plugins\n      readOnly: false\n</code></pre> <p>Vault statefulset doesn't allow ADD new PVC directly.</p> <pre><code>### delete a service\nkubectl delete statefulsets -n vault vault-raft\n\n## upgrade the vault server\nhelm upgrade --install vault-raft hashicorp/vault \\\n  --namespace vault \\\n  --values values-debug.yaml\n\n### Find the vault leader\nvault operator raft list-peers\n\nvault-raft-0.vault-raft-internal:8201  leader\n\n## Download Google secret plugin\ncurl \\\n    --silent \\\n    https://github.com/GoogleCloudPlatform/vault-plugin-secrets-gcppca/releases/download/v1.1.0/vault-plugin-secrets-gcppca --output vault-plugin-secrets-gcppca\n\n### Get the SHASMU\nexport SHASUM=$(shasum -a 256 \"vault-plugin-secrets-gcppca\" | cut -d \" \" -f1)\necho $SHASUM\n\n### Copy the plugin into the pod\nkubectl cp -n vault vault-plugin-secrets-gcppca vault-raft-0:/usr/local/libexec/vault/vault-plugin-secrets-gcppca\n</code></pre>"},{"location":"vault6/4Plugins/#register-plugin","title":"Register plugin","text":"<pre><code>### Register the plugin\nvault plugin register \\\n    -sha256=\"${SHASUM}\" \\\n    -command=\"vault-plugin-secrets-gcppca\" \\\n    secret vault-plugin-secrets-gcppca\n\nSuccess! Registered plugin: vault-plugin-secrets-gcppca\n\n### Enable the plugin\nvault secrets enable -path=\"gcppca\" \\\n   --description='Vault CA Service Plugin' \\\n   --plugin-name='vault-plugin-secrets-gcppca' vault-plugin-secrets-gcppca\n\n### Get plugin info\nvault plugin info secret vault-plugin-secrets-gcppca\n...\nvault-plugin-secrets-gcppca \n\n### Reload the plugin\nvault plugin reload -plugin vault-plugin-secrets-gcppca\n</code></pre>"},{"location":"vault6/4Plugins/#vault-upgrade","title":"Vault Upgrade","text":""},{"location":"vault6/4Plugins/#vault-upgrade-steps","title":"Vault Upgrade Steps","text":"<ul> <li>Review the version upgrade notes</li> <li>Take backup of the data</li> <li>Stop the Vault server</li> <li>Replace the existing Vault binary with the latest one</li> <li>Start the Vault server and unseal it</li> </ul>"},{"location":"vault6/4Plugins/#vault-key-management","title":"Vault Key Management","text":"<pre><code>### Snapshot of the raft storage backend\nvault operator raft snapshot save backup.snap\n\n## Get the vault image version\nkubectl describe pods -n vault vault-raft-1\n\n## upgrade the vault server\nhelm upgrade --install vault-raft hashicorp/vault \\\n  --namespace vault \\\n  --values values-upgrade.yaml\n\n## Get the leader pod\nvault operator raft list-peers\n\n## Get vault status\nvault status\n\n## restart the standby pods\nkubectl delete pods -n vault --selector=\"vault-active=false\"\n\n## restart the leader pod\nkubectl delete pods -n vault vault-raft-0\n</code></pre>"},{"location":"vault6/4Plugins/#vault-key-management_1","title":"Vault Key Management","text":"<p>Provides a consistent way for distribution and managing the lifecycle of cryptographic keys in cloud KMS provider</p> <p>Setup</p> <p>Most secrets engines must be configured in advance before they can perform their functions. </p> <p>These steps are usually completed by an operator or configuration management tool.</p> <p>Enable the Key Management secrets engine:</p> <pre><code>$ vault secrets enable keymgmt\nSuccess! Enabled the keymgmt secrets engine at: keymgmt/\n</code></pre> <p>By default, the secrets engine will mount at the name of the engine. </p> <p>To enable the secrets engine at a different path, use the <code>-path</code> argument.</p>"}]}